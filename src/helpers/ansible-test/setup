#!/usr/bin/env bash
# Template: 1.0.0
#######################################
# Container64 / Setup container image
#
# Author: SerDigital64 (https://github.com/serdigital64)
# Repository: https://github.com/automation64/container64
# Version: 1.2.0
#
#######################################
# Copyright [2023] [serdigital64@gmail.com]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

# Environment Definition. See docs/base-environment.md for details
export CNT64_BASHLIB64="${CNT64_BASHLIB64:-/opt/bl64/bashlib64.bash}"
export CNT64_DEBUG="${CNT64_DEBUG:-}"

# shellcheck source=SCRIPTDIR/../../../lib/bashlib64.bash
source "$CNT64_BASHLIB64" || { echo "Error: unable to load bashlib64 (${CNT64_BASHLIB64})" && exit 1; }

#
# Globals
#

export CNT64_ANSIBLE_USER
export CNT64_ANSIBLE_HOME
export CNT64_ANSIBLE_VERSIONS

#
# Functions
#

function cnt64_setup_configure_os() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'Configure systemctl multi-user'
  systemctl set-default multi-user.target
}

function cnt64_setup_create_users() {
  bl64_dbg_app_show_function
  local user=''
  local home=''
  local current=''

  for current in $CNT64_ANSIBLE_VERSIONS; do
    home="${CNT64_ANSIBLE_HOME}-${current}"
    user="${CNT64_ANSIBLE_USER}-${current}"
    bl64_msg_show_task "Create ansible installation owner user (${user})"
    bl64_iam_user_add "$user" "$home" &&
      bl64_rbac_add_root "$user" ||
      return $?
  done
}

function cnt64_setup_select_packages() {
  bl64_dbg_app_show_function
  local packages=''

  # package: SYSTEMD_PREREQS
  # package: SYSTEMD_PACKAGES
  # package: SUDO_PACKAGES
  # package: PYTHON3_PREREQS
  # package: PYTHON3_PACKAGES
  if bl64_os_match "${BL64_OS_ALM}-8"; then
    packages="${packages} kbd-legacy kbd-misc xkeyboard-config diffutils kbd libxkbcommon"
    packages="${packages} systemd systemd-libs systemd-pam systemd-udev"
    packages="${packages} sudo"
    packages="${packages} platform-python-pip python3-pip python3-setuptools"
    packages="${packages} python36"
  elif bl64_os_match "${BL64_OS_CNT}-8"; then
    packages="${packages} xkeyboard-config diffutils kbd"
    packages="${packages} systemd systemd-libs systemd-pam systemd-udev"
    packages="${packages} sudo"
    packages="${packages} platform-python-pip python3-pip python3-setuptools"
    packages="${packages} python39"
  elif bl64_os_match "${BL64_OS_DEB}-10"; then
    packages="${packages} dbus dmsetup"
    packages="${packages} systemd systemd-sysv"
    packages="${packages} sudo" "lsb-base"
    packages="${packages} bzip2 file mime-support readline-common xz-utils"
    packages="${packages} python3 python3-minimal python3.7 python3.7-minimal"
  elif bl64_os_match "${BL64_OS_DEB}-11"; then
    packages="${packages} dbus dmsetup"
    packages="${packages} systemd systemd-timesyncd"
    packages="${packages} sudo"
    packages="${packages} ca-certificates media-types openssl readline-common"
    packages="${packages} python3 python3-minimal python3.9 python3.9-minimal"
  elif bl64_os_match "${BL64_OS_FD}-33"; then
    packages="${packages} acl dbus device-mapper hwdata pciutils rdma-core xkeyboard-config diffutils kbd-legacy kbd-misc  diffutils kbd libxkbcommon"
    packages="${packages} systemd systemd-pam systemd-rpm-macros systemd-networkd"
    packages="${packages} "
    packages="${packages} "
    packages="${packages} "
  elif bl64_os_match "${BL64_OS_FD}-35"; then
    packages="${packages} acl dbus device-mapper hwdata pciutils rdma-core xkeyboard-config diffutils kbd-legacy kbd-misc  diffutils kbd libxkbcommon"
    packages="${packages} systemd systemd-pam systemd-rpm-macros systemd-networkd"
    packages="${packages} "
    packages="${packages} "
    packages="${packages} "
  elif bl64_os_match "${BL64_OS_FD}-36"; then
    packages="${packages} acl dbus device-mapper hwdata pciutils rdma-core xkeyboard-config diffutils kbd-legacy kbd-misc  diffutils kbd libxkbcommon"
    packages="${packages} systemd systemd-pam systemd-rpm-macros systemd-networkd"
    packages="${packages} "
    packages="${packages} "
    packages="${packages} "
  elif bl64_os_match "${BL64_OS_OL}-8"; then
    packages="${packages} kbd-legacy kbd-misc xkeyboard-config diffutils kbd libxkbcommon"
    packages="${packages} systemd systemd-libs systemd-pam systemd-udev"
    packages="${packages} sudo"
    packages="${packages} platform-python-pip python3-pip python3-setuptools"
    packages="${packages} python36"
  elif bl64_os_match "${BL64_OS_OL}-9"; then
    packages="${packages} xkeyboard-config diffutils kbd"
    packages="${packages} systemd systemd-libs systemd-pam systemd-udev"
    packages="${packages} sudo"
    packages="${packages} platform-python-pip python3-pip python3-setuptools"
    packages="${packages} python39"
  elif bl64_os_match "${BL64_OS_RHEL}-8"; then
    packages="${packages} kbd-legacy kbd-misc xkeyboard-config diffutils kbd libxkbcommon"
    packages="${packages} systemd systemd-libs systemd-pam systemd-udev"
    packages="${packages} sudo"
    packages="${packages} platform-python-pip python3-pip python3-setuptools"
    packages="${packages} python36"
  elif bl64_os_match "${BL64_OS_RCK}-8"; then
    packages="${packages} kbd-legacy kbd-misc xkeyboard-config diffutils kbd libxkbcommon"
    packages="${packages} systemd systemd-libs systemd-pam systemd-udev"
    packages="${packages} sudo"
    packages="${packages} platform-python-pip python3-pip python3-setuptools"
    packages="${packages} python36"
  elif bl64_os_match "${BL64_OS_UB}-20.4"; then
    packages="${packages} dbus dmsetup gir1.2-glib-2.0 networkd-dispatcher shared-mime-info tzdata xdg-user-dirs"
    packages="${packages} systemd systemd-timesyncd"
    packages="${packages} sudo"
    packages="${packages} file mime-support readline-common xz-utils"
    packages="${packages} python3 python3-dbus python3-gi python3-minimal python3.8 python3.8-minimal"
  elif bl64_os_match "${BL64_OS_UB}-21.4"; then
    packages="${packages} xkeyboard-config diffutils kbd"
    packages="${packages} dbus dmsetup gir1.2-glib-2.0 networkd-dispatcher shared-mime-info xdg-user-dirs"
    packages="${packages} systemd systemd-timesyncd"
    packages="${packages} sudo"
    packages="${packages} ca-certificates media-types openssl readline-common tzdata"
    packages="${packages} python3 python3-minimal python3-dbus python3-gi"
  elif bl64_os_match "${BL64_OS_UB}-22.4"; then
    packages="${packages} dbus dmsetup gir1.2-glib-2.0 networkd-dispatcher shared-mime-info xdg-user-dirs"
    packages="${packages} systemd systemd-timesyncd"
    packages="${packages} sudo"
    packages="${packages} ca-certificates media-types openssl readline-common tzdata"
    packages="${packages} python3 python3-minimal python3.9 python3-dbus python3-gi"
  fi
  [[ -n "$packages" ]] && echo "$packages"
}

#######################################
# Install application packages
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Package installer progress and errors
# Returns:
#   0: package installed ok
#   >0: unable to install package
#######################################
function cnt64_setup_install() {
  bl64_dbg_app_show_function
  local packages=''

  bl64_msg_show_task 'deploy packages'
  packages="$(cnt64_setup_select_packages)" ||
    return $?
  # shellcheck disable=SC2086
  bl64_pkg_deploy $packages ||
    return $?

  cnt64_setup_configure_os &&
    cnt64_setup_create_users ||
    return $?

  bl64_msg_show_task 'cleanup temporary files'
  bl64_fs_cleanup_full
  return 0
}

#######################################
# Initialize environment
#
# Arguments:
#   None
# Outputs:
#   Initializacion progress messages
# Returns:
#   0: initialization ok
#   >: failed to initialize
#######################################
function cnt64_setup_initialize() {
  bl64_dbg_app_show_function

  bl64_os_check_version \
    "${BL64_OS_ALM}-8" \
    "${BL64_OS_CNT}-8" \
    "${BL64_OS_DEB}-10" "${BL64_OS_DEB}-11" \
    "${BL64_OS_FD}-33" "${BL64_OS_FD}-35" "${BL64_OS_FD}-36" \
    "${BL64_OS_OL}-8" "${BL64_OS_OL}-9" \
    "${BL64_OS_RHEL}-8" \
    "${BL64_OS_RCK}-8" \
    "${BL64_OS_UB}-20.4" "${BL64_OS_UB}-21.4" "${BL64_OS_UB}-22.4" &&
    bl64_check_export 'CNT64_ANSIBLE_USER' &&
    bl64_check_export 'CNT64_ANSIBLE_HOME' &&
    bl64_check_export 'CNT64_ANSIBLE_VERSIONS' &&
    bl64_check_privilege_root &&
    bl64_pkg_setup
  return 0
}

#
# Main
#

declare cnt64_setup_installer_description='Setup Container64 image'
declare -i cnt64_setup_status=0

bl64_msg_all_enable_verbose
bl64_msg_show_batch_start "$cnt64_setup_installer_description"

[[ -n "$CNT64_DEBUG" ]] && bl64_dbg_lib_enable
cnt64_setup_initialize &&
  cnt64_setup_install
cnt64_setup_status=$?

bl64_msg_show_batch_finish "$cnt64_setup_status" "$cnt64_setup_installer_description"
exit $cnt64_setup_status
