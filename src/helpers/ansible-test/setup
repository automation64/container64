#!/usr/bin/env bash
# Template: 1.5.0
#######################################
# Container64 / Setup container image
#
# Author: SerDigital64 (https://github.com/serdigital64)
# Repository: https://github.com/automation64/container64
# Version: 2.2.0
#
#######################################
# Copyright [2023] [serdigital64@gmail.com]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

# Environment Definition. See docs/base-environment.md for details
export CNT64_BASHLIB64="${CNT64_BASHLIB64:-/opt/bl64}"
export CNT64_DEBUG="${CNT64_DEBUG:-}"

# shellcheck source-dir=lib/bl64
source "${CNT64_BASHLIB64}/bashlib64-module-pkg.bash" &&
  source "${CNT64_BASHLIB64}/bashlib64-module-rxtx.bash" &&
  source "${CNT64_BASHLIB64}/bashlib64-module-rnd.bash" &&
  source "${CNT64_BASHLIB64}/bashlib64-module-vcs.bash" &&
  source "${CNT64_BASHLIB64}/bashlib64-module-api.bash" &&
  source "${CNT64_BASHLIB64}/bashlib64-module-rbac.bash" &&
  source "${CNT64_BASHLIB64}/bashlib64-module-iam.bash" &&
  source "${CNT64_BASHLIB64}/bashlib64-module-txt.bash" &&
  source "${CNT64_BASHLIB64}/bashlib64-module-fmt.bash" &&
  source "${CNT64_BASHLIB64}/bashlib64-module-fs.bash" &&
  source "${CNT64_BASHLIB64}/bashlib64-core.bash" || { echo "Error: unable to load bashlib64 (${CNT64_BASHLIB64})" && exit 1; }

#
# Globals
#

# Se the following three variables to create dedicate users for ansible installation
export CNT64_ANSIBLE_USER="${CNT64_ANSIBLE_USER:-}"
export CNT64_ANSIBLE_HOME="${CNT64_ANSIBLE_HOME:-}"
export CNT64_ANSIBLE_VERSIONS="${CNT64_ANSIBLE_VERSIONS:-}"

#
# Functions
#

function cnt64_setup_configure_os() {
  bl64_dbg_app_show_function

  bl64_msg_show_task 'Configure systemctl multi-user'
  systemctl set-default multi-user.target

  if bl64_os_match "${BL64_OS_UB}"; then
    bl64_dbg_app_show_comments 'Base image does not have locales, need to generate at least for en'
    bl64_msg_show_task 'Generate en_US.UTF-8 locale'
    localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8
  fi
}

function cnt64_setup_configure_users() {
  bl64_dbg_app_show_function
  local user_mode='0750'
  local user_home="/home/${CNT64_USER}"
  local xdg_config="${user_home}/.config"
  local xdg_cache="${user_home}/.cache"
  local xdg_local="${user_home}/.local"
  local user_profile=''
  local user_bashrc_d="${user_home}/.bashrc.d"

  bl64_msg_show_task "Initialize user's XDG directories (${CNT64_USER})"
  bl64_fs_create_dir "$user_mode" "$CNT64_USER" "$CNT64_USER" \
    "$xdg_config" \
    "$xdg_local" \
    "$xdg_cache" \
    "${xdg_local}/bin" \
    "${xdg_local}/lib" \
    "${xdg_local}/share" \
    "${xdg_local}/state" ||
    return $?

  bl64_msg_show_task "Create modular bashr store (${user_bashrc_d})"
  bl64_fs_create_dir "$user_mode" "$CNT64_USER" "$CNT64_USER" \
    "$user_bashrc_d"

  bl64_msg_show_task "Setup user's bash environment (${CNT64_USER})"
  if bl64_os_match "${BL64_OS_ALP}"; then
    user_profile="${user_home}/.bash_profile"
    # shellcheck disable=SC2016
    printf \
      '#!/usr/bin/env bash
# added-by-installer64 #
declare module=""
export PATH="$HOME/.local/bin:$HOME/bin:$PATH"
if [[ -d "${HOME}/.bashrc.d" ]]; then
  for module in ${HOME}/.bashrc.d/*; do
    [[ -r "$module" ]] && source "$module"
  done
fi\n' >"$user_profile" &&
      bl64_fs_set_permissions "$user_mode" "$CNT64_USER" "$CNT64_USER" "$user_profile"
  elif bl64_os_match "${BL64_OS_UB}"; then
    user_profile="${user_home}/.bashrc"
    # shellcheck disable=SC2016
    printf \
      '\n# added-by-installer64 #
declare module=""
if [[ -d "${HOME}/.bashrc.d" ]]; then
  for module in ${HOME}/.bashrc.d/*; do
    [[ -r "$module" ]] && source "$module"
  done
fi\n' >>"$user_profile"
  fi
}

function cnt64_setup_create_users() {
  bl64_dbg_app_show_function
  local user_home=''
  local user_shell=''
  local user_new=''
  local user_current=''

  bl64_msg_show_task "Create entrypoint user (${CNT64_USER})"
  user_home="/home/${CNT64_USER}"
  user_shell='/bin/bash'
  bl64_iam_user_add \
    "$CNT64_USER" \
    "$user_home" \
    "$BL64_VAR_DEFAULT" \
    "$user_shell" &&
    bl64_rbac_add_root "${CNT64_USER}"

  if [[ -z "$CNT64_ANSIBLE_USER" ]]; then
    bl64_dbg_app_show_info "dedicated user not requested. Current one will be used ($(id))"
    return 0
  fi

  for user_current in $CNT64_ANSIBLE_VERSIONS; do
    user_home="${CNT64_ANSIBLE_HOME}-${user_current}"
    user_new="${CNT64_ANSIBLE_USER}-${user_current}"
    bl64_msg_show_task "Create ansible installation owner user (${user_new})"
    bl64_iam_user_add "$user_new" "$user_home" &&
      bl64_rbac_add_root "$user_new" ||
      return $?
  done
}

function cnt64_setup_select_packages() {
  bl64_dbg_app_show_function
  local packages=''

  bl64_dbg_app_show_comments 'prepare packages for systemd, python3 and ansible deps'
  if bl64_os_match "${BL64_OS_RHEL}-8" "${BL64_OS_RCK}-8" "${BL64_OS_OL}-8" "${BL64_OS_ALM}-8"; then
    packages="${packages} kbd-legacy kbd-misc xkeyboard-config diffutils kbd libxkbcommon"
    packages="${packages} systemd systemd-libs systemd-pam systemd-udev"
    packages="${packages} python3-pip python3-setuptools"
    packages="${packages} python3"
  elif bl64_os_match "${BL64_OS_CNT}-8"; then
    packages="${packages} xkeyboard-config diffutils kbd"
    packages="${packages} systemd systemd-libs systemd-pam systemd-udev"
    packages="${packages} python3-pip python3-setuptools"
    packages="${packages} python3"
  elif bl64_os_match "${BL64_OS_DEB}-10"; then
    packages="${packages} dbus dmsetup"
    packages="${packages} systemd systemd-sysv"
    packages="${packages} bzip2 file mime-support readline-common xz-utils"
    packages="${packages} python3 python3-minimal python3.7 python3.7-minimal python3-pip"
  elif bl64_os_match "${BL64_OS_DEB}-11"; then
    packages="${packages} dbus dmsetup"
    packages="${packages} systemd systemd-timesyncd"
    packages="${packages} media-types readline-common"
    packages="${packages} python3 python3-minimal python3.9 python3.9-minimal python3-pip"
  elif bl64_os_match "${BL64_OS_FD}-33" "${BL64_OS_FD}-35" "${BL64_OS_FD}-36"; then
    packages="${packages} acl dbus device-mapper hwdata pciutils rdma-core xkeyboard-config diffutils kbd-legacy kbd-misc  diffutils kbd libxkbcommon python3-pip"
    packages="${packages} systemd systemd-pam systemd-rpm-macros systemd-networkd"
  elif bl64_os_match "${BL64_OS_OL}-9"; then
    packages="${packages} xkeyboard-config diffutils kbd"
    packages="${packages} systemd systemd-libs systemd-pam systemd-udev"
    packages="${packages} python3-pip python3-setuptools"
    packages="${packages} python3"
  elif bl64_os_match "${BL64_OS_UB}-20.4"; then
    packages="${packages} dbus dmsetup gir1.2-glib-2.0 networkd-dispatcher shared-mime-info tzdata xdg-user-dirs locales"
    packages="${packages} systemd systemd-timesyncd"
    packages="${packages} file mime-support readline-common xz-utils"
    packages="${packages} python3 python3-dbus python3-gi python3-minimal python3.8 python3.8-minimal python3-pip"
  elif bl64_os_match "${BL64_OS_UB}-21.4"; then
    packages="${packages} dbus dmsetup gir1.2-glib-2.0 networkd-dispatcher shared-mime-info xdg-user-dirs locales"
    packages="${packages} systemd systemd-timesyncd"
    packages="${packages} media-types readline-common tzdata"
    packages="${packages} python3 python3-minimal python3-dbus python3-gi python3-pip"
  elif bl64_os_match "${BL64_OS_UB}-22.4"; then
    packages="${packages} dbus dmsetup gir1.2-glib-2.0 networkd-dispatcher shared-mime-info xdg-user-dirs locales"
    packages="${packages} systemd systemd-timesyncd"
    packages="${packages} media-types readline-common tzdata"
    packages="${packages} python3 python3-minimal python3.9 python3-dbus python3-gi python3-pip"
  fi
  [[ -n "$packages" ]] && echo "$packages"
}

function cnt64_setup_install_packages() {
  bl64_dbg_app_show_function
  local packages=''

  bl64_msg_show_task 'deploy packages'
  packages="$(cnt64_setup_select_packages)" ||
    return $?
  # shellcheck disable=SC2086
  bl64_pkg_deploy $packages
}

function cnt64_setup_install_applications() {
  bl64_dbg_app_show_function
  export INST64_ANSIBLE_PIPX='OFF'
  sudo -E -H -u "$CNT64_USER" "${CNT64_INSTALLER_ROOT}/install-ansible"
}

#######################################
# Initialize environment
#
# Arguments:
#   None
# Outputs:
#   Initializacion progress messages
# Returns:
#   0: initialization ok
#   >: failed to initialize
#######################################
function cnt64_setup_initialize() {
  bl64_dbg_app_show_function

  if [[ -n "$CNT64_ANSIBLE_USER" ]]; then
    bl64_check_export 'CNT64_ANSIBLE_HOME' &&
      bl64_check_export 'CNT64_ANSIBLE_VERSIONS' ||
      return $?
  fi

  bl64_os_check_version \
    "${BL64_OS_ALM}-8" \
    "${BL64_OS_CNT}-8" \
    "${BL64_OS_DEB}-10" "${BL64_OS_DEB}-11" \
    "${BL64_OS_FD}-33" "${BL64_OS_FD}-35" "${BL64_OS_FD}-36" \
    "${BL64_OS_OL}-8" "${BL64_OS_OL}-9" \
    "${BL64_OS_RHEL}-8" \
    "${BL64_OS_RCK}-8" \
    "${BL64_OS_UB}-20.4" "${BL64_OS_UB}-21.4" "${BL64_OS_UB}-22.4" &&
    bl64_check_export 'CNT64_USER' &&
    bl64_check_export 'CNT64_INSTALLER_ROOT' &&
    bl64_check_privilege_root &&
    bl64_pkg_setup
}

#
# Main
#

declare cnt64_setup_installer_description='Setup Container64 image'

bl64_msg_all_enable_verbose
bl64_msg_show_batch_start "$cnt64_setup_installer_description"

[[ -n "$CNT64_DEBUG" ]] && bl64_dbg_lib_enable
cnt64_setup_initialize &&
  cnt64_setup_install_packages &&
  cnt64_setup_configure_os &&
  cnt64_setup_create_users &&
  cnt64_setup_configure_users &&
  cnt64_setup_install_applications
bl64_msg_show_batch_finish $? "$cnt64_setup_installer_description"
