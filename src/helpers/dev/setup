#!/usr/bin/env bash
# Template: 1.1.0
#######################################
# Container64 / Setup container image
#
# Author: SerDigital64 (https://github.com/serdigital64)
# Repository: https://github.com/automation64/container64
# Version: 2.2.0
#
#######################################
# Copyright [2023] [serdigital64@gmail.com]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

# Environment Definition. See docs/base-environment.md for details
export CNT64_BASHLIB64="${CNT64_BASHLIB64:-/opt/bl64/bashlib64.bash}"
export CNT64_DEBUG="${CNT64_DEBUG:-}"
export CNT64_USER

# shellcheck source=SCRIPTDIR/../../../lib/bashlib64.bash
source "$CNT64_BASHLIB64" || { echo "Error: unable to load bashlib64 (${CNT64_BASHLIB64})" && exit 1; }

#
# Globals
#

#
# Functions
#

function cnt64_setup_configure_os() {
  bl64_dbg_app_show_function
  if bl64_os_match "${BL64_OS_UB}"; then
    # Base image doesn't have locales, need to generate at least for en
    bl64_msg_show_task 'Generate en_US.UTF-8 locale'
    localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8
  fi
}

function cnt64_setup_select_packages() {
  bl64_dbg_app_show_function
  local packages=''
  if bl64_os_match "${BL64_OS_UB}"; then
    # OS dependant tools
    packages="${packages} apt-utils apt-transport-https lsb-release tzdata xdg-user-dirs locales"
    # File management tools
    packages="${packages} tar unzip bzip2 xz-utils mc file lsof"
    # Networking tools
    packages="${packages} tcpdump dnsutils net-tools telnet nmap openssh-client iptraf-ng"
    # File transfer tools
    packages="${packages} ftp wget rsync"
    # Performance tools
    packages="${packages} hostname sysstat strace ltrace procps psmisc htop"
    # Shells
    packages="${packages} zsh csh"
    # Code management tools
    packages="${packages} git diffutils"
    # Text utils
    packages="${packages} vim nano less jq gettext gawk readline-common"
    # Certificate tools
    packages="${packages} dirmngr gnupg2 ca-certificates openssl"
  fi
  [[ -n "$packages" ]] && echo "$packages"
}

function cnt64_setup_create_users() {
  bl64_dbg_app_show_function
  local user_mode='0755'
  local user_shell='/bin/bash'
  local user_home="/home/${CNT64_USER}"
  local xdg_config="${user_home}/.config"
  local xdg_cache="${user_home}/.cache"
  local xdg_local="${user_home}/.local"

  bl64_msg_show_task "Create entrypoint user (${CNT64_USER})"
  bl64_iam_user_add \
    "$CNT64_USER" \
    "$user_home" \
    "$BL64_VAR_DEFAULT" \
    "$user_shell" &&
    bl64_rbac_add_root "${CNT64_USER}" ||
    return $?

  bl64_msg_show_task "Initialize user's XDG directories (${CNT64_USER})"
  bl64_fs_create_dir "$user_mode" "$CNT64_USER" "$CNT64_USER" \
    "$xdg_config" \
    "$xdg_local" \
    "$xdg_cache" \
    "${xdg_local}/bin" \
    "${xdg_local}/lib" \
    "${xdg_local}/share" \
    "${xdg_local}/state" ||
    return $?
}

function cnt64_setup_install_packages() {
  bl64_dbg_app_show_function
  local packages=''
  bl64_msg_show_task 'deploy packages'
  packages="$(cnt64_setup_select_packages)" ||
    return $?
  # shellcheck disable=SC2086
  bl64_pkg_deploy $packages
}

#######################################
# Install application packages
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Package installer progress and errors
# Returns:
#   0: package installed ok
#   >0: unable to install package
#######################################
function cnt64_setup_install() {
  bl64_dbg_app_show_function

  cnt64_setup_create_users &&
    cnt64_setup_install_packages &&
    cnt64_setup_configure_os
}

#######################################
# Initialize environment
#
# Arguments:
#   None
# Outputs:
#   Initializacion progress messages
# Returns:
#   0: initialization ok
#   >: failed to initialize
#######################################
function cnt64_setup_initialize() {
  bl64_dbg_app_show_function

  bl64_os_check_version \
    "${BL64_OS_UB}-22" &&
    bl64_check_export 'CNT64_USER' &&
    bl64_check_privilege_root &&
    bl64_pkg_setup
}

#
# Main
#

declare cnt64_setup_installer_description='Setup Container64 image'

bl64_msg_all_enable_verbose
bl64_msg_show_batch_start "$cnt64_setup_installer_description"

[[ -n "$CNT64_DEBUG" ]] && bl64_dbg_all_enable
cnt64_setup_initialize &&
  cnt64_setup_install

bl64_msg_show_batch_finish $? "$cnt64_setup_installer_description"
