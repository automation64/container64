#!/usr/bin/env bash
# Template: 1.5.0
#######################################
# Container64 / Setup container image
#
# Author: SerDigital64 (https://github.com/serdigital64)
# Repository: https://github.com/automation64/container64
# Version: 1.0.0
#
#######################################
# Copyright [2023] [serdigital64@gmail.com]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

# Environment Definition. See docs/base-environment.md for details
export CNT64_BASHLIB64="${CNT64_BASHLIB64:-/opt/bl64}"
export CNT64_DEBUG="${CNT64_DEBUG:-}"
export CNT64_USER="${CNT64_USER:-}"

# source-path=lib/bl64
source "${CNT64_BASHLIB64}/bashlib64-module-cryp.bash" &&
  source "${CNT64_BASHLIB64}/bashlib64-module-api.bash" &&
  source "${CNT64_BASHLIB64}/bashlib64-module-vcs.bash" &&
  source "${CNT64_BASHLIB64}/bashlib64-module-xsv.bash" &&
  source "${CNT64_BASHLIB64}/bashlib64-module-bsh.bash" &&
  source "${CNT64_BASHLIB64}/bashlib64-module-vcs.bash" &&
  source "${CNT64_BASHLIB64}/bashlib64-module-rxtx.bash" &&
  source "${CNT64_BASHLIB64}/bashlib64-module-txt.bash" &&
  source "${CNT64_BASHLIB64}/bashlib64-module-fmt.bash" &&
  source "${CNT64_BASHLIB64}/bashlib64-module-fs.bash" &&
  source "${CNT64_BASHLIB64}/bashlib64-module-pkg.bash" &&
  source "${CNT64_BASHLIB64}/bashlib64-core.bash" || { echo "Error: unable to load bashlib64 (${CNT64_BASHLIB64})" && exit 1; }

#
# Globals
#

#
# Functions
#

function cnt64_setup_select_packages() {
  bl64_dbg_app_show_function
  local packages=''
  if bl64_os_match "${BL64_OS_KL}"; then
    packages="${packages} kali-linux-headless"
  fi
  [[ -z "$packages" ]] && bl64_msg_show_error 'unable to determine package name' && return 1
  echo "$packages"
}

function cnt64_setup_install_packages() {
  bl64_dbg_app_show_function
  local packages=''
  bl64_msg_show_task 'deploy packages'
  packages="$(cnt64_setup_select_packages)" ||
    return $?
  # shellcheck disable=SC2086
  bl64_pkg_deploy $packages
}

#######################################
# Initialize environment
#
# Arguments:
#   None
# Outputs:
#   Initializacion progress messages
# Returns:
#   0: initialization ok
#   >: failed to initialize
#######################################
function cnt64_setup_initialize() {
  bl64_dbg_app_show_function
  bl64_os_check_version \
    "${BL64_OS_KL}" \
    bl64_check_privilege_root &&
    bl64_pkg_setup
}

#
# Main
#

declare cnt64_setup_installer_description='Setup Container64 image'

bl64_msg_all_enable_verbose
bl64_msg_show_batch_start "$cnt64_setup_installer_description"

[[ -n "$CNT64_DEBUG" ]] && bl64_dbg_all_enable
cnt64_setup_initialize &&
  cnt64_setup_install_packages

bl64_msg_show_batch_finish $? "$cnt64_setup_installer_description"
