#!/usr/bin/env bash
# Template: 1.5.0
#######################################
# Container64 / Setup container image
#
# Author: SerDigital64 (https://github.com/serdigital64)
# Repository: https://github.com/automation64/container64
# Version: 2.6.0
#
#######################################
# Copyright [2023] [serdigital64@gmail.com]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

# Environment Definition. See docs/base-environment.md for details
export CNT64_BASHLIB64="${CNT64_BASHLIB64:-/opt/bl64}"
export CNT64_DEBUG="${CNT64_DEBUG:-}"
export CNT64_USER="${CNT64_USER:-}"
export CNT64_LOCAL_ROOT="${CNT64_LOCAL_ROOT:-}"
export CNT64_LOCAL_BIN="${CNT64_LOCAL_BIN:-}"
export CNT64_INSTALLER_ROOT="${CNT64_INSTALLER_ROOT:-}"
export CNT64_OPT_ROOT="${CNT64_OPT_ROOT:-}"

# shellcheck source-path=lib/bl64 disable=SC2015
source "${CNT64_BASHLIB64}/bashlib64-module-vcs.bash" &&
  source "${CNT64_BASHLIB64}/bashlib64-module-rxtx.bash" &&
  source "${CNT64_BASHLIB64}/bashlib64-module-api.bash" &&
  source "${CNT64_BASHLIB64}/bashlib64-module-rnd.bash" &&
  source "${CNT64_BASHLIB64}/bashlib64-module-cryp.bash" &&
  source "${CNT64_BASHLIB64}/bashlib64-module-pkg.bash" &&
  source "${CNT64_BASHLIB64}/bashlib64-module-rbac.bash" &&
  source "${CNT64_BASHLIB64}/bashlib64-module-iam.bash" &&
  source "${CNT64_BASHLIB64}/bashlib64-module-txt.bash" &&
  source "${CNT64_BASHLIB64}/bashlib64-module-fmt.bash" &&
  source "${CNT64_BASHLIB64}/bashlib64-module-fs.bash" &&
  source "${CNT64_BASHLIB64}/bashlib64-core.bash" || { echo "Error: unable to load bashlib64 (${CNT64_BASHLIB64})" && exit 1; }

#
# Globals
#

#
# Functions
#

function cnt64_bootstrap_create_users() {
  bl64_dbg_app_show_function
  local user_home="/home/${CNT64_USER}"
  local user_shell='/bin/bash'

  bl64_dbg_app_show_comments 'no user creation requested'
  [[ -z "$CNT64_USER" ]] && return 0

  bl64_msg_show_task "Create entrypoint user (${CNT64_USER})"
  bl64_iam_user_add \
    "$CNT64_USER" \
    "$user_home" \
    "$BL64_VAR_DEFAULT" \
    "$user_shell" &&
    bl64_rbac_add_root "${CNT64_USER}"
}

function cnt64_bootstrap_configure_users() {
  bl64_dbg_app_show_function
  local user_mode='0750'
  local user_home="/home/${CNT64_USER}"
  local xdg_config="${user_home}/.config"
  local xdg_cache="${user_home}/.cache"
  local xdg_local="${user_home}/.local"
  local user_profile=''
  local user_bashrc_d="${user_home}/.bashrc.d"

  bl64_msg_show_task "Initialize user's XDG directories (${CNT64_USER})"
  bl64_fs_create_dir "$user_mode" "$CNT64_USER" "$CNT64_USER" \
    "$xdg_config" \
    "$xdg_local" \
    "$xdg_cache" \
    "${xdg_local}/bin" \
    "${xdg_local}/lib" \
    "${xdg_local}/share" \
    "${xdg_local}/state" ||
    return $?

  bl64_msg_show_task "Create modular bashr store (${user_bashrc_d})"
  bl64_fs_create_dir "$user_mode" "$CNT64_USER" "$CNT64_USER" \
    "$user_bashrc_d"

  bl64_msg_show_task "Setup user's bash environment (${CNT64_USER})"
  if bl64_os_match "${BL64_OS_ALP}"; then
    user_profile="${user_home}/.bash_profile"
    # shellcheck disable=SC2016
    printf \
      '#!/usr/bin/env bash
# added-by-installer64 #
declare module=""
export PATH="$HOME/.local/bin:$HOME/bin:$PATH"
if [[ -d "${HOME}/.bashrc.d" ]]; then
  for module in ${HOME}/.bashrc.d/*; do
    [[ -r "$module" ]] && source "$module"
  done
fi\n' >"$user_profile" &&
      bl64_fs_set_permissions "$user_mode" "$CNT64_USER" "$CNT64_USER" "$user_profile"
  elif bl64_os_match "${BL64_OS_UB}"; then
    user_profile="${user_home}/.bashrc"
    # shellcheck disable=SC2016
    printf \
      '\n# added-by-installer64 #
declare module=""
if [[ -d "${HOME}/.bashrc.d" ]]; then
  for module in ${HOME}/.bashrc.d/*; do
    [[ -r "$module" ]] && source "$module"
  done
fi\n' >>"$user_profile"
  fi
}

function cnt64_bootstrap_fix_repository_fedora() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'Ignore unavailable repositories (EOL)'
  bl64_txt_run_sed \
    -i 's/^skip_if_unavailable=False/skip_if_unavailable=True/g' \
    /etc/yum.repos.d/fedora*.repo
}

function cnt64_bootstrap_fix_repository_centos() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'Fix EOL centos repository location to use vault'
  bl64_txt_run_sed \
    -i 's/mirrorlist/#mirrorlist/g' \
    /etc/yum.repos.d/CentOS-* &&
    bl64_txt_run_sed \
      -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' \
      /etc/yum.repos.d/CentOS-*
}

function cnt64_bootstrap_fix_repository_ubuntu() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'Fix EOL ubuntu repository location to use old-release'
  bl64_txt_run_sed \
    -i -re 's/([a-z]{2}\.)?archive.ubuntu.com|security.ubuntu.com/old-releases.ubuntu.com/g' \
    /etc/apt/sources.list
}

function cnt64_bootstrap_fix_repository_debian() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'Fix EOL debian repository location to use archive'
  local sources='/etc/apt/sources.list'
  printf 'deb http://archive.debian.org/debian/ stretch main contrib non-free\n' >"$sources" &&
    printf 'deb http://archive.debian.org/debian/ stretch-backports main contrib non-free\n' >>"$sources" &&
    printf 'deb http://archive.debian.org/debian-security stretch/updates main contrib non-free\n' >>"$sources"
}

function cnt64_bootstrap_prepare_os() {
  bl64_dbg_app_show_function
  if bl64_os_match "${BL64_OS_CNT}-8"; then
    cnt64_bootstrap_fix_repository_centos
  elif bl64_os_match "${BL64_OS_UB}-21.4" "${BL64_OS_UB}-22.10"; then
    cnt64_bootstrap_fix_repository_ubuntu
  elif bl64_os_match "${BL64_OS_DEB}-9"; then
    cnt64_bootstrap_fix_repository_debian
  elif bl64_os_match "${BL64_OS_FD}-36"; then
    cnt64_bootstrap_fix_repository_fedora
  fi
}

function cnt64_bootstrap_install_packages() {
  bl64_dbg_app_show_function
  local packages='sudo'
  bl64_msg_show_task 'Install sudo'
  if bl64_os_match "${BL64_OS_SLES}"; then
    packages+=' gawk'
  elif bl64_os_match "${BL64_OS_ALP}"; then
    packages+=' curl'
  fi
  # shellcheck disable=SC2086
  bl64_pkg_deploy $packages
}

function cnt64_bootstrap_configure_os() {
  bl64_dbg_app_show_function
  local public_mode='0755'
  local public_owner='root'

  bl64_msg_show_task 'Create shared paths'
  bl64_fs_create_dir "$public_mode" "$public_owner" "$public_owner" \
    "$CNT64_LOCAL_ROOT" \
    "$CNT64_LOCAL_BIN" \
    "$CNT64_OPT_ROOT"
}

#######################################
# Install application packages
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Package installer progress and errors
# Returns:
#   0: package installed ok
#   >0: unable to install package
#######################################
function cnt64_bootstrap_install() {
  bl64_dbg_app_show_function
  cnt64_bootstrap_install_packages ||
    return $?
  bl64_msg_show_task 'cleanup temporary files'
  return 0
}

#######################################
# Initialize environment
#
# Arguments:
#   None
# Outputs:
#   Initializacion progress messages
# Returns:
#   0: initialization ok
#   >: failed to initialize
#######################################
function cnt64_bootstrap_initialize() {
  bl64_dbg_app_show_function
  bl64_os_check_compatibility \
    "${BL64_OS_ALM}" \
    "${BL64_OS_ALP}" \
    "${BL64_OS_CNT}" \
    "${BL64_OS_DEB}" \
    "${BL64_OS_FD}" \
    "${BL64_OS_OL}" \
    "${BL64_OS_RCK}" \
    "${BL64_OS_RHEL}" \
    "${BL64_OS_SLES}" \
    "${BL64_OS_UB}" &&
    bl64_check_export 'CNT64_INSTALLER_ROOT' &&
    bl64_check_export 'CNT64_LOCAL_ROOT' &&
    bl64_check_export 'CNT64_LOCAL_BIN' &&
    bl64_check_export 'CNT64_OPT_ROOT' &&
    bl64_cryp_setup &&
    bl64_pkg_setup &&
    bl64_check_privilege_root
}

#
# Main
#

declare cnt64_bootstrap_task_title='Bootstrap Container64 environment'

bl64_msg_all_enable_verbose
bl64_msg_show_batch_start "$cnt64_bootstrap_task_title"

[[ -n "$CNT64_DEBUG" ]] && bl64_dbg_all_enable
cnt64_bootstrap_initialize &&
  cnt64_bootstrap_prepare_os &&
  cnt64_bootstrap_install &&
  cnt64_bootstrap_configure_os &&
  cnt64_bootstrap_create_users &&
  cnt64_bootstrap_configure_users

bl64_msg_show_batch_finish $? "$cnt64_bootstrap_task_title"
