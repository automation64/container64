#!/bin/bash
#######################################
# Build containers in dev environment
#
# Author: X_AUTHOR_ALIAS_X (X_AUTHOR_GIT_URL_X)
# License: GPL-3.0-or-later (https://www.gnu.org/licenses/gpl-3.0.txt)
# Repository: X_PROJECT_GIT_URL_X
# Version: X_APP_VERSION_X
#######################################

source './.env' || exit 1
source "${DEVCNT64_BIN}/bashlib64.bash" || exit 1

readonly DEVCNT64_BUILD_CMD_PODMAN='/usr/bin/podman'
readonly DEVCNT64_BUILD_REGISTRY='ghcr.io/serdigital64'

function devcnt64_build_podman_build() {

  local container="$1"
  local version="${2:-0.1.0}"
  local status=1
  local dockerfile="${DEVCNT64_SRC}/dockerfiles/${container}/Dockerfile"

  bl64_check_file "$dockerfile" || return 1

  cd "${DEVCNT64_SRC}/dockerfiles/${container}"
  "$DEVCNT64_BUILD_CMD_PODMAN" \
    build \
    --no-cache \
    -t "${container}:${version}" \
    .
  status=$?

  return $status

}

function devcnt64_build_image_publish(){

  local container="$1"
  local version="${2:-0.1.0}"
  local status=1
  local dockerfile="${DEVCNT64_SRC}/dockerfiles/${container}/Dockerfile"

  bl64_check_file "$dockerfile" || return 1

  "$DEVCNT64_BUILD_CMD_PODMAN" \
    push \
    "${container}" \
    "${DEVCNT64_BUILD_REGISTRY}/${container}:${version}"
  status=$?

  return $status

}

function devcnt64_build_check() {

  bl64_check_command "$DEVCNT64_BUILD_CMD_PODMAN"

}

function devcnt64_build_help() {

  bl64_msg_show_usage \
    '-p|-u -c Container -e Version' \
    'Build containers in dev environment' \
    '
-p          : Build container with podman
-u          : Publish container to public registry
    ' '' '
-c Container: container name
-e Version  : container version
    '

}

#
# Main
#

declare devcnt64_run_tests_status=1
declare devcnt64_build_command=''
declare devcnt64_run_tests_command_tag=''
declare devcnt64_build_option=''
declare devcnt64_build_container=''
declare devcnt64_build_version=''

(($# == 0)) && devcnt64_build_help && exit 1
while getopts ':upc:e:h' devcnt64_build_option; do
  case "$devcnt64_build_option" in
  p)
    devcnt64_build_command='devcnt64_build_podman_build'
    devcnt64_run_tests_command_tag='build container with podman'
    ;;
  u)
    devcnt64_build_command='devcnt64_build_image_publish'
    devcnt64_run_tests_command_tag=''
    ;;
  c) devcnt64_build_container="$OPTARG" ;;
  e) devcnt64_build_version="$OPTARG" ;;
  h) devcnt64_build_help && exit ;;
  \?) devcnt64_build_help && exit 1 ;;
  esac
done
[[ -z "$devcnt64_build_command" ]] && devcnt64_build_help && exit 1
devcnt64_build_check || exit 1

bl64_msg_show_info "starting ${devcnt64_run_tests_command_tag} process"
case "$devcnt64_build_command" in
'devcnt64_build_podman_build' | 'devcnt64_build_image_publish') "$devcnt64_build_command" "$devcnt64_build_container" "$devcnt64_build_version" ;;
esac
devcnt64_run_tests_status=$?

if ((devcnt64_run_tests_status == 0)); then
  bl64_msg_show_info "${devcnt64_run_tests_command_tag} process complete"
else
  bl64_msg_show_info "${devcnt64_run_tests_command_tag} process complete with errors (error: $devcnt64_run_tests_status)"
fi

exit $devcnt64_run_tests_status
