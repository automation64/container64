#!/usr/bin/env bash
#######################################
# Dev / Build / Container / Build and publish image catalog
#
# * Version: 2.0.0
#
#######################################
# Copyright [2023] [serdigital64@gmail.com]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

# shellcheck source=bin/dev-set
source ./bin/dev-set || { echo 'dev-set:Error: unable to load dev environment' 2>&1 && exit 1; }
# shellcheck source-path=bin
source ./bin/dev-env-container &&
  source ./bin/dev-env-cosign || exit 1
# shellcheck source=lib/bl64/bashlib64-core.bash
source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-core.bash" || exit 1

#
# Globals
#

# Lib / CNTBuild / Command
declare DEV_LIB_CNTBUILD_BIN="${DEV_PATH_ROOT}/${DEV_BUILD_BASH_NAME}"
# Build / CNTBuild / Image list name suffix
declare DEV_BUILD_CNTBUILD_LIST_PREFIX='DEV_BUILD_CNTBUILD_CATALOG_'
# Build / CNTBuild / Parameters
export CNTBUILD_REGISTRY="$DEV_AUTH_CONTAINER_REGISTRY"
export CNTBUILD_COSIGN_BIN="$DEV_LIB_COSIGN_BIN"

#
# Functions
#

function dev_build_image() {
  local image_list_suffix="$1"
  local publish="$2"
  local delete_first="$3"
  local container_name=''
  local image_list="DEV_BUILD_CNTBUILD_LIST_PREFIX${image_list_suffix}"
  local -i pause=5

  bl64_msg_show_phase "processing container list (${image_list})"
  # shellcheck disable=SC2086
  for container_name in ${!image_list}; do
    "$DEV_LIB_CNTBUILD_BIN" -b -c "$container_name" &&
      sleep $pause ||
      return $?
    if bl64_lib_flag_is_enabled "$publish"; then
      if bl64_lib_flag_is_enabled "$delete_first"; then
        "$DEV_LIB_CNTBUILD_BIN" -x -c "$container_name"
      fi
      "$DEV_LIB_CNTBUILD_BIN" -u -s -c "$container_name" &&
        sleep $pause ||
        return $?
    fi
  done
}

function dev_build_initialize() {
  bl64_dbg_app_show_function "$@"
  local build_target="$*"
  bl64_check_parameter 'build_target' ||
  return $?
  if [[ ! -v "${DEV_BUILD_CNTBUILD_LIST_PREFIX}${build_target}" ]]; then
    bl64_msg_show_error "invalid build target (${build_target})"
    return 1
  fi
}

#
# Main
#

declare dev_build_target="${1:-}"
declare dev_build_publish="${2:-${BL64_VAR_OFF}}"
declare dev_build_delete_first="${3:-${BL64_VAR_OFF}}"

[[ -n "$DEV_CICD_DEBUG" ]] && bl64_dbg_all_enable

bl64_msg_all_enable_verbose
bl64_msg_show_batch_start 'dev-build-container'
dev_build_initialize "$dev_build_target" &&
  dev_build_image "$dev_build_target" "$dev_build_publish" "$dev_build_delete_first"
bl64_msg_show_batch_finish $? 'dev-build-container'
