#!/usr/bin/env bash
#######################################
# Dev / Build / Container / Build and publish image catalog
#
# * Template: 3.0.1
#
#######################################
# Copyright [2023] [serdigital64@gmail.com]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

# shellcheck source=bin/dev-set
source ./bin/dev-set || { echo 'dev-set:Error: unable to load dev environment' 2>&1 && exit 1; }
# shellcheck source-path=bin
source ./bin/dev-env-container &&
  source ./bin/dev-env-cosign || exit 1
# shellcheck source=lib/bl64/bashlib64-core.bash
source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-core.bash" || exit 1

#
# Globals
#

# Lib / CNTBuild / Command
export DEV_LIB_CNTBUILD_BIN="${DEV_PATH_ROOT}/${DEV_BUILD_BASH_NAME}"
# Build / CNTBuild / Parameters
export CNTBUILD_REGISTRY="$DEV_AUTH_CONTAINER_REGISTRY"
export CNTBUILD_COSIGN_BIN="$DEV_LIB_COSIGN_BIN"

#
# Functions
#

function dev_build_publish() {
  local publish="$1"
  local delete_first="$2"
  local image_list="$3"
  local message="$4"
  local container_name=''
  local -i break=10

  bl64_msg_show_phase "$message"
  # shellcheck disable=SC2086
  for container_name in $image_list; do
    "$DEV_LIB_CNTBUILD_BIN" -b -c "$container_name" &&
      sleep $break ||
      return $?
    if bl64_lib_flag_is_enabled "$publish"; then
      if bl64_lib_flag_is_enabled "$delete_first"; then
        "$DEV_LIB_CNTBUILD_BIN" -x -c "$container_name"
      fi
      "$DEV_LIB_CNTBUILD_BIN" -u -s -c "$container_name" &&
        sleep $break ||
        return $?
    fi
  done
}

function dev_build_image() {
  local dev_build_target="$1"
  local dev_build_publish="$2"
  local dev_build_delete_first="$3"
  case "$dev_build_target" in
  'base')
    dev_build_publish "$dev_build_publish" "$dev_build_delete_first" "$DEV_BUILD_CNTBUILD_CATALOG_BASE" 'base containers'
    ;;
  'toolbox_a')
    dev_build_publish "$dev_build_publish" "$dev_build_delete_first" "$DEV_BUILD_CNTBUILD_CATALOG_TOOLBOX_L0" 'toolbox containers - level 0'
    ;;
  'toolbox_b')
    dev_build_publish "$dev_build_publish" "$dev_build_delete_first" "$DEV_BUILD_CNTBUILD_CATALOG_TOOLBOX_L1" 'toolbox containers - level 1' &&
      dev_build_publish "$dev_build_publish" "$dev_build_delete_first" "$DEV_BUILD_CNTBUILD_CATALOG_TOOLBOX_L2" 'toolbox containers - level 2' &&
      dev_build_publish "$dev_build_publish" "$dev_build_delete_first" "$DEV_BUILD_CNTBUILD_CATALOG_TOOLBOX_L3" 'toolbox containers - level 3'
    ;;
  'bash_test_a_redhat')
    dev_build_publish "$dev_build_publish" "$dev_build_delete_first" "$DEV_BUILD_CNTBUILD_CATALOG_BASH_TEST_L0_REDHAT" 'bash-test containers - level 0 - redhat'
    ;;
  'bash_test_a_ubuntu')
    dev_build_publish "$dev_build_publish" "$dev_build_delete_first" "$DEV_BUILD_CNTBUILD_CATALOG_BASH_TEST_L0_UBUNTU" 'bash-test containers - level 0 - ubuntu'
    ;;
  'bash_test_a_other')
    dev_build_publish "$dev_build_publish" "$dev_build_delete_first" "$DEV_BUILD_CNTBUILD_CATALOG_BASH_TEST_L0_OTHER" 'bash-test containers - level 0 - other'
    ;;
  'bash_test_b')
    dev_build_publish "$dev_build_publish" "$dev_build_delete_first" "$DEV_BUILD_CNTBUILD_CATALOG_BASH_TEST_L1" 'bash-test containers - level 1' &&
      dev_build_publish "$dev_build_publish" "$dev_build_delete_first" "$DEV_BUILD_CNTBUILD_CATALOG_BASH_TEST_L2" 'bash-test containers - level 2' &&
      dev_build_publish "$dev_build_publish" "$dev_build_delete_first" "$DEV_BUILD_CNTBUILD_CATALOG_BASH_TEST_L3" 'bash-test containers - level 3'
    ;;
  'ansible_test')
    dev_build_publish "$dev_build_publish" "$dev_build_delete_first" "$DEV_BUILD_CNTBUILD_CATALOG_ANSIBLE_L1" 'ansible-test containers - level 1'
    ;;
  'shell_lint')
    dev_build_publish "$dev_build_publish" "$dev_build_delete_first" "$DEV_BUILD_CNTBUILD_CATALOG_SHELL_LINT_L1" 'shell-lint - level 1'
    ;;
  'terraform_test')
    dev_build_publish "$dev_build_publish" "$dev_build_delete_first" "$DEV_BUILD_CNTBUILD_CATALOG_TERRAFORM_TEST_L3" 'terraform-test containers - level 3'
    ;;
  'dev')
    dev_build_publish "$dev_build_publish" "$dev_build_delete_first" "$DEV_BUILD_CNTBUILD_CATALOG_DEV_L0" 'dev - level 0' &&
      dev_build_publish "$dev_build_publish" "$dev_build_delete_first" "$DEV_BUILD_CNTBUILD_CATALOG_DEV_L1" 'dev - level 1' &&
      dev_build_publish "$dev_build_publish" "$dev_build_delete_first" "$DEV_BUILD_CNTBUILD_CATALOG_DEV_L2" 'dev - level 2'
    ;;
  'run')
    # disabled # dev_build_publish "$dev_build_publish" "$dev_build_delete_first" "$DEV_BUILD_CNTBUILD_CATALOG_RUN_L0" 'run - level 0'
    :
    ;;
  'ssg_lint')
    dev_build_publish "$dev_build_publish" "$dev_build_delete_first" "$DEV_BUILD_CNTBUILD_CATALOG_SSG_LINT_L0" 'ssg-lint - level 0'
    ;;
  'terraform_lint')
    dev_build_publish "$dev_build_publish" "$dev_build_delete_first" "$DEV_BUILD_CNTBUILD_CATALOG_TERRAFORM_LINT_L0" 'terraform-lint - level 0'
    ;;
  'container_lint')
    dev_build_publish "$dev_build_publish" "$dev_build_delete_first" "$DEV_BUILD_CNTBUILD_CATALOG_CONTAINER_LINT_L0" 'container-lint - level 0'
    ;;
  'k8s_lint')
    dev_build_publish "$dev_build_publish" "$dev_build_delete_first" "$DEV_BUILD_CNTBUILD_CATALOG_K8S_LINT_L0" 'k8s-lint - level 0'
    ;;
  *) bl64_check_alert_parameter_invalid 'build_target' ;;
  esac
}

#
# Main
#

declare dev_build_target="${1:-all}"
declare dev_build_publish="${2:-${BL64_VAR_OFF}}"
declare dev_build_delete_first="${3:-${BL64_VAR_OFF}}"

[[ -n "$DEV_CICD_DEBUG" ]] && bl64_dbg_all_enable

bl64_msg_all_enable_verbose
bl64_msg_show_batch_start 'dev-build-container'
dev_build_image "$dev_build_target" "$dev_build_publish" "$dev_build_delete_first"
bl64_msg_show_batch_finish $? 'dev-build-container'
