#!/usr/bin/env bash
# Template: 1.1.0
#######################################
# Bootstrap
#
# * Boostrap repository creation:
#   * create basic directory structure
#   * download Installer64 and Bashlib64 tools
#   * download dev-bin tools
#
# Author: SerDigital64 (https://github.com/serdigital64)
# Repository: https://github.com/automation64/installer64
# Version: 1.0.0
#
#######################################
# Copyright [2023] [serdigital64@gmail.com]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Globals
#

# Enable debugging? Set to YES to enable
export DEV_CICD_DEBUG="${DEV_CICD_DEBUG:-}"
export DEV_FILES_MODE='0644'
export DEV_LIB_BASHLIB64_TARGET='bl64'
export DEV_LIB_INSTALLER64_OWNER='automation64/installer64'
export DEV_LIB_INSTALLER64_TARGET='inst64'
export DEV_PATH_ROOT="$(pwd)"
export DEV_PATHS_MODE='0755'
export DEV_PATHS='bin build docs lib src test tmp var'
export DEV_BASE_DOT_LOCAL='dot.local'
export DEV_BASE_DOT_SECRETS='dot.secrets'
export DEV_BASE_ENV='.env'

#
# Functions
#

function dev_git_dir_create() {
  echo "Task: create initial directory structure (${DEV_PATH_ROOT})"
  [[ -d 'bin' && -d 'src' && -d 'lib' ]] &&
    echo 'Warning: directory structure already created, no further action will be taken' 2>&1 &&
    return 0
  # shellcheck disable=SC2086
  mkdir \
    --mode="$DEV_PATHS_MODE" \
    $DEV_PATHS
}

function dev_git_dot_env_create() {
  echo "Task: create environment file (${DEV_BASE_ENV})"
  [[ -r "$DEV_BASE_ENV" ]] &&
    echo 'Warning: file already create, no further action will be taken' 2>&1 &&
    return 0
  # shellcheck disable=SC2016
  printf '#!/usr/bin/env bash
#
# Project development environment variables
#
# * Use along with .local and .secrets
# * Version: 3.0.0
#

# Base file and directory names
DEV_BASE_BUILD="build"
export DEV_BASE_BUILD
DEV_BASE_TEST="test"
export DEV_BASE_TEST
DEV_BASE_SRC="src"
export DEV_BASE_SRC
DEV_BASE_DOT_LOCAL='%s'
export DEV_BASE_DOT_LOCAL
DEV_BASE_LOCAL='.local'
export DEV_BASE_LOCAL
DEV_BASE_DOT_SECRETS='%s'
export DEV_BASE_DOT_SECRETS
DEV_BASE_SECRETS='.secrets'
export DEV_BASE_SECRETS
DEV_BASE_ENV='%s'
export DEV_BASE_ENV

# Base path for builds
DEV_PATH_BUILD="${DEV_PATH_ROOT}/${DEV_BASE_BUILD}"
export DEV_PATH_BUILD

# Source files
DEV_PATH_SRC="${DEV_PATH_ROOT}/${DEV_BASE_SRC}"
export DEV_PATH_SRC

# Test files
DEV_PATH_TEST="${DEV_PATH_ROOT}/${DEV_BASE_TEST}"
export DEV_PATH_TEST

# DevOps scripts
DEV_PATH_BIN="${DEV_PATH_ROOT}/bin"
export DEV_PATH_BIN

# DevOps libs
DEV_PATH_LIB="${DEV_PATH_ROOT}/lib"
export DEV_PATH_LIB

# Project documentation
DEV_PATH_DOCS="${DEV_PATH_ROOT}/docs"
export DEV_PATH_DOCS

# DevOps ephemeral data content
DEV_PATH_TMP="${DEV_PATH_ROOT}/tmp"
export DEV_PATH_TMP

# DevOps persistent data content
DEV_PATH_VAR="${DEV_PATH_ROOT}/var"
export DEV_PATH_VAR

#
# CICD Tools
#

# Lib / Installer64 / Repo Owner
DEV_LIB_INSTALLER64_OWNER="%s"
export DEV_LIB_INSTALLER64_OWNER

# Lib / Installer64 / Target
DEV_LIB_INSTALLER64_TARGET="${DEV_PATH_LIB}/%s"
export DEV_LIB_INSTALLER64_TARGET

# Lib / BashLib64 / Target
DEV_LIB_BASHLIB64_TARGET="${DEV_PATH_LIB}/%s"
export DEV_LIB_BASHLIB64_TARGET

#
# Project specific variables
#
' \
    "$DEV_BASE_DOT_LOCAL" \
    "$DEV_BASE_DOT_SECRETS" \
    "$DEV_BASE_ENV" \
    "$DEV_LIB_INSTALLER64_OWNER" \
    "$DEV_LIB_INSTALLER64_TARGET" \
    "$DEV_LIB_BASHLIB64_TARGET" \
    >"$DEV_BASE_ENV" &&
    chmod "$DEV_PATHS_MODE" "$DEV_BASE_ENV"
}

function dev_git_dot_local_create() {
  echo "Task: create environment file (${DEV_BASE_DOT_LOCAL})"
  [[ -r "$DEV_BASE_DOT_LOCAL" ]] &&
    echo 'Warning: file already create, no further action will be taken' 2>&1 &&
    return 0
  # shellcheck disable=SC2016
  printf '** ACTION REQUIRED: this is a template file. Copy to .local and remove this line **
#!/bin/sh
#
# Project development environment / Local variables
#
# * This file should be excluded from GIT
# * Source before .env
# * Version: 1.1.0
#

# Project base location. Adjust to your local GIT repo
DEV_PATH_ROOT="$(pwd)"
export DEV_PATH_ROOT

# CICD / Debug flag for bin/ scripts
DEV_CICD_DEBUG=""
export DEV_CICD_DEBUG
' \
    >"$DEV_BASE_DOT_LOCAL" &&
    chmod "$DEV_PATHS_MODE" "$DEV_BASE_DOT_LOCAL"
}

function dev_git_dot_secrets_create() {
  echo "Task: create environment file (${DEV_BASE_DOT_SECRETS})"
  [[ -r "$DEV_BASE_DOT_SECRETS" ]] &&
    echo 'Warning: file already create, no further action will be taken' 2>&1 &&
    return 0
  # shellcheck disable=SC2016
  printf '# ** ACTION REQUIRED: this is a template file. Copy to .secrets and remove this line **
#!/bin/sh
#
# Project development environment / Secrets
#
# * This file should be excluded from GIT
# * Version: 1.0.0
#
' \
    >"$DEV_BASE_DOT_SECRETS" &&
    chmod "$DEV_PATHS_MODE" "$DEV_BASE_DOT_SECRETS"
}

function dev_git_gitignore_create() {
  echo "Task: create gitignore file (.gitignore)"
  [[ -r '.gitignore' ]] &&
    echo 'Warning: file already create, no further action will be taken' 2>&1 &&
    return 0
  # shellcheck disable=SC2016
  printf '
#
# GIT Ignore
#
# * Template version: 1.1.0
#

# VScode
.vscode
*.code-workspace

# Code build
build/*

# Dev-time tools
lib/*

# Dev-time temporary files
tmp/*

# Secrets
.secrets

# Local variables
.local

# Keep placeholder for empty directories
!/**/.gitkeep

#
# Project specific exclusions
#
' \
    >'.gitignore' &&
  touch \
    'build/.gitkeep' \
    'lib/.gitkeep' \
    'tmp/.gitkeep'
}

function dev_git_dot_env_load() {
  echo "Task: load environment file (${DEV_BASE_ENV})"
  # shellcheck disable=SC1090
  source "$DEV_BASE_ENV"
}

function dev_git_installer64_get_version() {
  local api_latest="https://api.github.com/repos/${DEV_LIB_INSTALLER64_OWNER}/releases/latest"
  curl \
    -s \
    "$api_latest" |
    awk -F: '/"tag_name":/ { gsub( /[ ,"]/,"" ); print $2}'
}

function dev_git_installer64_get() {
  local version=''
  local package_url=''
  version="$(dev_git_installer64_get_version)" &&
    package_url="https://github.com/${DEV_LIB_INSTALLER64_OWNER}/releases/download/${version}/install-installer64" ||
    return $?
  curl \
    --remote-name \
    --location \
    "$package_url"
}

function dev_git_installer64_deploy() {
  local -i status=1
  echo "Task: deploy dev-tool (Installer64)"
  [[ -d "$DEV_LIB_INSTALLER64_TARGET" ]] &&
    echo 'Warning: tool already installed, no further action will be taken' 2>&1 &&
    return 0

  dev_git_installer64_get "$version" ||
    return $?

  INST64_INSTALLER64_TARGET="$DEV_LIB_INSTALLER64_TARGET" bash ./install-installer64
  status=$?
  rm -f ./install-installer64
  return $status
}

function dev_git_bashlib64_deploy() {
  echo "Task: deploy dev-tool (BashLib64)"
  [[ -d "$DEV_LIB_BASHLIB64_TARGET" ]] &&
    echo 'Warning: tool already installed, no further action will be taken' 2>&1 &&
    return 0
  INST64_BASHLIB64_TARGET="$DEV_LIB_BASHLIB64_TARGET" "${DEV_LIB_INSTALLER64_TARGET}/install-bashlib64"
}

#
# Main
#

declare dev_git_process='dev-bootstrap'
declare -i dev_git_status=0

echo "Process: [${dev_git_process}] started"

[[ -n "$DEV_CICD_DEBUG" ]] && set -x
dev_git_dir_create &&
  dev_git_dot_env_create &&
  dev_git_dot_local_create &&
  dev_git_dot_secrets_create &&
  dev_git_dot_env_load &&
  dev_git_gitignore_create &&
  dev_git_installer64_deploy &&
  dev_git_bashlib64_deploy
dev_git_status=$?

((dev_git_status == 0)) &&
  echo "Process: [${dev_git_process}] finished successfully" ||
  echo "Process: [${dev_git_process}] finished with errors: exit-status-${dev_git_status}"
exit $dev_git_status
