{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Project: Container64 \u00b6 1 2 3 4 5 6 7 8 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588 \u2591\u2591\u2588\u2588\u2588 \u2591\u2591\u2591 \u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588 \u2591\u2591\u2588\u2588\u2588 \u2588\u2588\u2588 \u2591\u2591\u2591 \u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2591\u2591 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2588 \u2591\u2588\u2588\u2588 \u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588 \u2591\u2591\u2591\u2588\u2588\u2588\u2591 \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588 \u2591\u2591\u2588\u2588\u2588 \u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588 \u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2591\u2591 \u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2588\u2588\u2588 \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2588 \u2591\u2591\u2588\u2588\u2588 \u2588\u2588\u2588\u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588\u2591\u2591\u2591 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588\u2591 \u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2591\u2591\u2588\u2588\u2588\u2588\u2588 \u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591\u2591 Overview \u00b6 Container64 is project for building and sharing OCI compliant container images that can be used for testing infrastructure management tools. Container collection: Ansible Node \u00b6 Purpose: Ansible node testing Packages: SystemD, Sudo, Python3 Image:Tag OS Base Image ubuntu-20.4-ansible-node:0.1.0 ubuntu docker.io/library/ubuntu:20.04 ubuntu-21.4-ansible-node:0.1.0 ubuntu docker.io/library/ubuntu:21.04 debian-10-ansible-node:0.1.0 debian docker.io/library/debian:buster debian-11-ansible-node:0.1.0 debian docker.io/library/debian:bullseye oraclelinux-8-ansible-node:0.1.0 oraclelinux docker.io/library/oraclelinux:8 fedora-33-ansible-node:0.1.0 fedora docker.io/library/fedora:33 centos-8-ansible-node:0.1.0 centos docker.io/library/centos:8 Container collection: Bash Test \u00b6 Purpose: Bash scripts testing Packages: Bash, Bats Core Image:Tag OS Base Image ubuntu-20.4-basth-test:0.1.0 ubuntu docker.io/library/ubuntu:20.04 ubuntu-21.4-basth-test:0.1.0 ubuntu docker.io/library/ubuntu:21.04 debian-10-basth-test:0.1.0 debian docker.io/library/debian:buster debian-11-basth-test:0.1.0 debian docker.io/library/debian:bullseye oraclelinux-8-basth-test:0.1.0 oraclelinux docker.io/library/oraclelinux:8 fedora-33-basth-test:0.1.0 fedora docker.io/library/fedora:33 centos-8-basth-test:0.1.0 centos docker.io/library/centos:8 Usage \u00b6 Podman \u00b6 Run a command inside the container: podman run ghcr.io/serdigital64/<IMAGE> <COMMAND> Deployment \u00b6 Podman \u00b6 Download the image to the local registry: podman pull ghcr.io/serdigital64/<IMAGE> Development \u00b6 Repositories \u00b6 Project GIT repository: https://github.com/serdigital64/container64 Project Documentation: https://serdigital64.github.io/container64/ Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Contributor Covenant Code of Conduct License \u00b6 GPL-3.0-or-later Author \u00b6 SerDigital64","title":"Home"},{"location":"#project-container64","text":"1 2 3 4 5 6 7 8 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588 \u2591\u2591\u2588\u2588\u2588 \u2591\u2591\u2591 \u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588 \u2591\u2591\u2588\u2588\u2588 \u2588\u2588\u2588 \u2591\u2591\u2591 \u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2591\u2591 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2588 \u2591\u2588\u2588\u2588 \u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588 \u2591\u2591\u2591\u2588\u2588\u2588\u2591 \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588 \u2591\u2591\u2588\u2588\u2588 \u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588 \u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2591\u2591 \u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2588\u2588\u2588 \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2588 \u2591\u2591\u2588\u2588\u2588 \u2588\u2588\u2588\u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588\u2591\u2591\u2591 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588\u2591 \u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2591\u2591\u2588\u2588\u2588\u2588\u2588 \u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591\u2591","title":"Project: Container64"},{"location":"#overview","text":"Container64 is project for building and sharing OCI compliant container images that can be used for testing infrastructure management tools.","title":"Overview"},{"location":"#container-collection-ansible-node","text":"Purpose: Ansible node testing Packages: SystemD, Sudo, Python3 Image:Tag OS Base Image ubuntu-20.4-ansible-node:0.1.0 ubuntu docker.io/library/ubuntu:20.04 ubuntu-21.4-ansible-node:0.1.0 ubuntu docker.io/library/ubuntu:21.04 debian-10-ansible-node:0.1.0 debian docker.io/library/debian:buster debian-11-ansible-node:0.1.0 debian docker.io/library/debian:bullseye oraclelinux-8-ansible-node:0.1.0 oraclelinux docker.io/library/oraclelinux:8 fedora-33-ansible-node:0.1.0 fedora docker.io/library/fedora:33 centos-8-ansible-node:0.1.0 centos docker.io/library/centos:8","title":"Container collection: Ansible Node"},{"location":"#container-collection-bash-test","text":"Purpose: Bash scripts testing Packages: Bash, Bats Core Image:Tag OS Base Image ubuntu-20.4-basth-test:0.1.0 ubuntu docker.io/library/ubuntu:20.04 ubuntu-21.4-basth-test:0.1.0 ubuntu docker.io/library/ubuntu:21.04 debian-10-basth-test:0.1.0 debian docker.io/library/debian:buster debian-11-basth-test:0.1.0 debian docker.io/library/debian:bullseye oraclelinux-8-basth-test:0.1.0 oraclelinux docker.io/library/oraclelinux:8 fedora-33-basth-test:0.1.0 fedora docker.io/library/fedora:33 centos-8-basth-test:0.1.0 centos docker.io/library/centos:8","title":"Container collection: Bash Test"},{"location":"#usage","text":"","title":"Usage"},{"location":"#podman","text":"Run a command inside the container: podman run ghcr.io/serdigital64/<IMAGE> <COMMAND>","title":"Podman"},{"location":"#deployment","text":"","title":"Deployment"},{"location":"#podman_1","text":"Download the image to the local registry: podman pull ghcr.io/serdigital64/<IMAGE>","title":"Podman"},{"location":"#development","text":"","title":"Development"},{"location":"#repositories","text":"Project GIT repository: https://github.com/serdigital64/container64 Project Documentation: https://serdigital64.github.io/container64/","title":"Repositories"},{"location":"#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Contributor Covenant Code of Conduct","title":"Contributing"},{"location":"#license","text":"GPL-3.0-or-later","title":"License"},{"location":"#author","text":"SerDigital64","title":"Author"},{"location":"cod/","text":"Contributor Covenant Code of Conduct \u00b6 Our Pledge \u00b6 We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community. Our Standards \u00b6 Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Enforcement Responsibilities \u00b6 Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate. Scope \u00b6 This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Enforcement \u00b6 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at serdigital64@gmail.com. All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident. Enforcement Guidelines \u00b6 Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct: 1. Correction \u00b6 Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested. 2. Warning \u00b6 Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban. 3. Temporary Ban \u00b6 Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban. 4. Permanent Ban \u00b6 Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community. Attribution \u00b6 This Code of Conduct is adapted from the Contributor Covenant , version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.","title":"Contributor Covenant Code of Conduct"},{"location":"cod/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"cod/#our-pledge","text":"We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.","title":"Our Pledge"},{"location":"cod/#our-standards","text":"Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"cod/#enforcement-responsibilities","text":"Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.","title":"Enforcement Responsibilities"},{"location":"cod/#scope","text":"This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.","title":"Scope"},{"location":"cod/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at serdigital64@gmail.com. All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident.","title":"Enforcement"},{"location":"cod/#enforcement-guidelines","text":"Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:","title":"Enforcement Guidelines"},{"location":"cod/#1-correction","text":"Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.","title":"1. Correction"},{"location":"cod/#2-warning","text":"Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.","title":"2. Warning"},{"location":"cod/#3-temporary-ban","text":"Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.","title":"3. Temporary Ban"},{"location":"cod/#4-permanent-ban","text":"Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community.","title":"4. Permanent Ban"},{"location":"cod/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.","title":"Attribution"},{"location":"sources/","text":"Images \u00b6 centos-8-ansible-node \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 # Base image FROM docker.io /library/centos : 8 # Image Metadata LABEL \\ container64.os-name = \"centos\" \\ container64.os-version = \"8.0\" \\ container64.image-version = \"0.1.0\" \\ container64.image-content = \"systemd,sudo,python3\" # Prepare package installer ENV container = \"docker\" ENV LC_ALL = \"C\" RUN dnf makecache # Define requirements for application: SYSTEMD ENV APP_SYSTEMD_PREREQS = \"kbd-legacy kbd-misc xkeyboard-config diffutils kbd libxkbcommon\" # Define packages for application: SYSTEMD ENV APP_SYSTEMD_PACKAGES = \"systemd systemd-libs systemd-pam systemd-udev\" # Install packages for the application: SYSTEMD RUN dnf --color = never --nodocs -y install $APP_SYSTEMD_PREREQS $APP_SYSTEMD_PACKAGES # Define requirements for application: SUDO ENV APP_SUDO_PREREQS = \"\" # Define packages for application: SUDO ENV APP_SUDO_PACKAGES = \"sudo\" # Install packages for the application: SUDO RUN dnf --color = never --nodocs -y install $APP_SUDO_PREREQS $APP_SUDO_PACKAGES # Define requirements for application: PYTHON3 ENV APP_PYTHON3_PREREQS = \"platform-python-pip python3-pip python3-setuptools\" # Define packages for application: PYTHON3 ENV APP_PYTHON3_PACKAGES = \"python36\" # Install packages for the application: PYTHON3 RUN dnf --color = never --nodocs -y install $APP_PYTHON 3 _PREREQS $APP_PYTHON 3 _PACKAGES # Configure subsystem: systemd RUN systemctl set -default multi-user.target # Cleanup package manager RUN dnf clean all # Final command CMD [ \"/lib/systemd/systemd\" ] centos-8-bash-test \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 # Base image FROM docker.io /library/centos : 8 # Image Metadata LABEL \\ container64.os-name = \"centos\" \\ container64.os-version = \"8.0\" \\ container64.image-version = \"0.1.0\" \\ container64.image-content = \"bash,bats-core\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 ADD https : // raw.githubusercontent.com /serdigital 64 /container 64 /master/src/loader/cmd / # Download Bats-Core ADD https : // github.com /bats-core/bats-core/archive/refs/tags/ v1.5.0.tar.gz /opt/ # Install tools RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _pkg_prepare && \\ /cmd bl 64 _pkg_install sudo # Install test environment RUN \\ /usr/sbin/useradd -m test && \\ /cmd bl 64 _sudo_add_root test && \\ /bin/mkdir /test && \\ /cmd bl 64 _arc_open_tar /opt/ v1.5.0.tar.gz /opt # Cleanup RUN /cmd bl 64 _os_cleanup_full # Test is a volume where all your bats-core tests are CMD [ \"/test\" ] # Run bats-core against /test USER test ENTRYPOINT [ \"/opt/bats-core-1.5.0/bin/bats\" ] debian-10-ansible-node \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 # Base image FROM docker.io /library/debian : buster # Image Metadata LABEL \\ container64.os-name = \"debian\" \\ container64.os-version = \"10.0\" \\ container64.image-version = \"0.1.0\" \\ container64.image-content = \"systemd,sudo,python3\" # Prepare package installer ENV container = \"docker\" ENV LC_ALL = \"C\" ENV DEBIAN_FRONTEND = \"noninteractive\" RUN apt-get update # Define requirements for application: SYSTEMD ENV APP_SYSTEMD_PREREQS = \"dbus dmsetup\" # Define packages for application: SYSTEMD ENV APP_SYSTEMD_PACKAGES = \"systemd systemd-sysv\" # Install packages for the application: SYSTEMD RUN apt-get -y install $APP_SYSTEMD_PREREQS $APP_SYSTEMD_PACKAGES # Define requirements for application: SUDO ENV APP_SUDO_PREREQS = \"lsb-base\" # Define packages for application: SUDO ENV APP_SUDO_PACKAGES = \"sudo\" # Install packages for the application: SUDO RUN apt-get -y install $APP_SUDO_PREREQS $APP_SUDO_PACKAGES # Define requirements for application: PYTHON3 ENV APP_PYTHON3_PREREQS = \"bzip2 file mime-support readline-common xz-utils\" # Define packages for application: PYTHON3 ENV APP_PYTHON3_PACKAGES = \"python3 python3-minimal python3.7 python3.7-minimal\" # Install packages for the application: PYTHON3 RUN apt-get -y install $APP_PYTHON 3 _PREREQS $APP_PYTHON 3 _PACKAGES # Configure subsystem: systemd RUN systemctl set -default multi-user.target # Cleanup package manager RUN apt-get clean # Final command CMD [ \"/lib/systemd/systemd\" ] debian-10-bash-test \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 # Base image FROM docker.io /library/debian : buster # Image Metadata LABEL \\ container64.os-name = \"debian\" \\ container64.os-version = \"10.0\" \\ container64.image-version = \"0.1.0\" \\ container64.image-content = \"bash,bats-core\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 ADD https : // raw.githubusercontent.com /serdigital 64 /container 64 /master/src/loader/cmd / # Download Bats-Core ADD https : // github.com /bats-core/bats-core/archive/refs/tags/ v1.5.0.tar.gz /opt/ # Install tools RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _pkg_prepare && \\ /cmd bl 64 _pkg_install sudo # Install test environment RUN \\ /usr/sbin/useradd -m test && \\ /cmd bl 64 _sudo_add_root test && \\ /bin/mkdir /test && \\ /cmd bl 64 _arc_open_tar /opt/ v1.5.0.tar.gz /opt # Cleanup RUN /cmd bl 64 _os_cleanup_full # Test is a volume where all your bats-core tests are CMD [ \"/test\" ] # Run bats-core against /test USER test ENTRYPOINT [ \"/opt/bats-core-1.5.0/bin/bats\" ] debian-11-ansible-node \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 # Base image FROM docker.io /library/debian : bullseye # Image Metadata LABEL \\ container64.os-name = \"debian\" \\ container64.os-version = \"11.0\" \\ container64.image-version = \"0.1.0\" \\ container64.image-content = \"systemd,sudo,python3\" # Prepare package installer ENV container = \"docker\" ENV LC_ALL = \"C\" ENV DEBIAN_FRONTEND = \"noninteractive\" RUN apt-get update # Define requirements for application: SYSTEMD ENV APP_SYSTEMD_PREREQS = \"dbus dmsetup\" # Define packages for application: SYSTEMD ENV APP_SYSTEMD_PACKAGES = \"systemd systemd-timesyncd\" # Install packages for the application: SYSTEMD RUN apt-get -y install $APP_SYSTEMD_PREREQS $APP_SYSTEMD_PACKAGES # Define requirements for application: SUDO ENV APP_SUDO_PREREQS = \"\" # Define packages for application: SUDO ENV APP_SUDO_PACKAGES = \"sudo\" # Install packages for the application: SUDO RUN apt-get -y install $APP_SUDO_PREREQS $APP_SUDO_PACKAGES # Define requirements for application: PYTHON3 ENV APP_PYTHON3_PREREQS = \"ca-certificates media-types openssl readline-common\" # Define packages for application: PYTHON3 ENV APP_PYTHON3_PACKAGES = \"python3 python3-minimal python3.9 python3.9-minimal\" # Install packages for the application: PYTHON3 RUN apt-get -y install $APP_PYTHON 3 _PREREQS $APP_PYTHON 3 _PACKAGES # Configure subsystem: systemd RUN systemctl set -default multi-user.target # Cleanup package manager RUN apt-get clean # Final command CMD [ \"/lib/systemd/systemd\" ] debian-11-bash-test \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 # Base image FROM docker.io /library/debian : bullseye # Image Metadata LABEL \\ container64.os-name = \"debian\" \\ container64.os-version = \"11.0\" \\ container64.image-version = \"0.1.0\" \\ container64.image-content = \"bash,bats-core\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 ADD https : // raw.githubusercontent.com /serdigital 64 /container 64 /master/src/loader/cmd / # Download Bats-Core ADD https : // github.com /bats-core/bats-core/archive/refs/tags/ v1.5.0.tar.gz /opt/ # Install tools RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _pkg_prepare && \\ /cmd bl 64 _pkg_install sudo # Install test environment RUN \\ /usr/sbin/useradd -m test && \\ /cmd bl 64 _sudo_add_root test && \\ /bin/mkdir /test && \\ /cmd bl 64 _arc_open_tar /opt/ v1.5.0.tar.gz /opt # Cleanup RUN /cmd bl 64 _os_cleanup_full # Test is a volume where all your bats-core tests are CMD [ \"/test\" ] # Run bats-core against /test USER test ENTRYPOINT [ \"/opt/bats-core-1.5.0/bin/bats\" ] fedora-33-ansible-node \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 # Base image FROM docker.io /library/fedora : 33 # Image Metadata LABEL \\ container64.os-name = \"fedora\" \\ container64.os-version = \"33.0\" \\ container64.image-version = \"0.1.0\" \\ container64.image-content = \"systemd,sudo,python3\" # Prepare package installer ENV container = \"docker\" ENV LC_ALL = \"C\" RUN dnf makecache # Define requirements for application: SYSTEMD ENV APP_SYSTEMD_PREREQS1 = \"acl dbus device-mapper hwdata pciutils rdma-core xkeyboard-config diffutils\" ENV APP_SYSTEMD_PREREQS2 = \"kbd-legacy kbd-misc diffutils kbd libxkbcommon\" # Define packages for application: SYSTEMD ENV APP_SYSTEMD_PACKAGES = \"systemd systemd-pam systemd-rpm-macros systemd-networkd\" # Install packages for the application: SYSTEMD RUN dnf --color = never --nodocs -y install $APP_SYSTEMD_PREREQS 1 $APP_SYSTEMD_PREREQS 2 $APP_SYSTEMD_PACKAGES # Configure subsystem: systemd RUN systemctl set -default multi-user.target # Cleanup package manager RUN dnf clean all # Final command CMD [ \"/lib/systemd/systemd\" ] fedora-33-bash-test \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 # Base image FROM docker.io /library/fedora : 33 # Image Metadata LABEL \\ container64.os-name = \"fedora\" \\ container64.os-version = \"33.0\" \\ container64.image-version = \"0.1.0\" \\ container64.image-content = \"bash,bats-core\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 ADD https : // raw.githubusercontent.com /serdigital 64 /container 64 /master/src/loader/cmd / # Download Bats-Core ADD https : // github.com /bats-core/bats-core/archive/refs/tags/ v1.5.0.tar.gz /opt/ # Install tools RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _pkg_prepare && \\ /cmd bl 64 _pkg_install sudo # Install test environment RUN \\ /usr/sbin/useradd -m test && \\ /cmd bl 64 _sudo_add_root test && \\ /bin/mkdir /test && \\ /cmd bl 64 _arc_open_tar /opt/ v1.5.0.tar.gz /opt # Cleanup RUN /cmd bl 64 _os_cleanup_full # Test is a volume where all your bats-core tests are CMD [ \"/test\" ] # Run bats-core against /test USER test ENTRYPOINT [ \"/opt/bats-core-1.5.0/bin/bats\" ] oraclelinux-8-ansible-node \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 # Base image FROM docker.io /library/oraclelinux : 8 # Image Metadata LABEL \\ container64.os-name = \"oraclelinux\" \\ container64.os-version = \"8.0\" \\ container64.image-version = \"0.1.0\" \\ container64.image-content = \"systemd,sudo,python3\" # Prepare package installer ENV container = \"docker\" ENV LC_ALL = \"C\" RUN dnf makecache # Define requirements for application: SYSTEMD ENV APP_SYSTEMD_PREREQS = \"kbd-legacy kbd-misc xkeyboard-config diffutils kbd libxkbcommon\" # Define packages for application: SYSTEMD ENV APP_SYSTEMD_PACKAGES = \"systemd systemd-libs systemd-pam systemd-udev\" # Install packages for the application: SYSTEMD RUN dnf --color = never --nodocs -y install $APP_SYSTEMD_PREREQS $APP_SYSTEMD_PACKAGES # Define requirements for application: SUDO ENV APP_SUDO_PREREQS = \"\" # Define packages for application: SUDO ENV APP_SUDO_PACKAGES = \"sudo\" # Install packages for the application: SUDO RUN dnf --color = never --nodocs -y install $APP_SUDO_PREREQS $APP_SUDO_PACKAGES # Define requirements for application: PYTHON3 ENV APP_PYTHON3_PREREQS = \"platform-python-pip python3-pip python3-setuptools\" # Define packages for application: PYTHON3 ENV APP_PYTHON3_PACKAGES = \"python36\" # Install packages for the application: PYTHON3 RUN dnf --color = never --nodocs -y install $APP_PYTHON 3 _PREREQS $APP_PYTHON 3 _PACKAGES # Configure subsystem: systemd RUN systemctl set -default multi-user.target # Cleanup package manager RUN dnf clean all # Final command CMD [ \"/lib/systemd/systemd\" ] oraclelinux-8-bash-test \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 # Base image FROM docker.io /library/oraclelinux : 8 # Image Metadata LABEL \\ container64.os-name = \"oraclelinux\" \\ container64.os-version = \"8.0\" \\ container64.image-version = \"0.1.0\" \\ container64.image-content = \"bash,bats-core\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 ADD https : // raw.githubusercontent.com /serdigital 64 /container 64 /master/src/loader/cmd / # Download Bats-Core ADD https : // github.com /bats-core/bats-core/archive/refs/tags/ v1.5.0.tar.gz /opt/ # Install tools RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _pkg_prepare && \\ /cmd bl 64 _pkg_install sudo tar # Install test environment RUN \\ /usr/sbin/useradd -m test && \\ /cmd bl 64 _sudo_add_root test && \\ /bin/mkdir /test && \\ /cmd bl 64 _arc_open_tar /opt/ v1.5.0.tar.gz /opt # Cleanup RUN /cmd bl 64 _os_cleanup_full # Test is a volume where all your bats-core tests are CMD [ \"/test\" ] # Run bats-core against /test USER test ENTRYPOINT [ \"/opt/bats-core-1.5.0/bin/bats\" ] ubuntu-20.4-ansible-node \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 # Base image FROM docker.io /library/ubuntu : 20.04 # Image Metadata LABEL \\ container64.os-name = \"ubuntu\" \\ container64.os-version = \"20.4\" \\ container64.image-version = \"0.1.0\" \\ container64.image-content = \"systemd,sudo,python3\" # Prepare package installer ENV container = \"docker\" ENV LC_ALL = \"C\" ENV DEBIAN_FRONTEND = \"noninteractive\" RUN apt-get update # Define requirements for application: SYSTEMD ENV APP_SYSTEMD_PREREQS1 = \"dbus dmsetup gir1.2-glib-2.0 networkd-dispatcher shared-mime-info tzdata xdg-user-dirs\" ENV APP_SYSTEMD_PREREQS2 = \"file mime-support readline-common xz-utils\" ENV APP_SYSTEMD_PREREQS3 = \"python3 python3-dbus python3-gi python3-minimal python3.8 python3.8-minimal\" # Define packages for application: SYSTEMD ENV APP_SYSTEMD_PACKAGES = \"systemd systemd-timesyncd\" # Install packages for the application: SYSTEMD RUN apt-get -y install $APP_SYSTEMD_PREREQS 1 $APP_SYSTEMD_PREREQS 2 $APP_SYSTEMD_PREREQS 3 $APP_SYSTEMD_PACKAGES # Define requirements for application: SUDO ENV APP_SUDO_PREREQS = \"\" # Define packages for application: SUDO ENV APP_SUDO_PACKAGES = \"sudo\" # Install packages for the application: SUDO RUN apt-get -y install $APP_SUDO_PREREQS $APP_SUDO_PACKAGES # Configure subsystem: systemd RUN systemctl set -default multi-user.target # Cleanup package manager RUN apt-get clean # Final command CMD [ \"/lib/systemd/systemd\" ] ubuntu-20.4-bash-test \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 # Base image FROM docker.io /library/debian : buster # Image Metadata LABEL \\ container64.os-name = \"debian\" \\ container64.os-version = \"10.0\" \\ container64.image-version = \"0.1.0\" \\ container64.image-content = \"bash,bats-core\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 ADD https : // raw.githubusercontent.com /serdigital 64 /container 64 /master/src/loader/cmd / # Download Bats-Core ADD https : // github.com /bats-core/bats-core/archive/refs/tags/ v1.5.0.tar.gz /opt/ # Install tools RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _pkg_prepare && \\ /cmd bl 64 _pkg_install sudo # Install test environment RUN \\ /usr/sbin/useradd -m test && \\ /cmd bl 64 _sudo_add_root test && \\ /bin/mkdir /test && \\ /cmd bl 64 _arc_open_tar /opt/ v1.5.0.tar.gz /opt # Cleanup RUN /cmd bl 64 _os_cleanup_full # Test is a volume where all your bats-core tests are CMD [ \"/test\" ] # Run bats-core against /test USER test ENTRYPOINT [ \"/opt/bats-core-1.5.0/bin/bats\" ] ubuntu-21.4-ansible-node \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 # Base image FROM docker.io /library/ubuntu : 21.04 # Image Metadata LABEL \\ container64.os-name = \"ubuntu\" \\ container64.os-version = \"21.4\" \\ container64.image-version = \"0.1.0\" \\ container64.image-content = \"systemd,sudo,python3\" # Prepare package installer ENV container = \"docker\" ENV LC_ALL = \"C\" ENV DEBIAN_FRONTEND = \"noninteractive\" RUN apt-get update # Define requirements for application: SYSTEMD ENV APP_SYSTEMD_PREREQS1 = \"dbus dmsetup gir1.2-glib-2.0 networkd-dispatcher shared-mime-info xdg-user-dirs\" ENV APP_SYSTEMD_PREREQS2 = \"ca-certificates media-types openssl readline-common tzdata\" ENV APP_SYSTEMD_PREREQS3 = \"python3 python3-minimal python3.9 python3.9-minimal python3-dbus python3-gi\" # Define packages for application: SYSTEMD ENV APP_SYSTEMD_PACKAGES = \"systemd systemd-timesyncd\" # Install packages for the application: SYSTEMD RUN apt-get -y install $APP_SYSTEMD_PREREQS 1 $APP_SYSTEMD_PREREQS 2 $APP_SYSTEMD_PREREQS 3 $APP_SYSTEMD_PACKAGES # Define requirements for application: SUDO ENV APP_SUDO_PREREQS = \"\" # Define packages for application: SUDO ENV APP_SUDO_PACKAGES = \"sudo\" # Install packages for the application: SUDO RUN apt-get -y install $APP_SUDO_PREREQS $APP_SUDO_PACKAGES # Configure subsystem: systemd RUN systemctl set -default multi-user.target # Cleanup package manager RUN apt-get clean # Final command CMD [ \"/lib/systemd/systemd\" ] ubuntu-21.4-bash-test \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 # Base image FROM docker.io /library/ubuntu : 21.04 # Image Metadata LABEL \\ container64.os-name = \"ubuntu\" \\ container64.os-version = \"21.4\" \\ container64.image-version = \"0.1.0\" \\ container64.image-content = \"bash,bats-core\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 ADD https : // raw.githubusercontent.com /serdigital 64 /container 64 /master/src/loader/cmd / # Download Bats-Core ADD https : // github.com /bats-core/bats-core/archive/refs/tags/ v1.5.0.tar.gz /opt/ # Install tools RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _pkg_prepare && \\ /cmd bl 64 _pkg_install sudo # Install test environment RUN \\ /usr/sbin/useradd -m test && \\ /cmd bl 64 _sudo_add_root test && \\ /bin/mkdir /test && \\ /cmd bl 64 _arc_open_tar /opt/ v1.5.0.tar.gz /opt # Cleanup RUN /cmd bl 64 _os_cleanup_full # Test is a volume where all your bats-core tests are CMD [ \"/test\" ] # Run bats-core against /test USER test ENTRYPOINT [ \"/opt/bats-core-1.5.0/bin/bats\" ]","title":"Sources"},{"location":"sources/#images","text":"","title":"Images"},{"location":"sources/#centos-8-ansible-node","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 # Base image FROM docker.io /library/centos : 8 # Image Metadata LABEL \\ container64.os-name = \"centos\" \\ container64.os-version = \"8.0\" \\ container64.image-version = \"0.1.0\" \\ container64.image-content = \"systemd,sudo,python3\" # Prepare package installer ENV container = \"docker\" ENV LC_ALL = \"C\" RUN dnf makecache # Define requirements for application: SYSTEMD ENV APP_SYSTEMD_PREREQS = \"kbd-legacy kbd-misc xkeyboard-config diffutils kbd libxkbcommon\" # Define packages for application: SYSTEMD ENV APP_SYSTEMD_PACKAGES = \"systemd systemd-libs systemd-pam systemd-udev\" # Install packages for the application: SYSTEMD RUN dnf --color = never --nodocs -y install $APP_SYSTEMD_PREREQS $APP_SYSTEMD_PACKAGES # Define requirements for application: SUDO ENV APP_SUDO_PREREQS = \"\" # Define packages for application: SUDO ENV APP_SUDO_PACKAGES = \"sudo\" # Install packages for the application: SUDO RUN dnf --color = never --nodocs -y install $APP_SUDO_PREREQS $APP_SUDO_PACKAGES # Define requirements for application: PYTHON3 ENV APP_PYTHON3_PREREQS = \"platform-python-pip python3-pip python3-setuptools\" # Define packages for application: PYTHON3 ENV APP_PYTHON3_PACKAGES = \"python36\" # Install packages for the application: PYTHON3 RUN dnf --color = never --nodocs -y install $APP_PYTHON 3 _PREREQS $APP_PYTHON 3 _PACKAGES # Configure subsystem: systemd RUN systemctl set -default multi-user.target # Cleanup package manager RUN dnf clean all # Final command CMD [ \"/lib/systemd/systemd\" ]","title":"centos-8-ansible-node"},{"location":"sources/#centos-8-bash-test","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 # Base image FROM docker.io /library/centos : 8 # Image Metadata LABEL \\ container64.os-name = \"centos\" \\ container64.os-version = \"8.0\" \\ container64.image-version = \"0.1.0\" \\ container64.image-content = \"bash,bats-core\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 ADD https : // raw.githubusercontent.com /serdigital 64 /container 64 /master/src/loader/cmd / # Download Bats-Core ADD https : // github.com /bats-core/bats-core/archive/refs/tags/ v1.5.0.tar.gz /opt/ # Install tools RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _pkg_prepare && \\ /cmd bl 64 _pkg_install sudo # Install test environment RUN \\ /usr/sbin/useradd -m test && \\ /cmd bl 64 _sudo_add_root test && \\ /bin/mkdir /test && \\ /cmd bl 64 _arc_open_tar /opt/ v1.5.0.tar.gz /opt # Cleanup RUN /cmd bl 64 _os_cleanup_full # Test is a volume where all your bats-core tests are CMD [ \"/test\" ] # Run bats-core against /test USER test ENTRYPOINT [ \"/opt/bats-core-1.5.0/bin/bats\" ]","title":"centos-8-bash-test"},{"location":"sources/#debian-10-ansible-node","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 # Base image FROM docker.io /library/debian : buster # Image Metadata LABEL \\ container64.os-name = \"debian\" \\ container64.os-version = \"10.0\" \\ container64.image-version = \"0.1.0\" \\ container64.image-content = \"systemd,sudo,python3\" # Prepare package installer ENV container = \"docker\" ENV LC_ALL = \"C\" ENV DEBIAN_FRONTEND = \"noninteractive\" RUN apt-get update # Define requirements for application: SYSTEMD ENV APP_SYSTEMD_PREREQS = \"dbus dmsetup\" # Define packages for application: SYSTEMD ENV APP_SYSTEMD_PACKAGES = \"systemd systemd-sysv\" # Install packages for the application: SYSTEMD RUN apt-get -y install $APP_SYSTEMD_PREREQS $APP_SYSTEMD_PACKAGES # Define requirements for application: SUDO ENV APP_SUDO_PREREQS = \"lsb-base\" # Define packages for application: SUDO ENV APP_SUDO_PACKAGES = \"sudo\" # Install packages for the application: SUDO RUN apt-get -y install $APP_SUDO_PREREQS $APP_SUDO_PACKAGES # Define requirements for application: PYTHON3 ENV APP_PYTHON3_PREREQS = \"bzip2 file mime-support readline-common xz-utils\" # Define packages for application: PYTHON3 ENV APP_PYTHON3_PACKAGES = \"python3 python3-minimal python3.7 python3.7-minimal\" # Install packages for the application: PYTHON3 RUN apt-get -y install $APP_PYTHON 3 _PREREQS $APP_PYTHON 3 _PACKAGES # Configure subsystem: systemd RUN systemctl set -default multi-user.target # Cleanup package manager RUN apt-get clean # Final command CMD [ \"/lib/systemd/systemd\" ]","title":"debian-10-ansible-node"},{"location":"sources/#debian-10-bash-test","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 # Base image FROM docker.io /library/debian : buster # Image Metadata LABEL \\ container64.os-name = \"debian\" \\ container64.os-version = \"10.0\" \\ container64.image-version = \"0.1.0\" \\ container64.image-content = \"bash,bats-core\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 ADD https : // raw.githubusercontent.com /serdigital 64 /container 64 /master/src/loader/cmd / # Download Bats-Core ADD https : // github.com /bats-core/bats-core/archive/refs/tags/ v1.5.0.tar.gz /opt/ # Install tools RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _pkg_prepare && \\ /cmd bl 64 _pkg_install sudo # Install test environment RUN \\ /usr/sbin/useradd -m test && \\ /cmd bl 64 _sudo_add_root test && \\ /bin/mkdir /test && \\ /cmd bl 64 _arc_open_tar /opt/ v1.5.0.tar.gz /opt # Cleanup RUN /cmd bl 64 _os_cleanup_full # Test is a volume where all your bats-core tests are CMD [ \"/test\" ] # Run bats-core against /test USER test ENTRYPOINT [ \"/opt/bats-core-1.5.0/bin/bats\" ]","title":"debian-10-bash-test"},{"location":"sources/#debian-11-ansible-node","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 # Base image FROM docker.io /library/debian : bullseye # Image Metadata LABEL \\ container64.os-name = \"debian\" \\ container64.os-version = \"11.0\" \\ container64.image-version = \"0.1.0\" \\ container64.image-content = \"systemd,sudo,python3\" # Prepare package installer ENV container = \"docker\" ENV LC_ALL = \"C\" ENV DEBIAN_FRONTEND = \"noninteractive\" RUN apt-get update # Define requirements for application: SYSTEMD ENV APP_SYSTEMD_PREREQS = \"dbus dmsetup\" # Define packages for application: SYSTEMD ENV APP_SYSTEMD_PACKAGES = \"systemd systemd-timesyncd\" # Install packages for the application: SYSTEMD RUN apt-get -y install $APP_SYSTEMD_PREREQS $APP_SYSTEMD_PACKAGES # Define requirements for application: SUDO ENV APP_SUDO_PREREQS = \"\" # Define packages for application: SUDO ENV APP_SUDO_PACKAGES = \"sudo\" # Install packages for the application: SUDO RUN apt-get -y install $APP_SUDO_PREREQS $APP_SUDO_PACKAGES # Define requirements for application: PYTHON3 ENV APP_PYTHON3_PREREQS = \"ca-certificates media-types openssl readline-common\" # Define packages for application: PYTHON3 ENV APP_PYTHON3_PACKAGES = \"python3 python3-minimal python3.9 python3.9-minimal\" # Install packages for the application: PYTHON3 RUN apt-get -y install $APP_PYTHON 3 _PREREQS $APP_PYTHON 3 _PACKAGES # Configure subsystem: systemd RUN systemctl set -default multi-user.target # Cleanup package manager RUN apt-get clean # Final command CMD [ \"/lib/systemd/systemd\" ]","title":"debian-11-ansible-node"},{"location":"sources/#debian-11-bash-test","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 # Base image FROM docker.io /library/debian : bullseye # Image Metadata LABEL \\ container64.os-name = \"debian\" \\ container64.os-version = \"11.0\" \\ container64.image-version = \"0.1.0\" \\ container64.image-content = \"bash,bats-core\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 ADD https : // raw.githubusercontent.com /serdigital 64 /container 64 /master/src/loader/cmd / # Download Bats-Core ADD https : // github.com /bats-core/bats-core/archive/refs/tags/ v1.5.0.tar.gz /opt/ # Install tools RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _pkg_prepare && \\ /cmd bl 64 _pkg_install sudo # Install test environment RUN \\ /usr/sbin/useradd -m test && \\ /cmd bl 64 _sudo_add_root test && \\ /bin/mkdir /test && \\ /cmd bl 64 _arc_open_tar /opt/ v1.5.0.tar.gz /opt # Cleanup RUN /cmd bl 64 _os_cleanup_full # Test is a volume where all your bats-core tests are CMD [ \"/test\" ] # Run bats-core against /test USER test ENTRYPOINT [ \"/opt/bats-core-1.5.0/bin/bats\" ]","title":"debian-11-bash-test"},{"location":"sources/#fedora-33-ansible-node","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 # Base image FROM docker.io /library/fedora : 33 # Image Metadata LABEL \\ container64.os-name = \"fedora\" \\ container64.os-version = \"33.0\" \\ container64.image-version = \"0.1.0\" \\ container64.image-content = \"systemd,sudo,python3\" # Prepare package installer ENV container = \"docker\" ENV LC_ALL = \"C\" RUN dnf makecache # Define requirements for application: SYSTEMD ENV APP_SYSTEMD_PREREQS1 = \"acl dbus device-mapper hwdata pciutils rdma-core xkeyboard-config diffutils\" ENV APP_SYSTEMD_PREREQS2 = \"kbd-legacy kbd-misc diffutils kbd libxkbcommon\" # Define packages for application: SYSTEMD ENV APP_SYSTEMD_PACKAGES = \"systemd systemd-pam systemd-rpm-macros systemd-networkd\" # Install packages for the application: SYSTEMD RUN dnf --color = never --nodocs -y install $APP_SYSTEMD_PREREQS 1 $APP_SYSTEMD_PREREQS 2 $APP_SYSTEMD_PACKAGES # Configure subsystem: systemd RUN systemctl set -default multi-user.target # Cleanup package manager RUN dnf clean all # Final command CMD [ \"/lib/systemd/systemd\" ]","title":"fedora-33-ansible-node"},{"location":"sources/#fedora-33-bash-test","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 # Base image FROM docker.io /library/fedora : 33 # Image Metadata LABEL \\ container64.os-name = \"fedora\" \\ container64.os-version = \"33.0\" \\ container64.image-version = \"0.1.0\" \\ container64.image-content = \"bash,bats-core\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 ADD https : // raw.githubusercontent.com /serdigital 64 /container 64 /master/src/loader/cmd / # Download Bats-Core ADD https : // github.com /bats-core/bats-core/archive/refs/tags/ v1.5.0.tar.gz /opt/ # Install tools RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _pkg_prepare && \\ /cmd bl 64 _pkg_install sudo # Install test environment RUN \\ /usr/sbin/useradd -m test && \\ /cmd bl 64 _sudo_add_root test && \\ /bin/mkdir /test && \\ /cmd bl 64 _arc_open_tar /opt/ v1.5.0.tar.gz /opt # Cleanup RUN /cmd bl 64 _os_cleanup_full # Test is a volume where all your bats-core tests are CMD [ \"/test\" ] # Run bats-core against /test USER test ENTRYPOINT [ \"/opt/bats-core-1.5.0/bin/bats\" ]","title":"fedora-33-bash-test"},{"location":"sources/#oraclelinux-8-ansible-node","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 # Base image FROM docker.io /library/oraclelinux : 8 # Image Metadata LABEL \\ container64.os-name = \"oraclelinux\" \\ container64.os-version = \"8.0\" \\ container64.image-version = \"0.1.0\" \\ container64.image-content = \"systemd,sudo,python3\" # Prepare package installer ENV container = \"docker\" ENV LC_ALL = \"C\" RUN dnf makecache # Define requirements for application: SYSTEMD ENV APP_SYSTEMD_PREREQS = \"kbd-legacy kbd-misc xkeyboard-config diffutils kbd libxkbcommon\" # Define packages for application: SYSTEMD ENV APP_SYSTEMD_PACKAGES = \"systemd systemd-libs systemd-pam systemd-udev\" # Install packages for the application: SYSTEMD RUN dnf --color = never --nodocs -y install $APP_SYSTEMD_PREREQS $APP_SYSTEMD_PACKAGES # Define requirements for application: SUDO ENV APP_SUDO_PREREQS = \"\" # Define packages for application: SUDO ENV APP_SUDO_PACKAGES = \"sudo\" # Install packages for the application: SUDO RUN dnf --color = never --nodocs -y install $APP_SUDO_PREREQS $APP_SUDO_PACKAGES # Define requirements for application: PYTHON3 ENV APP_PYTHON3_PREREQS = \"platform-python-pip python3-pip python3-setuptools\" # Define packages for application: PYTHON3 ENV APP_PYTHON3_PACKAGES = \"python36\" # Install packages for the application: PYTHON3 RUN dnf --color = never --nodocs -y install $APP_PYTHON 3 _PREREQS $APP_PYTHON 3 _PACKAGES # Configure subsystem: systemd RUN systemctl set -default multi-user.target # Cleanup package manager RUN dnf clean all # Final command CMD [ \"/lib/systemd/systemd\" ]","title":"oraclelinux-8-ansible-node"},{"location":"sources/#oraclelinux-8-bash-test","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 # Base image FROM docker.io /library/oraclelinux : 8 # Image Metadata LABEL \\ container64.os-name = \"oraclelinux\" \\ container64.os-version = \"8.0\" \\ container64.image-version = \"0.1.0\" \\ container64.image-content = \"bash,bats-core\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 ADD https : // raw.githubusercontent.com /serdigital 64 /container 64 /master/src/loader/cmd / # Download Bats-Core ADD https : // github.com /bats-core/bats-core/archive/refs/tags/ v1.5.0.tar.gz /opt/ # Install tools RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _pkg_prepare && \\ /cmd bl 64 _pkg_install sudo tar # Install test environment RUN \\ /usr/sbin/useradd -m test && \\ /cmd bl 64 _sudo_add_root test && \\ /bin/mkdir /test && \\ /cmd bl 64 _arc_open_tar /opt/ v1.5.0.tar.gz /opt # Cleanup RUN /cmd bl 64 _os_cleanup_full # Test is a volume where all your bats-core tests are CMD [ \"/test\" ] # Run bats-core against /test USER test ENTRYPOINT [ \"/opt/bats-core-1.5.0/bin/bats\" ]","title":"oraclelinux-8-bash-test"},{"location":"sources/#ubuntu-204-ansible-node","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 # Base image FROM docker.io /library/ubuntu : 20.04 # Image Metadata LABEL \\ container64.os-name = \"ubuntu\" \\ container64.os-version = \"20.4\" \\ container64.image-version = \"0.1.0\" \\ container64.image-content = \"systemd,sudo,python3\" # Prepare package installer ENV container = \"docker\" ENV LC_ALL = \"C\" ENV DEBIAN_FRONTEND = \"noninteractive\" RUN apt-get update # Define requirements for application: SYSTEMD ENV APP_SYSTEMD_PREREQS1 = \"dbus dmsetup gir1.2-glib-2.0 networkd-dispatcher shared-mime-info tzdata xdg-user-dirs\" ENV APP_SYSTEMD_PREREQS2 = \"file mime-support readline-common xz-utils\" ENV APP_SYSTEMD_PREREQS3 = \"python3 python3-dbus python3-gi python3-minimal python3.8 python3.8-minimal\" # Define packages for application: SYSTEMD ENV APP_SYSTEMD_PACKAGES = \"systemd systemd-timesyncd\" # Install packages for the application: SYSTEMD RUN apt-get -y install $APP_SYSTEMD_PREREQS 1 $APP_SYSTEMD_PREREQS 2 $APP_SYSTEMD_PREREQS 3 $APP_SYSTEMD_PACKAGES # Define requirements for application: SUDO ENV APP_SUDO_PREREQS = \"\" # Define packages for application: SUDO ENV APP_SUDO_PACKAGES = \"sudo\" # Install packages for the application: SUDO RUN apt-get -y install $APP_SUDO_PREREQS $APP_SUDO_PACKAGES # Configure subsystem: systemd RUN systemctl set -default multi-user.target # Cleanup package manager RUN apt-get clean # Final command CMD [ \"/lib/systemd/systemd\" ]","title":"ubuntu-20.4-ansible-node"},{"location":"sources/#ubuntu-204-bash-test","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 # Base image FROM docker.io /library/debian : buster # Image Metadata LABEL \\ container64.os-name = \"debian\" \\ container64.os-version = \"10.0\" \\ container64.image-version = \"0.1.0\" \\ container64.image-content = \"bash,bats-core\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 ADD https : // raw.githubusercontent.com /serdigital 64 /container 64 /master/src/loader/cmd / # Download Bats-Core ADD https : // github.com /bats-core/bats-core/archive/refs/tags/ v1.5.0.tar.gz /opt/ # Install tools RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _pkg_prepare && \\ /cmd bl 64 _pkg_install sudo # Install test environment RUN \\ /usr/sbin/useradd -m test && \\ /cmd bl 64 _sudo_add_root test && \\ /bin/mkdir /test && \\ /cmd bl 64 _arc_open_tar /opt/ v1.5.0.tar.gz /opt # Cleanup RUN /cmd bl 64 _os_cleanup_full # Test is a volume where all your bats-core tests are CMD [ \"/test\" ] # Run bats-core against /test USER test ENTRYPOINT [ \"/opt/bats-core-1.5.0/bin/bats\" ]","title":"ubuntu-20.4-bash-test"},{"location":"sources/#ubuntu-214-ansible-node","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 # Base image FROM docker.io /library/ubuntu : 21.04 # Image Metadata LABEL \\ container64.os-name = \"ubuntu\" \\ container64.os-version = \"21.4\" \\ container64.image-version = \"0.1.0\" \\ container64.image-content = \"systemd,sudo,python3\" # Prepare package installer ENV container = \"docker\" ENV LC_ALL = \"C\" ENV DEBIAN_FRONTEND = \"noninteractive\" RUN apt-get update # Define requirements for application: SYSTEMD ENV APP_SYSTEMD_PREREQS1 = \"dbus dmsetup gir1.2-glib-2.0 networkd-dispatcher shared-mime-info xdg-user-dirs\" ENV APP_SYSTEMD_PREREQS2 = \"ca-certificates media-types openssl readline-common tzdata\" ENV APP_SYSTEMD_PREREQS3 = \"python3 python3-minimal python3.9 python3.9-minimal python3-dbus python3-gi\" # Define packages for application: SYSTEMD ENV APP_SYSTEMD_PACKAGES = \"systemd systemd-timesyncd\" # Install packages for the application: SYSTEMD RUN apt-get -y install $APP_SYSTEMD_PREREQS 1 $APP_SYSTEMD_PREREQS 2 $APP_SYSTEMD_PREREQS 3 $APP_SYSTEMD_PACKAGES # Define requirements for application: SUDO ENV APP_SUDO_PREREQS = \"\" # Define packages for application: SUDO ENV APP_SUDO_PACKAGES = \"sudo\" # Install packages for the application: SUDO RUN apt-get -y install $APP_SUDO_PREREQS $APP_SUDO_PACKAGES # Configure subsystem: systemd RUN systemctl set -default multi-user.target # Cleanup package manager RUN apt-get clean # Final command CMD [ \"/lib/systemd/systemd\" ]","title":"ubuntu-21.4-ansible-node"},{"location":"sources/#ubuntu-214-bash-test","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 # Base image FROM docker.io /library/ubuntu : 21.04 # Image Metadata LABEL \\ container64.os-name = \"ubuntu\" \\ container64.os-version = \"21.4\" \\ container64.image-version = \"0.1.0\" \\ container64.image-content = \"bash,bats-core\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 ADD https : // raw.githubusercontent.com /serdigital 64 /container 64 /master/src/loader/cmd / # Download Bats-Core ADD https : // github.com /bats-core/bats-core/archive/refs/tags/ v1.5.0.tar.gz /opt/ # Install tools RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _pkg_prepare && \\ /cmd bl 64 _pkg_install sudo # Install test environment RUN \\ /usr/sbin/useradd -m test && \\ /cmd bl 64 _sudo_add_root test && \\ /bin/mkdir /test && \\ /cmd bl 64 _arc_open_tar /opt/ v1.5.0.tar.gz /opt # Cleanup RUN /cmd bl 64 _os_cleanup_full # Test is a volume where all your bats-core tests are CMD [ \"/test\" ] # Run bats-core against /test USER test ENTRYPOINT [ \"/opt/bats-core-1.5.0/bin/bats\" ]","title":"ubuntu-21.4-bash-test"}]}