#!/usr/bin/env bash
#######################################
# CntBuild
#
# Container images build tool
#
# Author: serdigital64 (https://github.com/serdigital64)
# Repository: https://github.com/automation64/container64
# Version: 3.0.0
#
#######################################
# Copyright [X_COPYRIGHT_YEAR_X] [X_COPYRIGHT_OWNER_X]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
###[ embedded-bashlib64-start ]#####################
#
#!/usr/bin/env bash
#######################################
# BashLib64 / Bash automation library
#
# Author: serdigital64 (https://github.com/serdigital64)
# Repository: https://github.com/automation64/bashlib64
#
# Copyright 2022 SerDigital64@gmail.com
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#######################################

#######################################
# BashLib64 / Module / Globals / Manipulate CSV like text files
#######################################

# shellcheck disable=SC2034
{
  declare BL64_XSV_VERSION='2.1.0'

  declare BL64_XSV_MODULE='0'

  declare BL64_XSV_CMD_YQ="$BL64_VAR_UNAVAILABLE"
  declare BL64_XSV_CMD_JQ="$BL64_VAR_UNAVAILABLE"

  #
  # Field separators
  #
  # shellcheck disable=SC2034
  declare BL64_XSV_FS='_@64@_'
  declare BL64_XSV_FS_SPACE=' '
  declare BL64_XSV_FS_NEWLINE=$'\n'
  declare BL64_XSV_FS_TAB=$'\t'
  declare BL64_XSV_FS_COLON=':'
  declare BL64_XSV_FS_SEMICOLON=';'
  declare BL64_XSV_FS_COMMA=','
  declare BL64_XSV_FS_PIPE='|'
  declare BL64_XSV_FS_AT='@'
  declare BL64_XSV_FS_DOLLAR='$'
  declare BL64_XSV_FS_SLASH='/'
}

#######################################
# BashLib64 / Module / Setup / Manipulate CSV like text files
#######################################

#######################################
# Setup the bashlib64 module
#
# Arguments:
#   $@: (optional) search full paths for tools
# Outputs:
#   STDOUT: None
#   STDERR: None
# Returns:
#   0: setup ok
#   >0: setup failed
#######################################
function bl64_xsv_setup() {
  [[ -z "$BL64_VERSION" ]] &&
    echo 'Error: bashlib64-module-core.bash should the last module to be sourced' &&
    return 21
  local search_paths=("${@:-}")

  # shellcheck disable=SC2034
  bl64_lib_module_imported 'BL64_DBG_MODULE' &&
    bl64_dbg_lib_show_function &&
    bl64_lib_module_imported 'BL64_CHECK_MODULE' &&
    bl64_lib_module_imported 'BL64_TXT_MODULE' &&
    bl64_lib_module_imported 'BL64_BSH_MODULE' &&
    _bl64_xsv_set_command "${search_paths[@]}" &&
    BL64_XSV_MODULE="$BL64_VAR_ON"
  bl64_check_alert_module_setup 'xsv'
}

#######################################
# Identify and normalize commands
#
# * If no values are provided, try to detect commands looking for common paths
# * Commands are exported as variables with full path
# * All commands are optional, no error if not found
#
# Arguments:
#   None
# Outputs:
#   STDOUT: None
#   STDERR: None
# Returns:
#   0: always ok
#######################################
function _bl64_xsv_set_command() {
  bl64_dbg_lib_show_function "$@"
  BL64_XSV_CMD_JQ="$(bl64_bsh_command_locate 'jq' "$@")" &&
    BL64_XSV_CMD_YQ="$(bl64_bsh_command_locate 'yq' "$@")"
}

#######################################
# BashLib64 / Module / Functions / Manipulate CSV like text files
#######################################

#######################################
# Dump file to STDOUT without comments and spaces
#
# Arguments:
#   $1: Full path to the file
# Outputs:
#   STDOUT: file content
#   STDERR: Error messages
# Returns:
#   0: successfull execution
#   BL64_LIB_ERROR_FILE_*
#######################################
function bl64_xsv_dump() {
  bl64_dbg_lib_show_function "$@"
  local source="$1"

  bl64_check_parameter 'source' &&
    bl64_check_file "$source" 'source file not found' || return $?

  bl64_txt_run_egrep "$BL64_TXT_SET_GREP_INVERT" '^#.*$|^$' "$source"

}

#######################################
# Search for records based on key filters and return matching rows
#
# * Column numbers are AWK fields. First column: 1
#
# Arguments:
#   $1: Single string with one ore more search values separated by $BL64_XSV_FS
#   $2: source file path. Default: STDIN
#   $3: one ore more column numbers (keys) where values will be searched. Format: single string using $BL64_XSV_COLON as field separator
#   $4: one or more fields to show on record match. Format: single string using $BL64_XSV_COLON as field separator
#   $5: field separator for the source file. Default: $BL64_XSV_COLON
#   $6: field separator for the output record. Default: $BL64_XSV_COLON
# Outputs:
#   STDOUT: matching records
#   STDERR: Error messages
# Returns:
#   0: successfull execution
#   >0: awk command exit status
#######################################
function bl64_xsv_search_records() {
  bl64_dbg_lib_show_function "$@"
  local values="$1"
  local source="${2:--}"
  local keys="${3:-1}"
  local fields="${4:-0}"
  local fs_src="${5:-$BL64_XSV_FS_COLON}"
  local fs_out="${6:-$BL64_XSV_FS_COLON}"

  # shellcheck disable=SC2086
  bl64_check_parameter 'values' 'search value' || return $?

  bl64_dbg_lib_show_comments 'run in a subshell to avoid leaving exported vars'
  {
    export BL64_XSV_FS_COLON
    export BL64_XSV_FS
    export BL64_LIB_ERROR_PARAMETER_INVALID
    # shellcheck disable=SC2016
    bl64_txt_run_awk \
      -F "$fs_src" \
      -v VALUES="${values}" \
      -v KEYS="$keys" \
      -v FIELDS="$fields" \
      -v FS_OUT="$fs_out" \
      '
      BEGIN {
        show_total = split( FIELDS, show_fields, ENVIRON["BL64_XSV_FS_COLON"] )
        keys_total = split( KEYS, keys_fields, ENVIRON["BL64_XSV_FS_COLON"] )
        values_total = split( VALUES, values_fields, ENVIRON["BL64_XSV_FS"] )
        if( keys_total != values_total ) {
          exit ENVIRON["BL64_LIB_ERROR_PARAMETER_INVALID"]
        }
        row_match = ""
        count = 0
        found = 0
      }
      /^#/ || /^$/ { next }
      {
        found = 0
        for( count = 1; count <= keys_total; count++ ) {
          if ( $keys_fields[count] == values_fields[count] ) {
            found = 1
          } else {
            found = 0
            break
          }
        }

        if( found == 1 ) {
          row_match = $show_fields[1]
          for( count = 2; count <= show_total; count++ ) {
            row_match = row_match FS_OUT $show_fields[count]
          }
          print row_match
        }
      }
      END {}
    ' \
      "$source"
  }
}

#######################################
# Command wrapper with verbose, debug and common options
#
# * Trust no one. Ignore inherited config and use explicit
#
# Arguments:
#   $@: arguments are passed as-is to the command
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
# shellcheck disable=SC2120
function bl64_xsv_run_jq() {
  bl64_dbg_lib_show_function "$@"

  bl64_check_parameters_none "$#" &&
    bl64_check_module 'BL64_XSV_MODULE' &&
    bl64_check_command "$BL64_XSV_CMD_JQ" ||
    return $?

  bl64_dbg_lib_trace_start
  "$BL64_XSV_CMD_JQ" "$@"
  bl64_dbg_lib_trace_stop
}

#######################################
# Command wrapper with verbose, debug and common options
#
# * Trust no one. Ignore inherited config and use explicit
#
# Arguments:
#   $@: arguments are passed as-is to the command
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
# shellcheck disable=SC2120
function bl64_xsv_run_yq() {
  bl64_dbg_lib_show_function "$@"

  bl64_check_parameters_none "$#" &&
    bl64_check_module 'BL64_XSV_MODULE' &&
    bl64_check_command "$BL64_XSV_CMD_YQ" "$BL64_VAR_DEFAULT" 'yq' ||
    return $?

  bl64_dbg_lib_trace_start
  "$BL64_XSV_CMD_YQ" "$@"
  bl64_dbg_lib_trace_stop
}

#!/usr/bin/env bash
#######################################
# BashLib64 / Bash automation library
#
# Author: serdigital64 (https://github.com/serdigital64)
# Repository: https://github.com/automation64/bashlib64
#
# Copyright 2022 SerDigital64@gmail.com
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#######################################

#######################################
# BashLib64 / Module / Globals / Interact with Bash shell
#######################################

# shellcheck disable=SC2034
{
  declare BL64_BSH_VERSION='3.3.1'

  declare BL64_BSH_MODULE='0'

  declare BL64_BSH_VERSION_BASH=''
  declare BL64_BSH_ENV_STORE='.env.d'
}

#######################################
# BashLib64 / Module / Setup / Interact with Bash shell
#######################################

#######################################
# Setup the bashlib64 module
#
# * Warning: bootstrap function
#
# Arguments:
#   None
# Outputs:
#   STDOUT: None
#   STDERR: None
# Returns:
#   0: setup ok
#   >0: setup failed
#######################################
function bl64_bsh_setup() {
  [[ -z "$BL64_VERSION" ]] &&
    echo 'Error: bashlib64-module-core.bash should the last module to be sourced' &&
    return 21

  # shellcheck disable=SC2034
  bl64_lib_module_imported 'BL64_DBG_MODULE' &&
    bl64_dbg_lib_show_function &&
    bl64_lib_module_imported 'BL64_CHECK_MODULE' &&
    bl64_lib_module_imported 'BL64_FMT_MODULE' &&
    bl64_lib_module_imported 'BL64_XSV_MODULE' &&
    bl64_lib_module_imported 'BL64_TXT_MODULE' &&
    bl64_lib_module_imported 'BL64_FS_MODULE' &&
    _bl64_bsh_set_version &&
    BL64_BSH_MODULE="$BL64_VAR_ON"
  bl64_check_alert_module_setup 'bsh'
}

#######################################
# Identify and set module components versions
#
# * Version information is stored in module global variables
#
# Arguments:
#   None
# Outputs:
#   STDOUT: None
#   STDERR: command errors
# Returns:
#   0: version set ok
#   $BL64_LIB_ERROR_OS_BASH_VERSION
#######################################
function _bl64_bsh_set_version() {
  bl64_dbg_lib_show_function

  # shellcheck disable=SC2034
  case "${BASH_VERSINFO[0]}" in
  4*) BL64_BSH_VERSION_BASH='4.0' ;;
  5*) BL64_BSH_VERSION_BASH='5.0' ;;
  *)
    bl64_check_alert_unsupported "Bash: ${BASH_VERSINFO[0]}"
    return $BL64_LIB_ERROR_OS_BASH_VERSION
    ;;
  esac
  bl64_dbg_lib_show_vars 'BL64_BSH_VERSION_BASH'

  return 0
}

#######################################
# BashLib64 / Module / Functions / Interact with Bash shell
#######################################

# DEPRECATED: to be removed in future releases
function bl64_bsh_script_set_id() {
  bl64_msg_show_deprecated 'bl64_bsh_script_set_id' 'bl64_lib_script_set_id'
  bl64_lib_script_set_id "$@"
}
function bl64_bsh_script_set_identity() {
  bl64_msg_show_deprecated 'bl64_bsh_script_set_identity' 'bl64_lib_script_set_identity'
  bl64_lib_script_set_identity "$@"
}

#######################################
# Get current script location
#
# Arguments:
#   None
# Outputs:
#   STDOUT: full path
#   STDERR: Error messages
# Returns:
#   0: full path
#   >0: command error
#######################################
function bl64_bsh_script_get_path() {
  bl64_dbg_lib_show_function
  local -i main=${#BASH_SOURCE[*]}
  local caller=''

  ((main > 0)) && main=$((main - 1))
  caller="${BASH_SOURCE[${main}]}"

  unset CDPATH &&
    [[ -n "$caller" ]] &&
    cd -- "${caller%/*}" >/dev/null &&
    pwd -P ||
    return $?
}

#######################################
# Get current script name
#
# Arguments:
#   None
# Outputs:
#   STDOUT: script name
#   STDERR: Error messages
# Returns:
#   0: name
#   >0: command error
#######################################
function bl64_bsh_script_get_name() {
  bl64_dbg_lib_show_function
  local -i main=${#BASH_SOURCE[*]}

  ((main > 0)) && main=$((main - 1))

  bl64_fmt_basename "${BASH_SOURCE[${main}]}"
}

#######################################
# Generate a string that can be used to populate shell.env files
#
# * Export format is bash compatible
#
# Arguments:
#   $1: variable name
#   $2: value
# Outputs:
#   STDOUT: export string
#   STDERR: Error messages
# Returns:
#   0: string created
#   >0: creation error
#######################################
function bl64_bsh_env_export_variable() {
  bl64_dbg_lib_show_function "$@"
  local variable="${1:-${BL64_VAR_NULL}}"
  local value="${2:-}"

  bl64_check_parameter 'variable' ||
    return $?

  printf "export %s='%s'\n" "$variable" "$value"
}

#######################################
# Import shell environment variables from YAML file
#
# * Conversion is done using YQ and Awk
# * YAML nested variables are flatten and converted to single shell variables:
#   * first.second: value -> FIRST_SECOND="value"
#   * first.second[2]: value -> FIRST_SECOND_2="value"
# * Shell variable names are created using uppercase and exported
# * Resulting variables are saved to a temporary file which is then sourced into the current script
#
# Arguments:
#   $1: path to the YAML file
# Outputs:
#   STDOUT: none
#   STDERR: conversion errors
# Returns:
#   0: converted and lodaded ok
#   >0: failed to convert
#######################################
function bl64_bsh_env_import_yaml() {
  bl64_dbg_lib_show_function "$@"
  local source="$1"
  local dynamic_env=''

  bl64_check_parameter 'source' &&
    bl64_check_file "$source" ||
    return $?

  # shellcheck disable=SC1090
  bl64_msg_show_subtask "convert and import shell variables from YAML file (${source})"
  # shellcheck disable=SC1090
  dynamic_env="$(bl64_fs_create_tmpfile)" &&
    bl64_xsv_run_yq \
      -o p \
      '.' \
      "$source" |
    bl64_txt_run_awk \
      -F ' = ' '
  {
      gsub( "[.]", "_", $1 )
      print "export " toupper( $1 ) "='"'"'" $2 "'"'"'"
  }' >"$dynamic_env" &&
    source "$dynamic_env" ||
    return $?

  bl64_fs_rm_tmpfile "$dynamic_env"
  return 0
}

#######################################
# Determine the full path of a command
#
# * valid for command type only (type -p)
# * if the command is already a path, nothing else is done
#
# Arguments:
#   $1: command name with/without path
# Outputs:
#   STDOUT: full path
#   STDERR: Error messages
# Returns:
#   0: full path detected
#   >0: unable to detect or error
#######################################
function bl64_bsh_command_get_path() {
  bl64_dbg_lib_show_function "$@"
  local command="${1:-}"
  local full_path=''

  bl64_check_parameter 'command' ||
    return $?

  full_path="$(type -p "${command}")"
  if [[ -n "$full_path" ]]; then
    echo "$full_path"
    return 0
  fi
  return $BL64_LIB_ERROR_TASK_FAILED
}

#######################################
# Check if the command is executable
#
# * command is first converted to full path
#
# Arguments:
#   $1: command name with/without path
# Outputs:
#   STDOUT: none
#   STDERR: Error messages
# Returns:
#   0: command is executable
#   >0: command is not present or not executable
#######################################
function bl64_bsh_command_is_executable() {
  bl64_dbg_lib_show_function "$@"
  local command="${1:-}"
  local full_path=''

  bl64_check_parameter 'command' ||
    return $?

  full_path="$(bl64_bsh_command_get_path "${command}")" ||
    return $?
  [[ ! -e "$full_path" ]] &&
    return $BL64_LIB_ERROR_FILE_NOT_FOUND
  [[ ! -x "$full_path" ]] &&
    return $BL64_LIB_ERROR_FILE_NOT_EXECUTE
  [[ -x "$full_path" ]] ||
    return $BL64_LIB_ERROR_TASK_FAILED
}

#######################################
# Create env file store
#
# * Use to store .env files that can later be automatically loaded by the shell profile
#
# Arguments:
#   $1: User home path. Default: HOME
#   $2: permissions. Default: 0750
#   $3: user name. Default: current
#   $4: group name. Default: current
# Outputs:
#   STDOUT: progress
#   STDERR: Error messages
# Returns:
#   0: task executed ok
#   >0: failed to execute task
#######################################
function bl64_bsh_env_store_create() {
  bl64_dbg_lib_show_function "$@"
  local home="${1:-$HOME}"
  local mode="${2:-$BL64_VAR_DEFAULT}"
  local user="${3:-$BL64_VAR_DEFAULT}"
  local group="${4:-$BL64_VAR_DEFAULT}"
  local mode='0750'

  [[ "$mode" == "$BL64_VAR_DEFAULT" ]] && mode='0750'
  bl64_fs_create_dir "$mode" "$user" "$group" \
    "${home}/${BL64_BSH_ENV_STORE}"
}

#######################################
# Determines if the env store is present
#
# * Check that the store is presend only (directory path)
# * No check is done to detect if the shell properly configured to auto-load on login from the store
#
# Arguments:
#   $1: User home path. Default: HOME
# Outputs:
#   STDOUT: None
#   STDERR: Error messages
# Returns:
#   0: store is present
#   >0: store is not present or error
#######################################
function bl64_bsh_env_store_is_present() {
  bl64_dbg_lib_show_function
  local home="${1:-$HOME}"

  [[ -d "${home}/${BL64_BSH_ENV_STORE}" ]]
}

#######################################
# Publish existing .env files to the store
#
# * The source file is sym-linked to the store
# * The source file must have permissions for the user to use it
#
# Arguments:
#   $1: Full path to the source .env file
#   $2: Load priority. Default: 64
#   $3: User home path. Default: HOME
# Outputs:
#   STDOUT: progress
#   STDERR: Error messages
# Returns:
#   0: task executed ok
#   >0: failed to execute task
#######################################
function bl64_bsh_env_store_publish() {
  bl64_dbg_lib_show_function "$@"
  local source_env="${1:-}"
  local priority="${2:-64}"
  local home="${3:-$HOME}"
  local target=''

  bl64_check_parameter 'source_env' &&
    bl64_check_file "$source_env" &&
    bl64_check_directory "${home}/${BL64_BSH_ENV_STORE}" ||
    return $?

  target="${home}/${BL64_BSH_ENV_STORE}/${priority}_$(bl64_fmt_basename "$source_env")" &&
    bl64_fs_create_symlink \
      "$source_env" \
      "$target" \
      "$BL64_VAR_ON"
}

#######################################
# Generate env file loader snippet
#
# * Use to generate bash snippet that can be added to user's profile
#
# Arguments:
#   None
# Outputs:
#   STDOUT: snippet
#   STDERR: none
# Returns:
#   0: task executed ok
#   >0: failed to execute task
#######################################
function bl64_bsh_env_store_generate() {
  bl64_dbg_lib_show_function
  # shellcheck disable=SC2016
  printf '
# Load .env files from user store
if [[ -d "${HOME}/%s" ]]; then
  _module=""
  for _module in "${HOME}/%s"/*.env; do
    [[ -r "$_module" ]] &&
      source "$_module"
  done
  unset _module
fi\n
' "$BL64_BSH_ENV_STORE" "$BL64_BSH_ENV_STORE"
}

#######################################
# Generate bash rc snippet
#
# * Generic bashrc content to allow modular content
# * System PATH setting only
#
# Arguments:
#   None
# Outputs:
#   STDOUT: snippet
#   STDERR: none
# Returns:
#   0: task executed ok
#   >0: failed to execute task
#######################################
function bl64_bsh_profile_rc_generate() {
  bl64_dbg_lib_show_function
  # shellcheck disable=SC2016
  printf '
# Set initial system path
export PATH="/bin:/usr/bin"

# Load global RC
[[ -f '/etc/bashrc' ]] &&
  source '/etc/bashrc'

# Load user RC
if [[ -d "${HOME}/.bashrc.d" ]]; then
  _module=""
  for _module in "${HOME}/.bashrc.d"/*.sh; do
    [[ -r "$_module" ]] &&
      source "$_module"
  done
  unset _module
fi\n
'
}

#######################################
# Generate bash profile snippet
#
# * Generic bash_profile content to allow modular content
#
# Arguments:
#   None
# Outputs:
#   STDOUT: snippet
#   STDERR: none
# Returns:
#   0: task executed ok
#   >0: failed to execute task
#######################################
function bl64_bsh_profile_bash_generate() {
  bl64_dbg_lib_show_function
  # shellcheck disable=SC2016
  printf '
# Import BashRC content
if [[ -f "${HOME}/.bashrc" ]]; then
  source "${HOME}/.bashrc"
fi\n
'
}

#######################################
# Generate bash PATH snippet
#
# Arguments:
#   $1: insecure setting?: ON: user paths first. OFF: user paths last. Default: OFF
#   $2: include system paths?. Default: OFF
#   $3: extra paths
# Outputs:
#   STDOUT: snippet
#   STDERR: none
# Returns:
#   0: task executed ok
#   >0: failed to execute task
#######################################
function bl64_bsh_profile_path_generate() {
  bl64_dbg_lib_show_function "$@"
  local insecure="${1:-$BL64_VAR_OFF}"
  local system="${2:-$BL64_VAR_OFF}"
  local paths_extra="${3:-}"
  local paths_base='/bin:/usr/bin:/usr/local/bin'
  local paths_system='/sbin:/usr/sbin:/usr/local/sbin'
  # shellcheck disable=SC2016
  local paths_user='$HOME/bin:$HOME/.local/bin'

  bl64_lib_flag_is_enabled "$system" &&
    paths_base+=":${paths_system}"

  if bl64_lib_flag_is_enabled "$insecure"; then
    printf '\nPATH="%s"\n' "${paths_extra}${paths_extra:+:}${paths_user}:${paths_base}"
  else
    printf '\nPATH="%s"\n' "${paths_base}:${paths_user}${paths_extra:+:}${paths_extra}"
  fi
}

#######################################
# Simplified command wrapper
#
# Arguments:
#   $1: target path
# Outputs:
#   STDOUT: None
#   STDERR: Command error
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_bsh_run_pushd() {
  bl64_dbg_lib_show_function "$@"
  local path="${1:-}"
  # shellcheck disable=SC2164
  pushd "$path" >/dev/null
}

#######################################
# Simplified command wrapper
#
# Arguments:
#   None
# Outputs:
#   STDOUT: None
#   STDERR: Command error
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_bsh_run_popd() {
  bl64_dbg_lib_show_function
  # shellcheck disable=SC2164
  popd >/dev/null
}

#######################################
# Search for the command in well known locations
#
# Arguments:
#   $1: command name
#   $@: (optional) list of additional paths where to look on
# Outputs:
#   STDOUT: full path
#   STDERR: Error messages
# Returns:
#   0: full path detected
#   >0: unable to detect or error
#######################################
function bl64_bsh_command_locate() {
  bl64_dbg_lib_show_function "$@"
  local command="${1:-}"
  local search_list=''
  local full_path=''
  local current_path=''

  shift
  bl64_check_parameter 'command' ||
    return $?

  search_list+=' /home/linuxbrew/.linuxbrew/bin'
  search_list+=' /opt/homebrew/bin'
  search_list+=' /usr/local/bin'
  search_list+=' /usr/bin'
  search_list+=' /bin'
  search_list+=' /usr/sbin'
  search_list+=' /sbin'

  for current_path in $search_list "${@:-}"; do
    bl64_dbg_lib_show_info "search in: ${current_path}/${command}"
    [[ ! -d "$current_path" ]] && continue
    if [[ -x "${current_path}/${command}" ]]; then
      echo "${current_path}/${command}"
      return 0
    fi
  done
  bl64_check_alert_resource_not_found "$command"
}

#!/usr/bin/env bash
#######################################
# BashLib64 / Bash automation library
#
# Author: serdigital64 (https://github.com/serdigital64)
# Repository: https://github.com/automation64/bashlib64
#
# Copyright 2022 SerDigital64@gmail.com
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#######################################

#######################################
# BashLib64 / Module / Globals / Transfer and Receive data over the network
#######################################

# shellcheck disable=SC2034
{
  declare BL64_RXTX_VERSION='2.4.0'

  declare BL64_RXTX_MODULE='0'

  declare BL64_RXTX_CMD_CURL=''
  declare BL64_RXTX_CMD_WGET=''

  declare BL64_RXTX_ALIAS_CURL=''
  declare BL64_RXTX_ALIAS_WGET=''

  declare BL64_RXTX_SET_CURL_FAIL=''
  declare BL64_RXTX_SET_CURL_HEADER=''
  declare BL64_RXTX_SET_CURL_INCLUDE=''
  declare BL64_RXTX_SET_CURL_OUTPUT=''
  declare BL64_RXTX_SET_CURL_REDIRECT=''
  declare BL64_RXTX_SET_CURL_REQUEST=''
  declare BL64_RXTX_SET_CURL_SECURE=''
  declare BL64_RXTX_SET_CURL_SILENT=''
  declare BL64_RXTX_SET_CURL_VERBOSE=''
  declare BL64_RXTX_SET_WGET_OUTPUT=''
  declare BL64_RXTX_SET_WGET_SECURE=''
  declare BL64_RXTX_SET_WGET_VERBOSE=''

  #
  # GitHub specific parameters
  #

  # Public server
  declare BL64_RXTX_GITHUB_URL='https://github.com'

  declare _BL64_RXTX_TXT_MISSING_COMMAND='no web transfer command was found on the system'
  declare _BL64_RXTX_TXT_EXISTING_DESTINATION='destination path is not empty. No action taken.'
  declare _BL64_RXTX_TXT_CREATION_PROBLEM='unable to create temporary git repo'
  declare _BL64_RXTX_TXT_DOWNLOAD_FILE='download file'
  declare _BL64_RXTX_TXT_ERROR_DOWNLOAD_FILE='file download failed'
  declare _BL64_RXTX_TXT_ERROR_DOWNLOAD_DIR='directory download failed'
}

#######################################
# BashLib64 / Module / Setup / Transfer and Receive data over the network
#######################################

#######################################
# Setup the bashlib64 module
#
# * Warning: bootstrap function
#
# Arguments:
#   None
# Outputs:
#   STDOUT: None
#   STDERR: None
# Returns:
#   0: setup ok
#   >0: setup failed
#######################################
function bl64_rxtx_setup() {
  [[ -z "$BL64_VERSION" ]] &&
    echo 'Error: bashlib64-module-core.bash should the last module to be sourced' &&
    return 21

  # shellcheck disable=SC2034
  bl64_lib_module_imported 'BL64_CHECK_MODULE' &&
    bl64_lib_module_imported 'BL64_DBG_MODULE' &&
    bl64_dbg_lib_show_function &&
    bl64_lib_module_imported 'BL64_OS_MODULE' &&
    bl64_lib_module_imported 'BL64_FS_MODULE' &&
    bl64_lib_module_imported 'BL64_MSG_MODULE' &&
    bl64_lib_module_imported 'BL64_VCS_MODULE' &&
    bl64_lib_module_imported 'BL64_BSH_MODULE' &&
    _bl64_rxtx_set_command &&
    _bl64_rxtx_set_options &&
    _bl64_rxtx_set_alias &&
    BL64_RXTX_MODULE="$BL64_VAR_ON"
  bl64_check_alert_module_setup 'rxtx'
}

#######################################
# Identify and normalize commands
#
# * Commands are exported as variables with full path
# * The caller function is responsible for checking that the target command is present (installed)
# * Warning: bootstrap function
#
# Arguments:
#   None
# Outputs:
#   STDOUT: None
#   STDERR: None
# Returns:
#   0: always ok
#######################################
function _bl64_rxtx_set_command() {
  bl64_dbg_lib_show_function
  case "$BL64_OS_DISTRO" in
  ${BL64_OS_UB}-* | ${BL64_OS_DEB}-* | ${BL64_OS_KL}-*)
    BL64_RXTX_CMD_CURL='/usr/bin/curl'
    BL64_RXTX_CMD_WGET='/usr/bin/wget'
    ;;
  ${BL64_OS_FD}-* | ${BL64_OS_AMZ}-* | ${BL64_OS_CNT}-* | ${BL64_OS_RHEL}-* | ${BL64_OS_ALM}-* | ${BL64_OS_OL}-* | ${BL64_OS_RCK}-*)
    BL64_RXTX_CMD_CURL='/usr/bin/curl'
    BL64_RXTX_CMD_WGET='/usr/bin/wget'
    ;;
  ${BL64_OS_SLES}-*)
    BL64_RXTX_CMD_CURL='/usr/bin/curl'
    BL64_RXTX_CMD_WGET='/usr/bin/wget'
    ;;
  ${BL64_OS_ALP}-*)
    BL64_RXTX_CMD_CURL='/usr/bin/curl'
    BL64_RXTX_CMD_WGET='/usr/bin/wget'
    ;;
  ${BL64_OS_MCOS}-*)
    BL64_RXTX_CMD_CURL='/usr/bin/curl'
    BL64_RXTX_CMD_WGET="$BL64_VAR_INCOMPATIBLE"
    ;;
  *) bl64_check_alert_unsupported ;;
  esac
}

#######################################
# Create command sets for common options
#
# * Warning: bootstrap function
#
# Arguments:
#   None
# Outputs:
#   STDOUT: None
#   STDERR: None
# Returns:
#   0: always ok
#######################################
function _bl64_rxtx_set_options() {
  bl64_dbg_lib_show_function
  # shellcheck disable=SC2034
  case "$BL64_OS_DISTRO" in
  ${BL64_OS_UB}-18.* | ${BL64_OS_DEB}-9.* | ${BL64_OS_DEB}-10.*)
    BL64_RXTX_SET_CURL_FAIL='--fail'
    BL64_RXTX_SET_CURL_HEADER='-H'
    BL64_RXTX_SET_CURL_INCLUDE='--include'
    BL64_RXTX_SET_CURL_OUTPUT='--output'
    BL64_RXTX_SET_CURL_NO_PROGRESS=' '
    BL64_RXTX_SET_CURL_REDIRECT='--location'
    BL64_RXTX_SET_CURL_REQUEST='-X'
    BL64_RXTX_SET_CURL_SECURE='--config /dev/null'
    BL64_RXTX_SET_CURL_SILENT='--silent'
    BL64_RXTX_SET_CURL_VERBOSE='--verbose'
    BL64_RXTX_SET_WGET_OUTPUT='--output-document'
    BL64_RXTX_SET_WGET_SECURE='--no-config'
    BL64_RXTX_SET_WGET_VERBOSE='--verbose'
    ;;
  ${BL64_OS_UB}-* | ${BL64_OS_DEB}-* | ${BL64_OS_KL}-*)
    BL64_RXTX_SET_CURL_FAIL='--fail'
    BL64_RXTX_SET_CURL_HEADER='-H'
    BL64_RXTX_SET_CURL_INCLUDE='--include'
    BL64_RXTX_SET_CURL_OUTPUT='--output'
    BL64_RXTX_SET_CURL_NO_PROGRESS='--no-progress-meter'
    BL64_RXTX_SET_CURL_REDIRECT='--location'
    BL64_RXTX_SET_CURL_REQUEST='-X'
    BL64_RXTX_SET_CURL_SECURE='--config /dev/null'
    BL64_RXTX_SET_CURL_SILENT='--silent'
    BL64_RXTX_SET_CURL_VERBOSE='--verbose'
    BL64_RXTX_SET_WGET_OUTPUT='--output-document'
    BL64_RXTX_SET_WGET_SECURE='--no-config'
    BL64_RXTX_SET_WGET_VERBOSE='--verbose'
    ;;
  ${BL64_OS_FD}-* | ${BL64_OS_AMZ}-*)
    BL64_RXTX_SET_CURL_FAIL='--fail'
    BL64_RXTX_SET_CURL_HEADER='-H'
    BL64_RXTX_SET_CURL_INCLUDE='--include'
    BL64_RXTX_SET_CURL_OUTPUT='--output'
    BL64_RXTX_SET_CURL_NO_PROGRESS='--no-progress-meter'
    BL64_RXTX_SET_CURL_REDIRECT='--location'
    BL64_RXTX_SET_CURL_REQUEST='-X'
    BL64_RXTX_SET_CURL_SECURE='--config /dev/null'
    BL64_RXTX_SET_CURL_SILENT='--silent'
    BL64_RXTX_SET_CURL_VERBOSE='--verbose'
    BL64_RXTX_SET_WGET_OUTPUT='--output-document'
    BL64_RXTX_SET_WGET_SECURE='--no-config'
    BL64_RXTX_SET_WGET_VERBOSE='--verbose'
    ;;
  ${BL64_OS_CNT}-* | ${BL64_OS_RHEL}-* | ${BL64_OS_ALM}-* | ${BL64_OS_OL}-* | ${BL64_OS_RCK}-*)
    BL64_RXTX_SET_CURL_FAIL='--fail'
    BL64_RXTX_SET_CURL_HEADER='-H'
    BL64_RXTX_SET_CURL_INCLUDE='--include'
    BL64_RXTX_SET_CURL_OUTPUT='--output'
    BL64_RXTX_SET_CURL_NO_PROGRESS=' '
    BL64_RXTX_SET_CURL_REDIRECT='--location'
    BL64_RXTX_SET_CURL_REQUEST='-X'
    BL64_RXTX_SET_CURL_SECURE='--config /dev/null'
    BL64_RXTX_SET_CURL_SILENT='--silent'
    BL64_RXTX_SET_CURL_VERBOSE='--verbose'
    BL64_RXTX_SET_WGET_OUTPUT='--output-document'
    BL64_RXTX_SET_WGET_SECURE='--no-config'
    BL64_RXTX_SET_WGET_VERBOSE='--verbose'
    ;;
  ${BL64_OS_SLES}-*)
    BL64_RXTX_SET_CURL_FAIL='--fail'
    BL64_RXTX_SET_CURL_HEADER='-H'
    BL64_RXTX_SET_CURL_INCLUDE='--include'
    BL64_RXTX_SET_CURL_OUTPUT='--output'
    BL64_RXTX_SET_CURL_NO_PROGRESS=' '
    BL64_RXTX_SET_CURL_REDIRECT='--location'
    BL64_RXTX_SET_CURL_REQUEST='-X'
    BL64_RXTX_SET_CURL_SECURE='--config /dev/null'
    BL64_RXTX_SET_CURL_SILENT='--silent'
    BL64_RXTX_SET_CURL_VERBOSE='--verbose'
    BL64_RXTX_SET_WGET_OUTPUT='--output-document'
    BL64_RXTX_SET_WGET_SECURE='--no-config'
    BL64_RXTX_SET_WGET_VERBOSE='--verbose'
    ;;
  ${BL64_OS_ALP}-*)
    BL64_RXTX_SET_CURL_FAIL='--fail'
    BL64_RXTX_SET_CURL_HEADER='-H'
    BL64_RXTX_SET_CURL_INCLUDE='--include'
    BL64_RXTX_SET_CURL_OUTPUT='--output'
    BL64_RXTX_SET_CURL_NO_PROGRESS=' '
    BL64_RXTX_SET_CURL_REDIRECT='--location'
    BL64_RXTX_SET_CURL_REQUEST='-X'
    BL64_RXTX_SET_CURL_SECURE='--config /dev/null'
    BL64_RXTX_SET_CURL_SILENT='--silent'
    BL64_RXTX_SET_CURL_VERBOSE='--verbose'
    BL64_RXTX_SET_WGET_OUTPUT='-O'
    BL64_RXTX_SET_WGET_SECURE=' '
    BL64_RXTX_SET_WGET_VERBOSE='--verbose'
    ;;
  ${BL64_OS_MCOS}-*)
    BL64_RXTX_SET_CURL_FAIL='--fail'
    BL64_RXTX_SET_CURL_HEADER='-H'
    BL64_RXTX_SET_CURL_INCLUDE='--include'
    BL64_RXTX_SET_CURL_OUTPUT='--output'
    BL64_RXTX_SET_CURL_NO_PROGRESS='--no-progress-meter'
    BL64_RXTX_SET_CURL_REDIRECT='--location'
    BL64_RXTX_SET_CURL_REQUEST='-X'
    BL64_RXTX_SET_CURL_SECURE='--config /dev/null'
    BL64_RXTX_SET_CURL_SILENT='--silent'
    BL64_RXTX_SET_CURL_VERBOSE='--verbose'
    BL64_RXTX_SET_WGET_OUTPUT=' '
    BL64_RXTX_SET_WGET_SECURE=' '
    BL64_RXTX_SET_WGET_VERBOSE=' '
    ;;
  *) bl64_check_alert_unsupported ;;
  esac
}

#######################################
# Create command aliases for common use cases
#
# * Aliases are presented as regular shell variables for easy inclusion in complex commands
# * Use the alias without quotes, otherwise the shell will interprete spaces as part of the command
# * Warning: bootstrap function
#
# Arguments:
#   None
# Outputs:
#   STDOUT: None
#   STDERR: None
# Returns:
#   0: always ok
#######################################
function _bl64_rxtx_set_alias() {
  bl64_dbg_lib_show_function
  # shellcheck disable=SC2034
  case "$BL64_OS_DISTRO" in
  ${BL64_OS_UB}-* | ${BL64_OS_DEB}-* | ${BL64_OS_KL}-*)
    BL64_RXTX_ALIAS_CURL="$BL64_RXTX_CMD_CURL ${BL64_RXTX_SET_CURL_SECURE}"
    BL64_RXTX_ALIAS_WGET="$BL64_RXTX_CMD_WGET ${BL64_RXTX_SET_WGET_SECURE}"
    ;;
  ${BL64_OS_FD}-* | ${BL64_OS_AMZ}-* | ${BL64_OS_CNT}-* | ${BL64_OS_RHEL}-* | ${BL64_OS_ALM}-* | ${BL64_OS_OL}-* | ${BL64_OS_RCK}-*)
    BL64_RXTX_ALIAS_CURL="$BL64_RXTX_CMD_CURL ${BL64_RXTX_SET_CURL_SECURE}"
    BL64_RXTX_ALIAS_WGET="$BL64_RXTX_CMD_WGET ${BL64_RXTX_SET_WGET_SECURE}"
    ;;
  ${BL64_OS_SLES}-*)
    BL64_RXTX_ALIAS_CURL="$BL64_RXTX_CMD_CURL ${BL64_RXTX_SET_CURL_SECURE}"
    BL64_RXTX_ALIAS_WGET="$BL64_RXTX_CMD_WGET ${BL64_RXTX_SET_WGET_SECURE}"
    ;;
  ${BL64_OS_ALP}-*)
    BL64_RXTX_ALIAS_CURL="$BL64_RXTX_CMD_CURL ${BL64_RXTX_SET_CURL_SECURE}"
    BL64_RXTX_ALIAS_WGET="$BL64_RXTX_CMD_WGET ${BL64_RXTX_SET_WGET_SECURE}"
    ;;
  ${BL64_OS_MCOS}-*)
    BL64_RXTX_ALIAS_CURL="$BL64_RXTX_CMD_CURL ${BL64_RXTX_SET_CURL_SECURE}"
    BL64_RXTX_ALIAS_WGET=''
    ;;
  *) bl64_check_alert_unsupported ;;
  esac
}

#######################################
# BashLib64 / Module / Functions / Transfer and Receive data over the network
#######################################

#######################################
# Pull data from web server
#
# * If the destination is already present no update is done unless $3=$BL64_VAR_ON
#
# Arguments:
#   $1: Source URL
#   $2: Full path to the destination file
#   $3: replace existing file. Values: $BL64_VAR_ON | $BL64_VAR_OFF (default)
#   $4: file permissions. Format: chown format. Default: use current umask
#   $5: file user name. Default: current
#   $6: file group name. Default: current
# Outputs:
#   STDOUT: None unless BL64_DBG_TARGET_LIB_CMD
#   STDERR: command error
# Returns:
#   BL64_LIB_ERROR_APP_MISSING
#   command error status
#######################################
function bl64_rxtx_web_get_file() {
  bl64_dbg_lib_show_function "$@"
  local source="$1"
  local destination="$2"
  local replace="${3:-${BL64_VAR_DEFAULT}}"
  local file_mode="${4:-${BL64_VAR_DEFAULT}}"
  local file_user="${5:-${BL64_VAR_DEFAULT}}"
  local file_group="${6:-${BL64_VAR_DEFAULT}}"
  local -i status=0

  bl64_check_module 'BL64_RXTX_MODULE' &&
    bl64_check_parameter 'source' &&
    bl64_check_parameter 'destination' &&
    bl64_fs_check_new_file "$destination" ||
    return $?

  bl64_check_overwrite_skip "$destination" "$replace" && return

  bl64_fs_safeguard "$destination" >/dev/null || return $?

  bl64_msg_show_lib_subtask "$_BL64_RXTX_TXT_DOWNLOAD_FILE (${source})"
  # shellcheck disable=SC2086
  if [[ -x "$BL64_RXTX_CMD_CURL" ]]; then
    bl64_rxtx_run_curl \
      $BL64_RXTX_SET_CURL_FAIL \
      $BL64_RXTX_SET_CURL_REDIRECT \
      $BL64_RXTX_SET_CURL_OUTPUT "$destination" \
      "$source"
    status=$?
  elif [[ -x "$BL64_RXTX_CMD_WGET" ]]; then
    bl64_rxtx_run_wget \
      $BL64_RXTX_SET_WGET_OUTPUT "$destination" \
      "$source"
    status=$?
  else
    bl64_msg_show_error "$_BL64_RXTX_TXT_MISSING_COMMAND (wget or curl)" &&
      return $BL64_LIB_ERROR_APP_MISSING
  fi

  if (( status != 0 )); then
    bl64_msg_show_error "$_BL64_RXTX_TXT_ERROR_DOWNLOAD_FILE"
  else
    bl64_fs_path_permission_set "$file_mode" "$BL64_VAR_DEFAULT" "$file_user" "$file_group" "$BL64_VAR_OFF" "$destination"
    status=$?
  fi

  bl64_fs_restore "$destination" "$status" || return $?
  return $status
}

#######################################
# Pull directory contents from git repo
#
# * Content of source path is downloaded into destination (source_path/* --> destionation/). Source path itself is not created
# * If the destination is already present no update is done unless $4=$BL64_VAR_ON
# * If asked to replace destination, temporary backup is done in case git fails by moving the destination to a temp name
# * Warning: git repo info is removed after pull (.git)
#
# Arguments:
#   $1: URL to the GIT repository
#   $2: source path. Format: relative to the repo URL. Use '.' to download the full repo
#   $3: destination path. Format: full path
#   $4: replace existing content. Values: $BL64_VAR_ON | $BL64_VAR_OFF (default)
#   $5: branch name. Default: main
# Outputs:
#   STDOUT: command stdout
#   STDERR: command error
# Returns:
#   0: operation OK
#   BL64_LIB_ERROR_TASK_TEMP
#   command error status
#######################################
function bl64_rxtx_git_get_dir() {
  bl64_dbg_lib_show_function "$@"
  local source_url="${1}"
  local source_path="${2}"
  local destination="${3}"
  local replace="${4:-${BL64_VAR_DEFAULT}}"
  local branch="${5:-main}"
  local -i status=0

  bl64_check_module 'BL64_RXTX_MODULE' &&
    bl64_check_parameter 'source_url' &&
    bl64_check_parameter 'source_path' &&
    bl64_check_parameter 'destination' &&
    bl64_check_path_relative "$source_path" &&
    bl64_fs_check_new_dir "$destination" ||
    return $?

  # shellcheck disable=SC2086
  bl64_check_overwrite_skip "$destination" "$replace" && return $?
  bl64_fs_safeguard "$destination" || return $?

  bl64_msg_show_lib_subtask "clone source repository (${source_url})"
  if [[ "$source_path" == '.' || "$source_path" == './' ]]; then
    _bl64_rxtx_git_get_dir_root "$source_url" "$destination" "$branch"
  else
    _bl64_rxtx_git_get_dir_sub "$source_url" "$source_path" "$destination" "$branch"
  fi
  status=$?
  (( status != 0 )) && bl64_msg_show_error "$_BL64_RXTX_TXT_ERROR_DOWNLOAD_DIR"

  if [[ "$status" == '0' && -d "${destination}/.git" ]]; then
    bl64_msg_show_lib_subtask "remove git metadata (${destination}/.git)"
    # shellcheck disable=SC2164
    bl64_bsh_run_pushd "$destination" || return $?
    bl64_fs_rm_full '.git' >/dev/null
    bl64_bsh_run_popd
  fi

  bl64_fs_restore "$destination" "$status" || return $?
  return $status
}

#######################################
# Command wrapper with verbose, debug and common options
#
# * verbose is not implemented to avoid unintentional alteration of output when using for APIs
#
# Arguments:
#   $@: arguments are passed as-is to the command
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_rxtx_run_curl() {
  bl64_dbg_lib_show_function "$@"
  local debug="$BL64_RXTX_SET_CURL_SILENT"

  bl64_check_parameters_none "$#" &&
    bl64_check_module 'BL64_RXTX_MODULE' &&
    bl64_check_command "$BL64_RXTX_CMD_CURL" || return $?

  bl64_msg_lib_verbose_enabled && debug=''
  bl64_dbg_lib_command_enabled && debug="$BL64_RXTX_SET_CURL_VERBOSE"

  bl64_dbg_lib_trace_start
  # shellcheck disable=SC2086
  "$BL64_RXTX_CMD_CURL" \
    $BL64_RXTX_SET_CURL_SECURE \
    $debug \
    "$@"
  bl64_dbg_lib_trace_stop
}

#######################################
# Command wrapper with verbose, debug and common options
#
# Arguments:
#   $@: arguments are passed as-is to the command
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_rxtx_run_wget() {
  bl64_dbg_lib_show_function "$@"
  local verbose=''

  bl64_check_parameters_none "$#" &&
    bl64_check_module 'BL64_RXTX_MODULE' &&
    bl64_check_command "$BL64_RXTX_CMD_WGET" || return $?

  bl64_dbg_lib_command_enabled && verbose="$BL64_RXTX_SET_WGET_VERBOSE"

  bl64_dbg_lib_trace_start
  # shellcheck disable=SC2086
  "$BL64_RXTX_CMD_WGET" \
    $verbose \
    "$@"
  bl64_dbg_lib_trace_stop
}

function _bl64_rxtx_git_get_dir_root() {
  bl64_dbg_lib_show_function "$@"
  local source_url="${1}"
  local destination="${2}"
  local branch="${3:-main}"
  local -i status=0
  local repo=''
  local git_name=''
  local transition=''

  bl64_check_module 'BL64_RXTX_MODULE' || return $?

  repo="$($BL64_FS_ALIAS_MKTEMP_DIR)"
  bl64_check_directory "$repo" "$_BL64_RXTX_TXT_CREATION_PROBLEM" || return $BL64_LIB_ERROR_TASK_TEMP

  git_name="$(bl64_fmt_basename "$source_url")"
  git_name="${git_name/.git/}"
  transition="${repo}/${git_name}"
  bl64_dbg_lib_show_vars 'git_name' 'transition'

  bl64_dbg_lib_show_comments 'Clone the repo'
  bl64_vcs_git_clone "$source_url" "$repo" "$branch" &&
    bl64_dbg_lib_show_info 'promote to destination' &&
    bl64_fs_run_mv "$transition" "$destination"
  status=$?

  [[ -d "$repo" ]] && bl64_fs_rm_full "$repo" >/dev/null
  return $status
}

function _bl64_rxtx_git_get_dir_sub() {
  bl64_dbg_lib_show_function "$@"
  local source_url="${1}"
  local source_path="${2}"
  local destination="${3}"
  local branch="${4:-main}"
  local -i status=0
  local repo=''
  local target=''
  local source=''
  local transition=''

  bl64_check_module 'BL64_RXTX_MODULE' || return $?

  repo="$($BL64_FS_ALIAS_MKTEMP_DIR)"
  # shellcheck disable=SC2086
  bl64_check_directory "$repo" "$_BL64_RXTX_TXT_CREATION_PROBLEM" || return $BL64_LIB_ERROR_TASK_TEMP

  bl64_dbg_lib_show_comments 'Use transition path to get to the final target path'
  source="${repo}/${source_path}"
  target="$(bl64_fmt_basename "$destination")"
  transition="${repo}/transition/${target}"
  bl64_dbg_lib_show_vars 'source' 'target' 'transition'

  bl64_vcs_git_sparse "$source_url" "$repo" "$branch" "$source_path" &&
    [[ -d "$source" ]] &&
    bl64_fs_mkdir_full "${repo}/transition" &&
    bl64_fs_run_mv "$source" "$transition" >/dev/null &&
    bl64_fs_run_mv "${transition}" "$destination" >/dev/null
  status=$?

  [[ -d "$repo" ]] && bl64_fs_rm_full "$repo" >/dev/null
  return $status
}

#######################################
# Download file asset from release in github repository
#
# Arguments:
#   $1: repo owner
#   $2: repo name
#   $3: release tag. Use $BL64_VCS_GITHUB_LATEST (latest) to obtain latest version
#   $4: asset name: file name available in the target release
#   $5: destination
#   $6: replace existing content Values: $BL64_VAR_ON | $BL64_VAR_OFF (default)
#   $7: permissions. Regular chown format accepted. Default: umask defined
# Outputs:
#   STDOUT: none
#   STDERR: task error
# Returns:
#   0: success
#   >0: error
#######################################
function bl64_rxtx_github_get_asset() {
  bl64_dbg_lib_show_function "$@"
  local repo_owner="$1"
  local repo_name="$2"
  local release_tag="$3"
  local asset_name="$4"
  local destination="$5"
  local replace="${6:-${BL64_VAR_OFF}}"
  local mode="${7:-${BL64_VAR_DEFAULT}}"

  bl64_check_module 'BL64_RXTX_MODULE' &&
    bl64_check_parameter 'repo_owner' &&
    bl64_check_parameter 'repo_name' &&
    bl64_check_parameter 'release_tag' &&
    bl64_check_parameter 'asset_name' &&
    bl64_check_parameter 'destination' ||
    return $?

  if [[ "$release_tag" == "$BL64_VCS_GITHUB_LATEST" ]]; then
    release_tag="$(bl64_vcs_github_release_get_latest "$repo_owner" "$repo_name")" ||
      return $?
  fi

  bl64_rxtx_web_get_file \
    "${BL64_RXTX_GITHUB_URL}/${repo_owner}/${repo_name}/releases/download/${release_tag}/${asset_name}" \
    "$destination" "$replace" "$mode"
}

#!/usr/bin/env bash
#######################################
# BashLib64 / Bash automation library
#
# Author: serdigital64 (https://github.com/serdigital64)
# Repository: https://github.com/automation64/bashlib64
#
# Copyright 2022 SerDigital64@gmail.com
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#######################################

#######################################
# BashLib64 / Module / Globals / Interact with RESTful APIs
#######################################

# shellcheck disable=SC2034
{
  declare BL64_API_VERSION='2.1.0'

  declare BL64_API_MODULE='0'

  #
  # Common constants
  #

  declare BL64_API_METHOD_DELETE='DELETE'
  declare BL64_API_METHOD_GET='GET'
  declare BL64_API_METHOD_POST='POST'
  declare BL64_API_METHOD_PUT='PUT'
}

#######################################
# BashLib64 / Module / Setup / Interact with RESTful APIs
#######################################

#######################################
# Setup the bashlib64 module
#
# * Warning: bootstrap function
#
# Arguments:
#   None
# Outputs:
#   STDOUT: None
#   STDERR: None
# Returns:
#   0: setup ok
#   >0: setup failed
#######################################
function bl64_api_setup() {
  [[ -z "$BL64_VERSION" ]] &&
    echo 'Error: bashlib64-module-core.bash should the last module to be sourced' &&
    return 21

  # shellcheck disable=SC2034
  bl64_lib_module_imported 'BL64_CHECK_MODULE' &&
    bl64_lib_module_imported 'BL64_DBG_MODULE' &&
    bl64_dbg_lib_show_function &&
    bl64_lib_module_imported 'BL64_TXT_MODULE' &&
    bl64_lib_module_imported 'BL64_RXTX_MODULE' &&
    BL64_API_MODULE="$BL64_VAR_ON"
  bl64_check_alert_module_setup 'api'
}

#######################################
# BashLib64 / Module / Functions / Interact with RESTful APIs
#######################################

#######################################
# Call RESTful API using Curl
#
# * API calls are executed using Curl
# * Curl is used directly instead of the wrapper to minimize shell expansion unintented modifications
# * The caller is responsible for properly url-encoding the query when needed
# * Using curl --fail option to capture HTTP errors
#
# Arguments:
#   $1: API server FQDN. Format: PROTOCOL://FQDN
#   $2: API path. Format: Full path (/X/Y/Z)
#   $3: RESTful method. Format: $BL64_API_METHOD_*. Default: $BL64_API_METHOD_GET
#   $4: API query to be appended to the API path. Format: url encoded string. Default: none
#   $@: additional arguments are passed as-is to the command
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: API call executed. Warning: curl exit status only, not the HTTP status code
#   >: API call failed or unable to call API
#######################################
function bl64_api_call() {
  bl64_dbg_lib_show_function "$@"
  local api_url="$1"
  local api_path="$2"
  local api_method="${3:-${BL64_API_METHOD_GET}}"
  local api_query="${4:-${BL64_VAR_NULL}}"
  local debug="$BL64_RXTX_SET_CURL_SILENT"
  local -i status=0

  bl64_check_module 'BL64_RXTX_MODULE' &&
    bl64_check_command "$BL64_RXTX_CMD_CURL" &&
    bl64_check_parameter 'api_url' &&
    bl64_check_parameter 'api_path' || return $?

  [[ "$api_query" == "${BL64_VAR_NULL}" ]] && api_query=''
  shift
  shift
  shift
  shift

  bl64_dbg_lib_command_enabled && debug="${BL64_RXTX_SET_CURL_VERBOSE} ${BL64_RXTX_SET_CURL_INCLUDE}"
  bl64_dbg_lib_trace_start
  # shellcheck disable=SC2086
  "$BL64_RXTX_CMD_CURL" \
    $BL64_RXTX_SET_CURL_FAIL \
    $BL64_RXTX_SET_CURL_REDIRECT \
    $BL64_RXTX_SET_CURL_SECURE \
    $BL64_RXTX_SET_CURL_REQUEST ${api_method} \
    $debug \
    "${api_url}${api_path}${api_query}" \
    "$@"
  bl64_dbg_lib_trace_stop
  status=$?
  ((status != 0)) && bl64_msg_show_error "API call failed (${api_url}${api_path})"
  return $status
}

#######################################
# Converts ASCII-127 string to URL compatible format
#
# * Target is the QUERY segment of the URL:
# *   PROTOCOL://FQDN/QUERY
# * Conversion is done using sed
# * Input is assumed to be encoded in ASCII-127
# * Conversion is done as per RFC3986
# *  unreserved: left as is
# *  reserved: converted
# *  remaining ascii-127 non-control chars: converted
# * Warning: sed regexp is not consistent across versions and vendors. Using [] when \ is not possible to scape special chars
#
# Arguments:
#   $1: String to convert. Must be terminated by \n
# Outputs:
#   STDOUT: encoded string
#   STDERR: execution errors
# Returns:
#   0: successfull execution
#   >0: failed to convert
#######################################
function bl64_api_url_encode() {
  bl64_dbg_lib_show_function "$@"
  local raw_string="$1"

  bl64_check_parameter 'raw_string' || return $?

  echo "$raw_string" |
    bl64_txt_run_sed \
      -e 's/%/%25/g' \
      -e 's/ /%20/g' \
      -e 's/:/%3A/g' \
      -e 's/\//%2F/g' \
      -e 's/[?]/%3F/g' \
      -e 's/#/%23/g' \
      -e 's/@/%40/g' \
      -e 's/\[/%5B/g' \
      -e 's/\]/%5D/g' \
      -e 's/\!/%21/g' \
      -e 's/\$/%24/g' \
      -e 's/&/%26/g' \
      -e "s/'/%27/g" \
      -e 's/[(]/%28/g' \
      -e 's/[)]/%29/g' \
      -e 's/\*/%2A/g' \
      -e 's/[+]/%2B/g' \
      -e 's/,/%2C/g' \
      -e 's/;/%3B/g' \
      -e 's/=/%3D/g' \
      -e 's/"/%22/g' \
      -e 's/</%3C/g' \
      -e 's/>/%3E/g' \
      -e 's/\^/%5E/g' \
      -e 's/`/%60/g' \
      -e 's/{/%7B/g' \
      -e 's/}/%7D/g' \
      -e 's/[|]/%7C/g' \
      -e 's/[\]/%5C/g'
}

#!/usr/bin/env bash
#######################################
# BashLib64 / Bash automation library
#
# Author: serdigital64 (https://github.com/serdigital64)
# Repository: https://github.com/automation64/bashlib64
#
# Copyright 2022 SerDigital64@gmail.com
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#######################################

#######################################
# BashLib64 / Module / Globals / Manipulate text files content
#######################################

# shellcheck disable=SC2034
{
  declare BL64_TXT_VERSION='2.2.0'

  declare BL64_TXT_MODULE='0'

  declare BL64_TXT_CMD_AWK_POSIX="$BL64_VAR_UNAVAILABLE"
  declare BL64_TXT_CMD_AWK="$BL64_VAR_UNAVAILABLE"
  declare BL64_TXT_CMD_BASE64="$BL64_VAR_UNAVAILABLE"
  declare BL64_TXT_CMD_CUT="$BL64_VAR_UNAVAILABLE"
  declare BL64_TXT_CMD_ENVSUBST="$BL64_VAR_UNAVAILABLE"
  declare BL64_TXT_CMD_GAWK="$BL64_VAR_UNAVAILABLE"
  declare BL64_TXT_CMD_GREP="$BL64_VAR_UNAVAILABLE"
  declare BL64_TXT_CMD_SED="$BL64_VAR_UNAVAILABLE"
  declare BL64_TXT_CMD_SORT="$BL64_VAR_UNAVAILABLE"
  declare BL64_TXT_CMD_TR="$BL64_VAR_UNAVAILABLE"
  declare BL64_TXT_CMD_UNIQ="$BL64_VAR_UNAVAILABLE"

  declare BL64_TXT_SET_AWK_POSIX=''
  declare BL64_TXT_SET_GREP_ERE="$BL64_VAR_UNAVAILABLE"
  declare BL64_TXT_SET_GREP_INVERT="$BL64_VAR_UNAVAILABLE"
  declare BL64_TXT_SET_GREP_NO_CASE="$BL64_VAR_UNAVAILABLE"
  declare BL64_TXT_SET_GREP_QUIET="$BL64_VAR_UNAVAILABLE"
  declare BL64_TXT_SET_GREP_SHOW_FILE_ONLY="$BL64_VAR_UNAVAILABLE"
  declare BL64_TXT_SET_GREP_STDIN="$BL64_VAR_UNAVAILABLE"
  declare BL64_TXT_SET_SED_EXPRESSION="$BL64_VAR_UNAVAILABLE"

  declare BL64_TXT_SET_AWS_FS="$BL64_VAR_UNAVAILABLE"

  declare BL64_TXT_FLAG_STDIN='STDIN'
}

#######################################
# BashLib64 / Module / Setup / Manipulate text files content
#######################################

#######################################
# Setup the bashlib64 module
#
# * Warning: bootstrap function
#
# Arguments:
#   None
# Outputs:
#   STDOUT: None
#   STDERR: None
# Returns:
#   0: setup ok
#   >0: setup failed
#######################################
function bl64_txt_setup() {
  [[ -z "$BL64_VERSION" ]] &&
    echo 'Error: bashlib64-module-core.bash should the last module to be sourced' &&
    return 21

  # shellcheck disable=SC2034
  bl64_lib_module_imported 'BL64_CHECK_MODULE' &&
    bl64_lib_module_imported 'BL64_DBG_MODULE' &&
    bl64_dbg_lib_show_function &&
    bl64_lib_module_imported 'BL64_OS_MODULE' &&
    _bl64_txt_set_command &&
    _bl64_txt_set_options &&
    BL64_TXT_MODULE="$BL64_VAR_ON"
  bl64_check_alert_module_setup 'txt'
}

#######################################
# Identify and normalize common *nix OS commands
#
# * Commands are exported as variables with full path
# * For AWK the function will determine the best option to match posix awk
# * Warning: bootstrap function
# * AWS: provide legacy AWS, posix AWS and modern AWS when available
#
# Arguments:
#   None
# Outputs:
#   STDOUT: None
#   STDERR: None
# Returns:
#   0: always ok, even when the OS is not supported
#######################################
# Warning: bootstrap function
function _bl64_txt_set_command() {
  bl64_dbg_lib_show_function

  # shellcheck disable=SC2034
  case "$BL64_OS_DISTRO" in
  ${BL64_OS_UB}-* | ${BL64_OS_DEB}-* | ${BL64_OS_KL}-*)
    BL64_TXT_CMD_AWK='/usr/bin/awk'
    BL64_TXT_CMD_BASE64='/usr/bin/base64'
    BL64_TXT_CMD_CUT='/usr/bin/cut'
    BL64_TXT_CMD_ENVSUBST='/usr/bin/envsubst'
    BL64_TXT_CMD_GAWK='/usr/bin/gawk'
    BL64_TXT_CMD_GREP='/bin/grep'
    BL64_TXT_CMD_SED='/bin/sed'
    BL64_TXT_CMD_SORT='/usr/bin/sort'
    BL64_TXT_CMD_TR='/usr/bin/tr'
    BL64_TXT_CMD_UNIQ='/usr/bin/uniq'

    if [[ -x '/usr/bin/gawk' ]]; then
      BL64_TXT_CMD_AWK_POSIX='/usr/bin/gawk'
    elif [[ -x '/usr/bin/mawk' ]]; then
      BL64_TXT_CMD_AWK_POSIX='/usr/bin/mawk'
    fi
    ;;
  ${BL64_OS_FD}-* | ${BL64_OS_AMZ}-* | ${BL64_OS_CNT}-* | ${BL64_OS_RHEL}-* | ${BL64_OS_ALM}-* | ${BL64_OS_OL}-* | ${BL64_OS_RCK}-*)
    BL64_TXT_CMD_AWK='/usr/bin/awk'
    BL64_TXT_CMD_BASE64='/usr/bin/base64'
    BL64_TXT_CMD_CUT='/usr/bin/cut'
    BL64_TXT_CMD_ENVSUBST='/usr/bin/envsubst'
    BL64_TXT_CMD_GAWK='/usr/bin/gawk'
    BL64_TXT_CMD_GREP='/usr/bin/grep'
    BL64_TXT_CMD_SED='/usr/bin/sed'
    BL64_TXT_CMD_SORT='/usr/bin/sort'
    BL64_TXT_CMD_TR='/usr/bin/tr'
    BL64_TXT_CMD_UNIQ='/usr/bin/uniq'

    BL64_TXT_CMD_AWK_POSIX='/usr/bin/gawk'
    ;;
  ${BL64_OS_SLES}-*)
    BL64_TXT_CMD_AWK='/usr/bin/gawk'
    BL64_TXT_CMD_BASE64='/usr/bin/base64'
    BL64_TXT_CMD_CUT='/usr/bin/cut'
    BL64_TXT_CMD_ENVSUBST='/usr/bin/envsubst'
    BL64_TXT_CMD_GAWK='/usr/bin/gawk'
    BL64_TXT_CMD_GREP='/usr/bin/grep'
    BL64_TXT_CMD_SED='/usr/bin/sed'
    BL64_TXT_CMD_SORT='/usr/bin/sort'
    BL64_TXT_CMD_TR='/usr/bin/tr'
    BL64_TXT_CMD_UNIQ='/usr/bin/uniq'

    BL64_TXT_CMD_AWK_POSIX='/usr/bin/gawk'
    ;;
  ${BL64_OS_ALP}-*)
    BL64_TXT_CMD_AWK='/usr/bin/awk'
    BL64_TXT_CMD_BASE64='/bin/base64'
    BL64_TXT_CMD_CUT='/usr/bin/cut'
    BL64_TXT_CMD_ENVSUBST='/usr/bin/envsubst'
    BL64_TXT_CMD_GAWK='/usr/bin/gawk'
    BL64_TXT_CMD_GREP='/bin/grep'
    BL64_TXT_CMD_SED='/bin/sed'
    BL64_TXT_CMD_SORT='/usr/bin/sort'
    BL64_TXT_CMD_TR='/usr/bin/tr'
    BL64_TXT_CMD_UNIQ='/usr/bin/uniq'

    if [[ -x '/usr/bin/gawk' ]]; then
      BL64_TXT_CMD_AWK_POSIX='/usr/bin/gawk'
    else
      bl64_dbg_show_comment 'no GAWK present. AWK bundled with busybox is not posix compliant'
    fi
    ;;
  ${BL64_OS_MCOS}-*)
    BL64_TXT_CMD_AWK='/usr/bin/awk'
    BL64_TXT_CMD_BASE64='/usr/bin/base64'
    BL64_TXT_CMD_CUT='/usr/bin/cut'
    BL64_TXT_CMD_ENVSUBST='/opt/homebrew/bin/envsubst'
    BL64_TXT_CMD_GAWK="$BL64_VAR_UNAVAILABLE"
    BL64_TXT_CMD_GREP='/usr/bin/grep'
    BL64_TXT_CMD_SED='/usr/bin/sed'
    BL64_TXT_CMD_SORT='/usr/bin/sort'
    BL64_TXT_CMD_TR='/usr/bin/tr'
    BL64_TXT_CMD_UNIQ='/usr/bin/uniq'

    BL64_TXT_CMD_AWK_POSIX='/usr/bin/awk'
    ;;
  *) bl64_check_alert_unsupported ;;
  esac
}

#######################################
# Create command sets for common options
#
# Arguments:
#   None
# Outputs:
#   STDOUT: None
#   STDERR: None
# Returns:
#   0: always ok
#######################################
function _bl64_txt_set_options() {
  bl64_dbg_lib_show_function

  # shellcheck disable=SC2034
  case "$BL64_OS_DISTRO" in
  ${BL64_OS_UB}-* | ${BL64_OS_DEB}-* | ${BL64_OS_KL}-*)
    BL64_TXT_SET_AWS_FS='-F'
    BL64_TXT_SET_GREP_ERE='-E'
    BL64_TXT_SET_GREP_INVERT='-v'
    BL64_TXT_SET_GREP_NO_CASE='-i'
    BL64_TXT_SET_GREP_QUIET='--quiet'
    BL64_TXT_SET_GREP_SHOW_FILE_ONLY='-l'
    BL64_TXT_SET_GREP_STDIN='-'
    BL64_TXT_SET_SED_EXPRESSION='-e'

    if [[ -x '/usr/bin/gawk' ]]; then
      BL64_TXT_SET_AWK_POSIX='--posix'
    fi
    ;;
  ${BL64_OS_FD}-* | ${BL64_OS_AMZ}-* | ${BL64_OS_CNT}-* | ${BL64_OS_RHEL}-* | ${BL64_OS_ALM}-* | ${BL64_OS_OL}-* | ${BL64_OS_RCK}-*)
    BL64_TXT_SET_AWK_POSIX='--posix'
    BL64_TXT_SET_AWS_FS='-F'
    BL64_TXT_SET_GREP_ERE='-E'
    BL64_TXT_SET_GREP_INVERT='-v'
    BL64_TXT_SET_GREP_NO_CASE='-i'
    BL64_TXT_SET_GREP_QUIET='--quiet'
    BL64_TXT_SET_GREP_SHOW_FILE_ONLY='-l'
    BL64_TXT_SET_GREP_STDIN='-'
    BL64_TXT_SET_SED_EXPRESSION='-e'
    ;;
  ${BL64_OS_SLES}-*)
    BL64_TXT_SET_AWK_POSIX='--posix'
    BL64_TXT_SET_AWS_FS='-F'
    BL64_TXT_SET_GREP_ERE='-E'
    BL64_TXT_SET_GREP_INVERT='-v'
    BL64_TXT_SET_GREP_NO_CASE='-i'
    BL64_TXT_SET_GREP_QUIET='-q'
    BL64_TXT_SET_GREP_SHOW_FILE_ONLY='-l'
    BL64_TXT_SET_GREP_STDIN='-'
    BL64_TXT_SET_SED_EXPRESSION='-e'
    ;;
  ${BL64_OS_ALP}-*)
    BL64_TXT_SET_AWK_POSIX=''
    BL64_TXT_SET_AWS_FS='-F'
    BL64_TXT_SET_GREP_ERE='-E'
    BL64_TXT_SET_GREP_INVERT='-v'
    BL64_TXT_SET_GREP_NO_CASE='-i'
    BL64_TXT_SET_GREP_QUIET='-q'
    BL64_TXT_SET_GREP_SHOW_FILE_ONLY='-l'
    BL64_TXT_SET_GREP_STDIN='-'
    BL64_TXT_SET_SED_EXPRESSION='-e'
    ;;
  ${BL64_OS_MCOS}-*)
    BL64_TXT_SET_AWK_POSIX=''
    BL64_TXT_SET_AWS_FS='-F'
    BL64_TXT_SET_GREP_ERE='-E'
    BL64_TXT_SET_GREP_INVERT='-v'
    BL64_TXT_SET_GREP_NO_CASE='-i'
    BL64_TXT_SET_GREP_QUIET='-q'
    BL64_TXT_SET_GREP_SHOW_FILE_ONLY='-l'
    BL64_TXT_SET_GREP_STDIN='-'
    BL64_TXT_SET_SED_EXPRESSION='-e'
    ;;
  *) bl64_check_alert_unsupported ;;
  esac

}

#######################################
# BashLib64 / Module / Functions / Manipulate text files content
#######################################

#######################################
# Removes comments from text input using the external tool Grep
#
# * Comment delimiter: #
# * All text to the right of the delimiter is removed
#
# Arguments:
#   $1: Full path to the text file. Use $BL64_TXT_FLAG_STDIN for stdin. Default: STDIN
# Outputs:
#   STDOUT: Original text with comments removed
#   STDERR: grep Error message
# Returns:
#   0: successfull execution
#   >0: grep command exit status
#######################################
function bl64_txt_strip_comments() {
  bl64_dbg_lib_show_function "$@"
  local source="${1:-${BL64_TXT_FLAG_STDIN}}"

  [[ "$source" == "$BL64_TXT_FLAG_STDIN" ]] && source="$BL64_TXT_SET_GREP_STDIN"

  bl64_txt_run_egrep "$BL64_TXT_SET_GREP_INVERT" '^#.*$|^ *#.*$' "$source"
}

#######################################
# Read a text file, replace shell variable names with its value and show the result on stdout
#
# * Uses envsubst
# * Variables in the source file must follow the syntax: $VARIABLE or ${VARIABLE}
#
# Arguments:
#   $1: source file path
# Outputs:
#   STDOUT: source modified with replaced variables
#   STDERR: command stderr
# Returns:
#   0: replacement ok
#   >0: status from last failed command
#######################################
function bl64_txt_replace_env() {
  bl64_dbg_lib_show_function "$@"
  local source="${1:-}"

  bl64_check_parameter 'source' &&
    bl64_check_file "$source" ||
    return $?

  bl64_txt_run_envsubst <"$source"
}

#######################################
# Search for a whole line in a given text file or stdin
#
# Arguments:
#   $1: source file path. Use $BL64_TXT_FLAG_STDIN for stdin. Default: STDIN
#   $2: text to look for. Default: empty line
# Outputs:
#   STDOUT: none
#   STDERR: Error messages
# Returns:
#   0: line was found
#   >0: grep command exit status
#######################################
function bl64_txt_search_line() {
  bl64_dbg_lib_show_function "$@"
  local source="${1:-${BL64_TXT_FLAG_STDIN}}"
  local line="${2:-}"

  [[ "$source" == "$BL64_TXT_FLAG_STDIN" ]] && source="$BL64_TXT_SET_GREP_STDIN"
  bl64_txt_run_egrep "$BL64_TXT_SET_GREP_QUIET" "^${line}$" "$source"
}

#######################################
# OS command wrapper: awk
#
# * Run AWS with POSIX compatibility and traditional regexp
#
# Arguments:
#   $@: arguments are passed as-is to the command
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_txt_run_awk() {
  bl64_dbg_lib_show_function "$@"

  bl64_check_parameters_none "$#" &&
    bl64_check_module 'BL64_TXT_MODULE' &&
    bl64_check_command "$BL64_TXT_CMD_AWK_POSIX" ||
    return $?

  bl64_dbg_lib_trace_start
  # shellcheck disable=SC2086
  "$BL64_TXT_CMD_AWK_POSIX" $BL64_TXT_SET_AWK_POSIX "$@"
  bl64_dbg_lib_trace_stop
}

#######################################
# Command wrapper with verbose, debug and common options
#
# * Trust no one. Ignore inherited config and use explicit
#
# Arguments:
#   $@: arguments are passed as-is to the command
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
# shellcheck disable=SC2120
function bl64_txt_run_envsubst() {
  bl64_dbg_lib_show_function "$@"

  bl64_check_module 'BL64_TXT_MODULE' &&
    bl64_check_command "$BL64_TXT_CMD_ENVSUBST" ||
    return $?

  bl64_dbg_lib_trace_start
  "$BL64_TXT_CMD_ENVSUBST" "$@"
  bl64_dbg_lib_trace_stop
}

#######################################
# Command wrapper with verbose, debug and common options
#
# * Trust no one. Ignore inherited config and use explicit
#
# Arguments:
#   $@: arguments are passed as-is to the command
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_txt_run_grep() {
  bl64_dbg_lib_show_function "$@"

  bl64_check_parameters_none "$#" &&
    bl64_check_module 'BL64_TXT_MODULE' &&
    bl64_check_command "$BL64_TXT_CMD_GREP" ||
    return $?

  bl64_dbg_lib_trace_start
  "$BL64_TXT_CMD_GREP" "$@"
  bl64_dbg_lib_trace_stop
}

#######################################
# Run grep with regular expression matching
#
# Arguments:
#   $@: arguments are passed as-is to the command
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_txt_run_egrep() {
  bl64_dbg_lib_show_function "$@"

  bl64_txt_run_grep "$BL64_TXT_SET_GREP_ERE" "$@"
}

#######################################
# Command wrapper with verbose, debug and common options
#
# * Trust no one. Ignore inherited config and use explicit
# * Warning: sed regexp is not consistent across versions and vendors. Caller is responsible for testing to ensure compatibility
#
# Arguments:
#   $@: arguments are passed as-is to the command
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_txt_run_sed() {
  bl64_dbg_lib_show_function "$@"

  bl64_check_parameters_none "$#" &&
    bl64_check_module 'BL64_TXT_MODULE' &&
    bl64_check_command "$BL64_TXT_CMD_SED" ||
    return $?

  bl64_dbg_lib_trace_start
  "$BL64_TXT_CMD_SED" "$@"
  bl64_dbg_lib_trace_stop
}

#######################################
# Command wrapper with verbose, debug and common options
#
# * Trust no one. Ignore inherited config and use explicit
#
# Arguments:
#   $@: arguments are passed as-is to the command
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_txt_run_base64() {
  bl64_dbg_lib_show_function "$@"

  bl64_check_module 'BL64_TXT_MODULE' &&
    bl64_check_command "$BL64_TXT_CMD_BASE64" ||
    return $?

  bl64_dbg_lib_trace_start
  "$BL64_TXT_CMD_BASE64" "$@"
  bl64_dbg_lib_trace_stop
}

#######################################
# Command wrapper with verbose, debug and common options
#
# * Trust no one. Ignore inherited config and use explicit
#
# Arguments:
#   $@: arguments are passed as-is to the command
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_txt_run_tr() {
  bl64_dbg_lib_show_function "$@"

  bl64_check_parameters_none "$#" &&
    bl64_check_module 'BL64_TXT_MODULE' &&
    bl64_check_command "$BL64_TXT_CMD_TR" ||
    return $?

  bl64_dbg_lib_trace_start
  "$BL64_TXT_CMD_TR" "$@"
  bl64_dbg_lib_trace_stop
}

#######################################
# Command wrapper with verbose, debug and common options
#
# * Trust no one. Ignore inherited config and use explicit
#
# Arguments:
#   $@: arguments are passed as-is to the command
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_txt_run_cut() {
  bl64_dbg_lib_show_function "$@"

  bl64_check_parameters_none "$#" &&
    bl64_check_module 'BL64_TXT_MODULE' &&
    bl64_check_command "$BL64_TXT_CMD_CUT" ||
    return $?

  bl64_dbg_lib_trace_start
  "$BL64_TXT_CMD_CUT" "$@"
  bl64_dbg_lib_trace_stop
}

#######################################
# Command wrapper with verbose, debug and common options
#
# * Trust no one. Ignore inherited config and use explicit
#
# Arguments:
#   $@: arguments are passed as-is to the command
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_txt_run_uniq() {
  bl64_dbg_lib_show_function "$@"

  bl64_check_parameters_none "$#" &&
    bl64_check_module 'BL64_TXT_MODULE' &&
    bl64_check_command "$BL64_TXT_CMD_UNIQ" ||
    return $?

  bl64_dbg_lib_trace_start
  "$BL64_TXT_CMD_UNIQ" "$@"
  bl64_dbg_lib_trace_stop
}

#######################################
# Command wrapper with verbose, debug and common options
#
# * Trust no one. Ignore inherited config and use explicit
#
# Arguments:
#   $@: arguments are passed as-is to the command
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_txt_run_sort() {
  bl64_dbg_lib_show_function "$@"

  bl64_check_parameters_none "$#" &&
    bl64_check_module 'BL64_TXT_MODULE' &&
    bl64_check_command "$BL64_TXT_CMD_SORT" ||
    return $?

  bl64_dbg_lib_trace_start
  "$BL64_TXT_CMD_SORT" "$@"
  bl64_dbg_lib_trace_stop
}

#!/usr/bin/env bash
#######################################
# BashLib64 / Bash automation library
#
# Author: serdigital64 (https://github.com/serdigital64)
# Repository: https://github.com/automation64/bashlib64
#
# Copyright 2022 SerDigital64@gmail.com
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#######################################

#######################################
# BashLib64 / Module / Globals / Format text data
#######################################

# shellcheck disable=SC2034
{
  declare BL64_FMT_VERSION='3.0.0'

  declare BL64_FMT_MODULE='0'

  declare _BL64_FMT_TXT_ERROR_VALUE_LIST_EMPTY='please provide at least one value to check against'
  declare _BL64_FMT_TXT_ERROR_VALUE_LIST_WRONG='invalid value'
  declare _BL64_FMT_TXT_VALUE_LIST_VALID='Value must be one of'
}

#######################################
# BashLib64 / Module / Setup / Format text data
#######################################

#######################################
# Setup the bashlib64 module
#
# * Warning: bootstrap function
#
# Arguments:
#   None
# Outputs:
#   STDOUT: None
#   STDERR: None
# Returns:
#   0: setup ok
#   >0: setup failed
#######################################
function bl64_fmt_setup() {
  [[ -z "$BL64_VERSION" ]] &&
    echo 'Error: bashlib64-module-core.bash should the last module to be sourced' &&
    return 21

  # shellcheck disable=SC2034
  bl64_lib_module_imported 'BL64_CHECK_MODULE' &&
    bl64_lib_module_imported 'BL64_DBG_MODULE' &&
    bl64_dbg_lib_show_function &&
    bl64_lib_module_imported 'BL64_MSG_MODULE' &&
    bl64_lib_module_imported 'BL64_TXT_MODULE' &&
    BL64_FMT_MODULE="$BL64_VAR_ON"
  bl64_check_alert_module_setup 'fmt'
}

#######################################
# BashLib64 / Module / Functions / Format text data
#######################################

#######################################
# Removes starting slash from path
#
# * If path is a single slash or relative path no change is done
#
# Arguments:
#   $1: Target path
# Outputs:
#   STDOUT: Updated path
#   STDERR: None
# Returns:
#   0: successfull execution
#   >0: printf error
#######################################
function bl64_fmt_strip_starting_slash() {
  bl64_dbg_lib_show_function "$@"
  local path="$1"

  # shellcheck disable=SC2086
  if [[ -z "$path" ]]; then
    return 0
  elif [[ "$path" == '/' ]]; then
    printf '%s' "${path}"
  elif [[ "$path" == /* ]]; then
    printf '%s' "${path:1}"
  else
    printf '%s' "${path}"
  fi
}

#######################################
# Removes ending slash from path
#
# * If path is a single slash or no ending slash is present no change is done
#
# Arguments:
#   $1: Target path
# Outputs:
#   STDOUT: Updated path
#   STDERR: None
# Returns:
#   0: successfull execution
#   >0: printf error
#######################################
function bl64_fmt_strip_ending_slash() {
  bl64_dbg_lib_show_function "$@"
  local path="$1"

  # shellcheck disable=SC2086
  if [[ -z "$path" ]]; then
    return 0
  elif [[ "$path" == '/' ]]; then
    printf '%s' "${path}"
  elif [[ "$path" == */ ]]; then
    printf '%s' "${path:0:-1}"
  else
    printf '%s' "${path}"
  fi
}

#######################################
# Show the last part (basename) of a path
#
# * The function operates on text data, it doesn't verify path existance
# * The last part can be either a directory or a file
# * Parts are separated by the / character
# * The basename is defined by taking the text to the right of the last separator
# * Function mimics the linux basename command
#
# Examples:
#
#   bl64_fmt_basename '/full/path/to/file' -> 'file'
#   bl64_fmt_basename '/full/path/to/file/' -> ''
#   bl64_fmt_basename 'path/to/file' -> 'file'
#   bl64_fmt_basename 'path/to/file/' -> ''
#   bl64_fmt_basename '/file' -> 'file'
#   bl64_fmt_basename '/' -> ''
#   bl64_fmt_basename 'file' -> 'file'
#
# Arguments:
#   $1: Path
# Outputs:
#   STDOUT: Basename
#   STDERR: None
# Returns:
#   0: successfull execution
#   >0: printf error
#######################################
function bl64_fmt_basename() {
  bl64_dbg_lib_show_function "$@"
  local path="$1"
  local base=''

  if [[ -n "$path" && "$path" != '/' ]]; then
    base="${path##*/}"
  fi

  if [[ -z "$base" || "$base" == */* ]]; then
    # shellcheck disable=SC2086
    return $BL64_LIB_ERROR_PARAMETER_INVALID
  else
    printf '%s' "$base"
  fi
  return 0
}

#######################################
# Show the directory part of a path
#
# * The function operates on text data, it doesn't verify path existance
# * Parts are separated by the slash (/) character
# * The directory is defined by taking the input string up to the last separator
#
# Examples:
#
#   bl64_fmt_dirname '/full/path/to/file' -> '/full/path/to'
#   bl64_fmt_dirname '/full/path/to/file/' -> '/full/path/to/file'
#   bl64_fmt_dirname '/file' -> '/'
#   bl64_fmt_dirname '/' -> '/'
#   bl64_fmt_dirname 'dir' -> 'dir'
#
# Arguments:
#   $1: Path
# Outputs:
#   STDOUT: Dirname
#   STDERR: None
# Returns:
#   0: successfull execution
#   >0: printf error
#######################################
function bl64_fmt_dirname() {
  bl64_dbg_lib_show_function "$@"
  local path="$1"

  # shellcheck disable=SC2086
  if [[ -z "$path" ]]; then
    return 0
  elif [[ "$path" == '/' ]]; then
    printf '%s' "${path}"
  elif [[ "$path" != */* ]]; then
    printf '%s' "${path}"
  elif [[ "$path" == /*/* ]]; then
    printf '%s' "${path%/*}"
  elif [[ "$path" == */*/* ]]; then
    printf '%s' "${path%/*}"
  elif [[ "$path" == /* && "${path:1}" != */* ]]; then
    printf '%s' '/'
  fi
}

#######################################
# Convert list to string. Optionally add prefix, postfix to each field
#
# * list: lines separated by \n
# * string: same as original list but with \n replaced with space
#
# Arguments:
#   $1: output field separator. Default: space
#   $2: prefix. Format: string
#   $3: postfix. Format: string
# Inputs:
#   STDIN: list
# Outputs:
#   STDOUT: string
#   STDERR: None
# Returns:
#   always ok
#######################################
function bl64_fmt_list_to_string() {
  bl64_dbg_lib_show_function
  local field_separator="${1:-${BL64_VAR_DEFAULT}}"
  local prefix="${2:-${BL64_VAR_DEFAULT}}"
  local postfix="${3:-${BL64_VAR_DEFAULT}}"

  [[ "$field_separator" == "$BL64_VAR_DEFAULT" ]] && field_separator=' '
  [[ "$prefix" == "$BL64_VAR_DEFAULT" ]] && prefix=''
  [[ "$postfix" == "$BL64_VAR_DEFAULT" ]] && postfix=''

  bl64_txt_run_awk \
    -v field_separator="$field_separator" \
    -v prefix="$prefix" \
    -v postfix="$postfix" \
    '
    BEGIN {
      joined_string = ""
      RS="\n"
    }
    {
      joined_string = ( joined_string == "" ? "" : joined_string field_separator ) prefix $0 postfix
    }
    END { print joined_string }
  '
}

#######################################
# Build a separator line with optional payload
#
# * Separator format: payload + \n
#
# Arguments:
#   $1: Separator payload. Format: string
# Outputs:
#   STDOUT: separator line
#   STDERR: grep Error message
# Returns:
#   printf exit status
#######################################
function bl64_fmt_separator_line() {
  bl64_dbg_lib_show_function "$@"
  local payload="${1:-}"

  printf '%s\n' "$payload"
}

#######################################
# Check that the value is part of a list
#
# Arguments:
#   $1: (optional) error message
#   $2: value that will be verified
#   $@: list of one or more values to check against
# Outputs:
#   STDOUT: none
#   STDERR: message
# Returns:
#   0: check ok
#   BL64_LIB_ERROR_CHECK_FAILED
#######################################
function bl64_fmt_check_value_in_list() {
  bl64_dbg_lib_show_function "$@"
  local error_message="${1:-$BL64_VAR_DEFAULT}"
  local target_value="${2:-}"
  local valid_value=''
  local -i is_valid=$BL64_LIB_ERROR_CHECK_FAILED

  shift
  shift
  bl64_check_parameter 'target_value' &&
    bl64_check_parameters_none $# "$_BL64_FMT_TXT_ERROR_VALUE_LIST_EMPTY" ||
    return $?
  [[ "$error_message" == "$BL64_VAR_DEFAULT" ]] && error_message="$_BL64_FMT_TXT_ERROR_VALUE_LIST_WRONG"

  for valid_value in "$@"; do
    [[ "$target_value" == "$valid_value" ]] &&
      is_valid=0 &&
      break
  done
  ((is_valid != 0)) &&
    bl64_msg_show_error "${error_message}. ${_BL64_FMT_TXT_VALUE_LIST_VALID}: [${*}] (${_BL64_CHECK_TXT_FUNCTION}: ${FUNCNAME[1]:-NONE}@${BASH_LINENO[1]:-NONE}.${FUNCNAME[2]:-NONE}@${BASH_LINENO[2]:-NONE})"

  return $is_valid
}

#!/usr/bin/env bash
#######################################
# BashLib64 / Bash automation library
#
# Author: serdigital64 (https://github.com/serdigital64)
# Repository: https://github.com/automation64/bashlib64
#
# Copyright 2022 SerDigital64@gmail.com
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#######################################

#######################################
# BashLib64 / Module / Globals / Manage Version Control System
#######################################

# shellcheck disable=SC2034
{
  declare BL64_VCS_VERSION='2.5.0'

  declare BL64_VCS_MODULE='0'

  declare BL64_VCS_CMD_GIT=''

  declare BL64_VCS_SET_GIT_NO_PAGER=''
  declare BL64_VCS_SET_GIT_QUIET=''

  #
  # GitHub related parameters
  #

  # GitHub API FQDN
  declare BL64_VCS_GITHUB_API_URL='https://api.github.com'
  # Target GitHub public API version
  declare BL64_VCS_GITHUB_API_VERSION='2022-11-28'
  # Special tag for latest release
  declare BL64_VCS_GITHUB_LATEST='latest'
}

#######################################
# BashLib64 / Module / Setup / Manage Version Control System
#######################################

#######################################
# Setup the bashlib64 module
#
# * Warning: bootstrap function
#
# Arguments:
#   None
# Outputs:
#   STDOUT: None
#   STDERR: None
# Returns:
#   0: setup ok
#   >0: setup failed
#######################################
function bl64_vcs_setup() {
  [[ -z "$BL64_VERSION" ]] &&
    echo 'Error: bashlib64-module-core.bash should the last module to be sourced' &&
    return 21

  # shellcheck disable=SC2034
  bl64_lib_module_imported 'BL64_CHECK_MODULE' &&
    bl64_lib_module_imported 'BL64_DBG_MODULE' &&
    bl64_dbg_lib_show_function &&
    bl64_lib_module_imported 'BL64_OS_MODULE' &&
    bl64_lib_module_imported 'BL64_MSG_MODULE' &&
    bl64_lib_module_imported 'BL64_API_MODULE' &&
    bl64_lib_module_imported 'BL64_FS_MODULE' &&
    bl64_lib_module_imported 'BL64_TXT_MODULE' &&
    bl64_lib_module_imported 'BL64_OS_MODULE' &&
    bl64_lib_module_imported 'BL64_BSH_MODULE' &&
    _bl64_vcs_set_command &&
    _bl64_vcs_set_options &&
    BL64_VCS_MODULE="$BL64_VAR_ON"
  bl64_check_alert_module_setup 'vcs'
}

#######################################
# Identify and normalize commands
#
# * Commands are exported as variables with full path
# * The caller function is responsible for checking that the target command is present (installed)
# * Warning: bootstrap function
#
# Arguments:
#   None
# Outputs:
#   STDOUT: None
#   STDERR: None
# Returns:
#   0: always ok
#######################################
function _bl64_vcs_set_command() {
  bl64_dbg_lib_show_function
  case "$BL64_OS_DISTRO" in
  ${BL64_OS_UB}-* | ${BL64_OS_DEB}-* | ${BL64_OS_KL}-*)
    BL64_VCS_CMD_GIT='/usr/bin/git'
    ;;
  ${BL64_OS_FD}-* | ${BL64_OS_AMZ}-* | ${BL64_OS_CNT}-* | ${BL64_OS_RHEL}-* | ${BL64_OS_ALM}-* | ${BL64_OS_OL}-* | ${BL64_OS_RCK}-*)
    BL64_VCS_CMD_GIT='/usr/bin/git'
    ;;
  ${BL64_OS_SLES}-*)
    BL64_VCS_CMD_GIT='/usr/bin/git'
    ;;
  ${BL64_OS_ALP}-*)
    BL64_VCS_CMD_GIT='/usr/bin/git'
    ;;
  ${BL64_OS_MCOS}-*)
    BL64_VCS_CMD_GIT='/usr/bin/git'
    ;;
  *) bl64_check_alert_unsupported ;;
  esac
}

#######################################
# Create command sets for common options
#
# * Warning: bootstrap function
#
# Arguments:
#   None
# Outputs:
#   STDOUT: None
#   STDERR: None
# Returns:
#   0: always ok
#######################################
function _bl64_vcs_set_options() {
  bl64_dbg_lib_show_function
  # Common sets - unversioned
  BL64_VCS_SET_GIT_NO_PAGER='--no-pager'
  BL64_VCS_SET_GIT_QUIET=' '
}

#######################################
# BashLib64 / Module / Functions / Manage Version Control System
#######################################

#######################################
# GIT CLI wrapper with verbose, debug and common options
#
# * Trust no one. Ignore inherited config and use explicit config
#
# Arguments:
#   $@: arguments are passed as-is to the command
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_vcs_run_git() {
  bl64_dbg_lib_show_function "$@"
  local debug="$BL64_VCS_SET_GIT_QUIET"

  bl64_check_module 'BL64_VCS_MODULE' &&
    bl64_check_parameters_none "$#" &&
    bl64_check_command "$BL64_VCS_CMD_GIT" || return $?

  bl64_vcs_blank_git

  bl64_dbg_lib_show_info "current path: $(pwd)"
  if bl64_dbg_lib_command_enabled; then
    debug=''
    export GIT_TRACE='2'
  else
    export GIT_TRACE='0'
  fi

  export GIT_CONFIG_NOSYSTEM='0'
  export GIT_AUTHOR_EMAIL='nouser@nodomain'
  export GIT_AUTHOR_NAME='bl64_vcs_run_git'

  bl64_dbg_lib_trace_start
  # shellcheck disable=SC2086
  "$BL64_VCS_CMD_GIT" \
    $debug \
    $BL64_VCS_SET_GIT_NO_PAGER \
    "$@"
  bl64_dbg_lib_trace_stop
}

#######################################
# Remove or nullify inherited shell variables that affects command execution
#
# Arguments:
#   None
# Outputs:
#   STDOUT: None
#   STDERR: None
# Returns:
#   0: always ok
#######################################
function bl64_vcs_blank_git() {
  bl64_dbg_lib_show_function

  bl64_dbg_lib_show_info 'unset inherited GIT_* shell variables'
  bl64_dbg_lib_trace_start
  unset GIT_TRACE
  unset GIT_CONFIG_NOSYSTEM
  unset GIT_AUTHOR_EMAIL
  unset GIT_AUTHOR_NAME
  bl64_dbg_lib_trace_stop

  return 0
}

#######################################
# Clone GIT branch
#
# * File ownership is set to the current user
# * Destination is created if not existing
# * Single branch
# * Depth = 1
#
# Arguments:
#   $1: URL to the GIT repository
#   $2: destination path where the repository will be created
#   $3: (optional) branch name
#   $4: (optional) new repository name
# Outputs:
#   STDOUT: git output
#   STDERR: git stderr
# Returns:
#   n: git exit status
#######################################
function bl64_vcs_git_clone() {
  bl64_dbg_lib_show_function "$@"
  local source="${1}"
  local destination="${2}"
  local branch="${3:-$BL64_VAR_DEFAULT}"
  local name="${4:-$BL64_VAR_DEFAULT}"

  [[ "$branch" == "$BL64_VAR_DEFAULT" ]] && branch=''
  bl64_check_parameter 'source' &&
    bl64_check_parameter 'destination' &&
    bl64_check_command "$BL64_VCS_CMD_GIT" ||
    return $?

  bl64_msg_show_lib_subtask "clone single branch (${source}/${branch} -> ${destination})"
  bl64_fs_create_dir "${BL64_VAR_DEFAULT}" "${BL64_VAR_DEFAULT}" "${BL64_VAR_DEFAULT}" "$destination" &&
    bl64_bsh_run_pushd "$destination" ||
    return $?

  if [[ "$name" == "$BL64_VAR_DEFAULT" ]]; then
    bl64_vcs_run_git \
      clone \
      --depth 1 \
      --single-branch \
      ${branch:+--branch $branch} \
      "$source" ||
      return $?
  else
    bl64_vcs_run_git \
      clone \
      --depth 1 \
      --single-branch \
      ${branch:+--branch $branch} \
      "$source" "$name" ||
      return $?
  fi
  bl64_bsh_run_popd
}

#######################################
# Clone partial GIT repository (sparse checkout)
#
# * File ownership is set to the current user
# * Destination is created if not existing
#
# Arguments:
#   $1: URL to the GIT repository
#   $2: destination path where the repository will be created
#   $3: branch name. Default: main
#   $4: include pattern list. Field separator: space
# Outputs:
#   STDOUT: git output
#   STDERR: git stderr
# Returns:
#   n: git exit status
#######################################
function bl64_vcs_git_sparse() {
  bl64_dbg_lib_show_function "$@"
  local source="${1}"
  local destination="${2}"
  local branch="${3:-main}"
  local pattern="${4}"
  local item=''
  local -i status=0

  bl64_check_command "$BL64_VCS_CMD_GIT" &&
    bl64_check_parameter 'source' &&
    bl64_check_parameter 'destination' &&
    bl64_check_parameter 'pattern' || return $?

  bl64_fs_create_dir "${BL64_VAR_DEFAULT}" "${BL64_VAR_DEFAULT}" "${BL64_VAR_DEFAULT}" "$destination" &&
    bl64_bsh_run_pushd "$destination" ||
    return $?

  bl64_dbg_lib_show_info 'detect if current git supports sparse-checkout option'
  if bl64_os_is_distro "${BL64_OS_DEB}-9" "${BL64_OS_DEB}-10" "${BL64_OS_UB}-18" "${BL64_OS_UB}-20" "${BL64_OS_OL}-7" "${BL64_OS_CNT}-7"; then
    bl64_dbg_lib_show_info 'git sparse-checkout not supported. Using alternative method'
    # shellcheck disable=SC2086
    bl64_vcs_run_git init &&
      bl64_vcs_run_git remote add origin "$source" &&
      bl64_vcs_run_git config core.sparseCheckout true &&
      {
        IFS=' '
        for item in $pattern; do echo "$item" >>'.git/info/sparse-checkout'; done
        unset IFS
      } &&
      bl64_vcs_run_git pull --depth 1 origin "$branch" ||
      return $?
  else
    bl64_dbg_lib_show_info 'git sparse-checkout is supported'
    # shellcheck disable=SC2086
    bl64_vcs_run_git init &&
      bl64_vcs_run_git sparse-checkout set &&
      {
        IFS=' '
        for item in $pattern; do echo "$item"; done | bl64_vcs_run_git sparse-checkout add --stdin
      } &&
      bl64_vcs_run_git remote add origin "$source" &&
      bl64_vcs_run_git pull --depth 1 origin "$branch" ||
      return $?
  fi
  bl64_bsh_run_popd
}

#######################################
# GitHub / Call API
#
# * Call GitHub APIs
# * API calls are executed using Curl wrapper
#
# Arguments:
#   $1: API path. Format: Full path (/X/Y/Z)
#   $2: RESTful method. Format: $BL64_API_METHOD_*. Default: $BL64_API_METHOD_GET
#   $3: API query to be appended to the API path. Format: url encoded string. Default: none
#   $4: API Token. Default: none
#   $5: API Version. Default: $BL64_VCS_GITHUB_API_VERSION
#   $@: additional arguments are passed as-is to the command
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: API call executed. Warning: curl exit status only, not the HTTP status code
#   >: unable to execute API call
#######################################
function bl64_vcs_github_run_api() {
  bl64_dbg_lib_show_function "$@"
  local api_path="$1"
  local api_method="${2:-${BL64_API_METHOD_GET}}"
  local api_query="${3:-${BL64_VAR_NULL}}"
  local api_token="${4:-${BL64_VAR_NULL}}"
  local api_version="${5:-${BL64_VCS_GITHUB_API_VERSION}}"

  bl64_check_parameter 'api_path' ||
    return $?

  [[ "$api_token" == "$BL64_VAR_NULL" ]] && api_token=''
  shift
  shift
  shift
  shift
  shift

  # shellcheck disable=SC2086
  bl64_api_call \
    "$BL64_VCS_GITHUB_API_URL" \
    "$api_path" \
    "$api_method" \
    "$api_query" \
    $BL64_RXTX_SET_CURL_HEADER 'Accept: application/vnd.github+json' \
    $BL64_RXTX_SET_CURL_HEADER "X-GitHub-Api-Version: ${api_version}" \
    ${api_token:+${BL64_RXTX_SET_CURL_HEADER} "Authorization: Bearer ${api_token}"} \
    "$@"
}

#######################################
# GitHub / Get release number from latest release
#
# * Uses GitHub API
# * Assumes repo uses standard github release process which binds the latest release to a tag name representing the last version
# * Looks for pattern in json output: "tag_name": "xxxxx"
#
# Arguments:
#   $1: repo owner
#   $2: repo name
# Outputs:
#   STDOUT: release tag
#   STDERR: api error
# Returns:
#   0: api call success
#   >0: api call error
#######################################
function bl64_vcs_github_release_get_latest() {
  bl64_dbg_lib_show_function "$@"
  local repo_owner="$1"
  local repo_name="$2"
  local repo_tag=''

  bl64_check_module 'BL64_VCS_MODULE' &&
    bl64_check_parameter 'repo_owner' &&
    bl64_check_parameter 'repo_name' ||
    return $?

  repo_tag="$(_bl64_vcs_github_release_get_latest "$repo_owner" "$repo_name")"

  if [[ -n "$repo_tag" ]]; then
    echo "$repo_tag"
  else
    bl64_msg_show_error "failed to determine latest release (${repo_owner}/${repo_name})"
    return $BL64_LIB_ERROR_TASK_FAILED
  fi
}

function _bl64_vcs_github_release_get_latest() {
  bl64_dbg_lib_show_function "$@"
  local repo_owner="$1"
  local repo_name="$2"
  local repo_api_query="/repos/${repo_owner}/${repo_name}/releases/latest"

  # shellcheck disable=SC2086
  bl64_vcs_github_run_api "$repo_api_query" |
    bl64_txt_run_awk \
      ${BL64_TXT_SET_AWS_FS} ':' \
      '/"tag_name": "/ {
        gsub(/[ ",]/,"", $2); print $2
      }'
}

#######################################
# Changelog / Get release description for a semver tag
#
# * Uses standard Changelog format
# * Uses standard semver tag
#
# Arguments:
#   $1: changelog path
#   $2: semver release tag
# Outputs:
#   STDOUT: release description
#   STDERR: execution error
# Returns:
#   0: release description found
#   >0: unable to get release description
#######################################
function bl64_vcs_changelog_get_release() {
  bl64_dbg_lib_show_function "$@"
  local changelog_path="$1"
  local release_tag="$2"
  local description=''

  bl64_check_parameter 'changelog_path' &&
    bl64_check_parameter 'release_tag' &&
    bl64_check_file "$changelog_path" ||
    return $?

  description="$(
    _bl64_vcs_changelog_get_release \
      "$changelog_path" \
      "$release_tag"
  )" &&
    [[ -n "$description" ]] &&
    printf '%s' "$description"
}

function _bl64_vcs_changelog_get_release() {
  bl64_dbg_lib_show_function "$@"
  local changelog_path="$1"
  local release_tag="$2"

  bl64_txt_run_awk \
    -v tag="$release_tag" '
  BEGIN {
      section = 0
      pattern = "## \\[" tag "\\]"
  }
  /^$/ { next }
  section == 0 && $0 ~ pattern {
    section = 1
    next
  }
  section == 1 && (/^## \[[0-9]+\.[0-9]\.+[0-9]+\]$/ || /^\[[0-9]+\.[0-9]\.+[0-9]+\]: /) {
    exit
  }
  section == 1 {
    gsub(/#/,"*")
    print $0
    next
  }
  ' "$changelog_path"
}

#!/usr/bin/env bash
#######################################
# BashLib64 / Bash automation library
#
# Author: serdigital64 (https://github.com/serdigital64)
# Repository: https://github.com/automation64/bashlib64
#
# Copyright 2022 SerDigital64@gmail.com
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#######################################

#######################################
# BashLib64 / Module / Globals / Interact with container engines
#######################################

# shellcheck disable=SC2034
{
  declare BL64_CNT_VERSION='3.4.0'

  declare BL64_CNT_MODULE='0'

  declare BL64_CNT_DRIVER_DOCKER='docker'
  declare BL64_CNT_DRIVER_PODMAN='podman'
  declare BL64_CNT_DRIVER=''

  declare BL64_CNT_FLAG_STDIN='-'

  declare BL64_CNT_CMD_PODMAN=''
  declare BL64_CNT_CMD_DOCKER=''

  declare BL64_CNT_SET_DEBUG=''
  declare BL64_CNT_SET_ENTRYPOINT=''
  declare BL64_CNT_SET_FILE=''
  declare BL64_CNT_SET_FILTER=''
  declare BL64_CNT_SET_INTERACTIVE=''
  declare BL64_CNT_SET_LOG_LEVEL=''
  declare BL64_CNT_SET_NO_CACHE=''
  declare BL64_CNT_SET_PASSWORD_STDIN=''
  declare BL64_CNT_SET_PASSWORD=''
  declare BL64_CNT_SET_QUIET=''
  declare BL64_CNT_SET_RM=''
  declare BL64_CNT_SET_TAG=''
  declare BL64_CNT_SET_TTY=''
  declare BL64_CNT_SET_USERNAME=''
  declare BL64_CNT_SET_VERSION=''

  declare BL64_CNT_SET_FILTER_ID=''
  declare BL64_CNT_SET_FILTER_NAME=''
  declare BL64_CNT_SET_LOG_LEVEL_DEBUG=''
  declare BL64_CNT_SET_LOG_LEVEL_ERROR=''
  declare BL64_CNT_SET_LOG_LEVEL_INFO=''
  declare BL64_CNT_SET_STATUS_RUNNING=''

  declare BL64_CNT_PATH_DOCKER_SOCKET=''

  declare _BL64_CNT_TXT_NO_CLI='unable to detect supported container engine'
  declare _BL64_CNT_TXT_EXISTING_NETWORK='container network already created. No further action needed'
  declare _BL64_CNT_TXT_CREATE_NETWORK='creating container network'
  declare _BL64_CNT_TXT_LOGIN_REGISTRY='loging to container registry'
  declare _BL64_CNT_TXT_BUILD='build container image'
  declare _BL64_CNT_TXT_PUSH='push container image to registry'
  declare _BL64_CNT_TXT_PULL='pull container image from registry'
  declare _BL64_CNT_TXT_TAG='add tag to container image'
  declare _BL64_CNT_TXT_MISSING_FILTER='no filter was selected. Task requires one of them'
  declare _BL64_CNT_TXT_ERROR_RUN_IN_CONTAINER='current task must be run inside a container'
  declare _BL64_CNT_TXT_ERROR_RUN_NOT_IN_CONTAINER='current task must not be run inside a container'
}

#######################################
# BashLib64 / Module / Setup / Interact with container engines
#######################################

#######################################
# Setup the bashlib64 module
#
# * Warning: required in order to use the module
# * Check for core commands, fail if not available
#
# Arguments:
#   None
# Outputs:
#   STDOUT: None
#   STDERR: None
# Returns:
#   0: setup ok
#   >0: setup failed
#######################################
function bl64_cnt_setup() {
  [[ -z "$BL64_VERSION" ]] &&
    echo 'Error: bashlib64-module-core.bash should the last module to be sourced' &&
    return 21

  # shellcheck disable=SC2034
  bl64_lib_module_imported 'BL64_CHECK_MODULE' &&
    bl64_lib_module_imported 'BL64_DBG_MODULE' &&
    bl64_dbg_lib_show_function &&
    bl64_lib_module_imported 'BL64_OS_MODULE' &&
    bl64_lib_module_imported 'BL64_MSG_MODULE' &&
    bl64_lib_module_imported 'BL64_BSH_MODULE' &&
    _bl64_cnt_set_command &&
    bl64_cnt_set_paths &&
    _bl64_cnt_set_options &&
    BL64_CNT_MODULE="$BL64_VAR_ON"
  bl64_check_alert_module_setup 'cnt'
}

#######################################
# Identify and normalize commands
#
# * Commands are exported as variables with full path
# * The caller function is responsible for checking that the target command is present (installed)
#
# Arguments:
#   None
# Outputs:
#   STDOUT: None
#   STDERR: None
# Returns:
#   0: always ok
#######################################
function _bl64_cnt_set_command() {
  bl64_dbg_lib_show_function

  case "$BL64_OS_DISTRO" in
  ${BL64_OS_UB}-* | ${BL64_OS_DEB}-* | ${BL64_OS_KL}-*)
    BL64_CNT_CMD_PODMAN='/usr/bin/podman'
    BL64_CNT_CMD_DOCKER='/usr/bin/docker'
    ;;
  ${BL64_OS_FD}-* | ${BL64_OS_AMZ}-* | ${BL64_OS_CNT}-* | ${BL64_OS_RHEL}-* | ${BL64_OS_ALM}-* | ${BL64_OS_OL}-* | ${BL64_OS_RCK}-*)
    BL64_CNT_CMD_PODMAN='/usr/bin/podman'
    BL64_CNT_CMD_DOCKER='/usr/bin/docker'
    ;;
  ${BL64_OS_SLES}-*)
    BL64_CNT_CMD_PODMAN='/usr/bin/podman'
    BL64_CNT_CMD_DOCKER='/usr/bin/docker'
    ;;
  ${BL64_OS_ALP}-*)
    BL64_CNT_CMD_PODMAN='/usr/bin/podman'
    BL64_CNT_CMD_DOCKER='/usr/bin/docker'
    ;;
  ${BL64_OS_MCOS}-*)
    # Podman is not available for MacOS
    BL64_CNT_CMD_PODMAN="$BL64_VAR_INCOMPATIBLE"
    # Docker is available using docker-desktop
    BL64_CNT_CMD_DOCKER='/usr/local/bin/docker'
    ;;
  *)
    bl64_check_alert_unsupported
    return $?
    ;;
  esac

  bl64_dbg_lib_show_comments 'detect and set current container driver'
  if [[ -x "$BL64_CNT_CMD_DOCKER" ]]; then
    BL64_CNT_DRIVER="$BL64_CNT_DRIVER_DOCKER"
  elif [[ -x "$BL64_CNT_CMD_PODMAN" ]]; then
    BL64_CNT_DRIVER="$BL64_CNT_DRIVER_PODMAN"
  else
    bl64_msg_show_error "unable to find a container manager (${BL64_CNT_CMD_DOCKER}, ${BL64_CNT_CMD_PODMAN})"
    return $BL64_LIB_ERROR_APP_MISSING
  fi
  bl64_dbg_lib_show_vars 'BL64_CNT_DRIVER'

  return 0
}

#######################################
# Create command sets for common options
#
# Arguments:
#   None
# Outputs:
#   STDOUT: None
#   STDERR: None
# Returns:
#   0: always ok
#######################################
function _bl64_cnt_set_options() {
  bl64_dbg_lib_show_function

  #
  # Standard CLI flags
  #
  # * Common to both podman and docker
  #

  # shellcheck disable=SC2034
  BL64_CNT_SET_DEBUG='--debug' &&
    BL64_CNT_SET_ENTRYPOINT='--entrypoint' &&
    BL64_CNT_SET_FILE='--file' &&
    BL64_CNT_SET_FILTER='--filter' &&
    BL64_CNT_SET_INTERACTIVE='--interactive' &&
    BL64_CNT_SET_LOG_LEVEL='--log-level' &&
    BL64_CNT_SET_NO_CACHE='--no-cache' &&
    BL64_CNT_SET_PASSWORD_STDIN='--password-stdin' &&
    BL64_CNT_SET_PASSWORD='--password' &&
    BL64_CNT_SET_QUIET='--quiet' &&
    BL64_CNT_SET_RM='--rm' &&
    BL64_CNT_SET_TAG='--tag' &&
    BL64_CNT_SET_TTY='--tty' &&
    BL64_CNT_SET_USERNAME='--username' &&
    BL64_CNT_SET_VERSION='version'

  #
  # Common parameter values
  #
  # * Common to both podman and docker
  #

  # shellcheck disable=SC2034
  BL64_CNT_SET_FILTER_ID='{{.ID}}' &&
    BL64_CNT_SET_FILTER_NAME='{{.Names}}' &&
    BL64_CNT_SET_LOG_LEVEL_DEBUG='debug' &&
    BL64_CNT_SET_LOG_LEVEL_ERROR='error' &&
    BL64_CNT_SET_LOG_LEVEL_INFO='info' &&
    BL64_CNT_SET_STATUS_RUNNING='running'

  return 0
}

#######################################
# Set and prepare module paths
#
# * Global paths only
# * If preparation fails the whole module fails
#
# Arguments:
#   $1: configuration file name
#   $2: credential file name
# Outputs:
#   STDOUT: None
#   STDERR: check errors
# Returns:
#   0: paths prepared ok
#   >0: failed to prepare paths
#######################################
# shellcheck disable=SC2120
function bl64_cnt_set_paths() {
  bl64_dbg_lib_show_function "$@"

  # shellcheck disable=SC2034
  case "$BL64_OS_DISTRO" in
  ${BL64_OS_UB}-* | ${BL64_OS_DEB}-* | ${BL64_OS_KL}-*)
    BL64_CNT_PATH_DOCKER_SOCKET='/var/run/docker.sock'
    ;;
  ${BL64_OS_FD}-* | ${BL64_OS_AMZ}-* | ${BL64_OS_CNT}-* | ${BL64_OS_RHEL}-* | ${BL64_OS_ALM}-* | ${BL64_OS_OL}-* | ${BL64_OS_RCK}-*)
    BL64_CNT_PATH_DOCKER_SOCKET='/var/run/docker.sock'
    ;;
  ${BL64_OS_SLES}-*)
    BL64_CNT_PATH_DOCKER_SOCKET='/var/run/docker.sock'
    ;;
  ${BL64_OS_ALP}-*)
    BL64_CNT_PATH_DOCKER_SOCKET='/var/run/docker.sock'
    ;;
  ${BL64_OS_MCOS}-*)
    BL64_CNT_PATH_DOCKER_SOCKET='/var/run/docker.sock'
    ;;
  *) bl64_check_alert_unsupported ;;
  esac

  bl64_dbg_lib_show_vars 'BL64_CNT_PATH_DOCKER_SOCKET'
  return 0
}

#######################################
# BashLib64 / Module / Functions / Interact with container engines
#######################################

#######################################
# Check if the current process is running inside a container
#
# * detection is best effort and not guaranteed to cover all possible implementations
#
# Arguments:
#   None
# Outputs:
#   STDOUT: None
#   STDERR: None
# Returns:
#   0: it is
#   BL64_LIB_ERROR_IS_NOT
#######################################
function bl64_cnt_is_inside_container() {
  bl64_dbg_lib_show_function

  _bl64_cnt_find_file_marker '/run/.containerenv' && return 0
  _bl64_cnt_find_file_marker '/run/container_id' && return 0
  _bl64_cnt_find_variable_marker 'container' && return 0
  _bl64_cnt_find_variable_marker 'DOCKER_CONTAINER' && return 0
  _bl64_cnt_find_variable_marker 'KUBERNETES_SERVICE_HOST' && return 0

  return $BL64_LIB_ERROR_IS_NOT
}

function _bl64_cnt_find_file_marker() {
  bl64_dbg_lib_show_function "$@"
  local marker="$1"
  bl64_dbg_lib_show_info "check for file marker (${marker})"
  [[ -f "$marker" ]]
}

function _bl64_cnt_find_variable_marker() {
  bl64_dbg_lib_show_function "$@"
  local marker="$1"
  bl64_dbg_lib_show_info "check for variable marker (${marker})"
  [[ -v "$marker" ]]
}

#######################################
# Logins the container engine to a container registry. The password is taken from STDIN
#
# Arguments:
#   $1: user
#   $2: registry
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_cnt_login_stdin() {
  bl64_dbg_lib_show_function "$@"
  local user="${1:-}"
  local registry="${2:-}"

  bl64_check_module 'BL64_CNT_MODULE' &&
    bl64_check_parameter 'user' &&
    bl64_check_parameter 'registry' ||
    return $?

  bl64_msg_show_lib_subtask "${_BL64_CNT_TXT_LOGIN_REGISTRY} (${user}@${registry})"
  "_bl64_cnt_${BL64_CNT_DRIVER}_login" "$user" "$BL64_VAR_DEFAULT" "$BL64_CNT_FLAG_STDIN" "$registry"
}

#######################################
# Logins the container engine to a container registry. The password is stored in a regular file
#
# Arguments:
#   $1: user
#   $2: file
#   $3: registry
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_cnt_login_file() {
  bl64_dbg_lib_show_function "$@"
  local user="${1:-}"
  local file="${2:-}"
  local registry="${3:-}"

  bl64_check_module 'BL64_CNT_MODULE' &&
    bl64_check_parameter 'user' &&
    bl64_check_parameter 'file' &&
    bl64_check_parameter 'registry' &&
    bl64_check_file "$file" ||
    return $?

  bl64_msg_show_lib_subtask "${_BL64_CNT_TXT_LOGIN_REGISTRY} (${user}@${registry})"
  "_bl64_cnt_${BL64_CNT_DRIVER}_login" "$user" "$BL64_VAR_DEFAULT" "$file" "$registry"
}

#######################################
# Logins the container engine to a container. The password is passed as parameter
#
# Arguments:
#   $1: user
#   $2: password
#   $3: registry
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_cnt_login() {
  bl64_dbg_lib_show_function "$@"
  local user="${1:-}"
  local password="${2:-}"
  local registry="${3:-}"

  bl64_check_module 'BL64_CNT_MODULE' &&
    bl64_check_parameter 'user' &&
    bl64_check_parameter 'password' &&
    bl64_check_parameter 'registry' ||
    return $?

  bl64_msg_show_lib_subtask "${_BL64_CNT_TXT_LOGIN_REGISTRY} (${user}@${registry})"
  "_bl64_cnt_${BL64_CNT_DRIVER}_login" "$user" "$password" "$BL64_VAR_DEFAULT" "$registry"
}

#######################################
# Open a container image using sh
#
# * Ignores entrypointt
#
# Arguments:
#   $1: container
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_cnt_run_sh() {
  bl64_dbg_lib_show_function "$@"
  local container="$1"

  bl64_check_parameter 'container' || return $?
  # shellcheck disable=SC2086
  bl64_cnt_run_interactive $BL64_CNT_SET_ENTRYPOINT 'sh' "$container"
}

#######################################
# Runs a container image using interactive settings
#
# * Allows signals
# * Attaches tty
#
# Arguments:
#   $@: arguments are passed as-is
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_cnt_run_interactive() {
  bl64_dbg_lib_show_function "$@"

  bl64_check_module 'BL64_CNT_MODULE' ||
    return $?

  "_bl64_cnt_${BL64_CNT_DRIVER}_run_interactive" "$@"
}

#######################################
# Builds a container source
#
# Arguments:
#   $1: ui context. Format: full path
#   $2: dockerfile path. Format: relative to the build context
#   $3: tag to be applied to the resulting source. Format: docker tag
#   $@: arguments are passed as-is to the command
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_cnt_build() {
  bl64_dbg_lib_show_function "$@"
  local context="$1"
  local file="${2:-Dockerfile}"
  local tag="${3:-latest}"

  bl64_check_module 'BL64_CNT_MODULE' &&
    bl64_check_parameter 'context' &&
    bl64_check_directory "$context" &&
    bl64_check_file "${context}/${file}" ||
    return $?

  # Remove used parameters
  shift
  shift
  shift

  bl64_msg_show_lib_subtask "${_BL64_CNT_TXT_BUILD} (Dockerfile: ${file} ${BL64_MSG_COSMETIC_PIPE} Tag: ${tag})"
  bl64_bsh_run_pushd "${context}" &&
    "_bl64_cnt_${BL64_CNT_DRIVER}_build" "$file" "$tag" "$@" &&
    bl64_bsh_run_popd
}

#######################################
# Push a local source to the target container registry
#
# * Image is already present in the local destination
#
# Arguments:
#   $1: source. Format: IMAGE:TAG
#   $2: destination. Format: REPOSITORY/IMAGE:TAG
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_cnt_push() {
  bl64_dbg_lib_show_function "$@"
  local source="$1"
  local destination="$2"

  bl64_check_module 'BL64_CNT_MODULE' &&
    bl64_check_parameter 'source' &&
    bl64_check_parameter 'destination' ||
    return $?

  bl64_msg_show_lib_subtask "${_BL64_CNT_TXT_PUSH} (${source} ${BL64_MSG_COSMETIC_ARROW2} ${destination})"
  "_bl64_cnt_${BL64_CNT_DRIVER}_push" "$source" "$destination"
}

#######################################
# Pull a remote container image to the local registry
#
# Arguments:
#   $1: source. Format: [REPOSITORY/]IMAGE:TAG
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_cnt_pull() {
  bl64_dbg_lib_show_function "$@"
  local source="$1"

  bl64_check_module 'BL64_CNT_MODULE' &&
    bl64_check_parameter 'source' ||
    return $?

  bl64_msg_show_lib_subtask "${_BL64_CNT_TXT_PULL} (${source})"
  "_bl64_cnt_${BL64_CNT_DRIVER}_pull" "$source"
}

function _bl64_cnt_login_put_password() {
  bl64_dbg_lib_show_function "$@"
  local password="$1"
  local file="$2"

  if [[ "$password" != "$BL64_VAR_DEFAULT" ]]; then
    printf '%s\n' "$password"
  elif [[ "$file" != "$BL64_VAR_DEFAULT" ]]; then
    "$BL64_OS_CMD_CAT" "$file"
  elif [[ "$file" == "$BL64_CNT_FLAG_STDIN" ]]; then
    "$BL64_OS_CMD_CAT"
  fi
}

#######################################
# Assigns a new name to an existing image
#
# Arguments:
#   $1: source. Format: image[:tag]
#   $2: target. Format: image[:tag]
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_cnt_tag() {
  bl64_dbg_lib_show_function "$@"
  local source="$1"
  local target="$2"

  bl64_check_module 'BL64_CNT_MODULE' &&
    bl64_check_parameter 'source' &&
    bl64_check_parameter 'target' ||
    return $?

  bl64_msg_show_lib_subtask "${_BL64_CNT_TXT_TAG} (${source} ${BL64_MSG_COSMETIC_ARROW2} ${target})"
  "_bl64_cnt_${BL64_CNT_DRIVER}_tag" "$source" "$target"
}

#######################################
# Runs a container image
#
# Arguments:
#   $@: arguments are passed as-is
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_cnt_run() {
  bl64_dbg_lib_show_function "$@"

  bl64_check_module 'BL64_CNT_MODULE' ||
    return $?

  "_bl64_cnt_${BL64_CNT_DRIVER}_run" "$@"
}

#######################################
# Runs the container manager CLI
#
# * Function provided as-is to catch cases where there is no wrapper
# * Calling function must make sure that the current driver supports provided arguments
#
# Arguments:
#   $@: arguments are passed as-is
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_cnt_cli() {
  bl64_dbg_lib_show_function "$@"

  bl64_check_module 'BL64_CNT_MODULE' ||
    return $?

  "bl64_cnt_run_${BL64_CNT_DRIVER}" "$@"
}

#######################################
# Determine if the container is running
#
# * Look for one or more instances of the container
# * The container status is Running
# * Filter by one of: name, id
#
# Arguments:
#   $1: name. Exact match
#   $2: id
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: true
#   >0: BL64_LIB_ERROR_IS_NOT or cmd error
#######################################
function bl64_cnt_container_is_running() {
  bl64_dbg_lib_show_function "$@"
  local name="${1:-${BL64_VAR_DEFAULT}}"
  local id="${2:-${BL64_VAR_DEFAULT}}"
  local result=''

  if [[ "$name" == "$BL64_VAR_DEFAULT" && "$id" == "$BL64_VAR_DEFAULT" ]]; then
    bl64_check_alert_parameter_invalid "$BL64_VAR_DEFAULT" "$_BL64_CNT_TXT_MISSING_FILTER (ID, Name)"
    return $?
  fi

  bl64_check_module 'BL64_CNT_MODULE' ||
    return $?

  result="$("_bl64_cnt_${BL64_CNT_DRIVER}_ps_filter" "$name" "$id" "$BL64_CNT_SET_STATUS_RUNNING")" ||
    return $?
  bl64_dbg_lib_show_vars 'result'

  if [[ "$name" != "$BL64_VAR_DEFAULT" ]]; then
    [[ "$result" == "$name" ]] || return $BL64_LIB_ERROR_IS_NOT
  elif [[ "$id" == "$BL64_VAR_DEFAULT" ]]; then
    [[ "$result" != "$id" ]] || return $BL64_LIB_ERROR_IS_NOT
  fi
}

#######################################
# Determine if the container network is defined
#
# Arguments:
#   $1: network name
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: defined
#   >0: BL64_LIB_ERROR_IS_NOT or error
#######################################
function bl64_cnt_network_is_defined() {
  bl64_dbg_lib_show_function "$@"
  local network="$1"

  bl64_check_module 'BL64_CNT_MODULE' &&
    bl64_check_parameter 'network' ||
    return $?

  "_bl64_cnt_${BL64_CNT_DRIVER}_network_is_defined" "$network"
}

#######################################
# Create a container network
#
# Arguments:
#   $1: network name
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_cnt_network_create() {
  bl64_dbg_lib_show_function "$@"
  local network="$1"

  bl64_check_module 'BL64_CNT_MODULE' &&
    bl64_check_parameter 'network' ||
    return $?

  if bl64_cnt_network_is_defined "$network"; then
    bl64_msg_show_lib_info "${_BL64_CNT_TXT_EXISTING_NETWORK} (${network})"
    return 0
  fi

  bl64_msg_show_lib_subtask "${_BL64_CNT_TXT_CREATE_NETWORK} (${network})"
  "_bl64_cnt_${BL64_CNT_DRIVER}_network_create" "$network"
}

#
# Docker
#

#######################################
# Command wrapper: docker login
#
# Arguments:
#   $1: user
#   $2: password
#   $3: file
#   $4: registry
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function _bl64_cnt_docker_login() {
  bl64_dbg_lib_show_function "$@"
  local user="$1"
  local password="$2"
  local file="$3"
  local registry="$4"

  # shellcheck disable=SC2086
  _bl64_cnt_login_put_password "$password" "$file" |
    bl64_cnt_run_docker \
      login \
      $BL64_CNT_SET_USERNAME "$user" \
      $BL64_CNT_SET_PASSWORD_STDIN \
      "$registry"
}

#######################################
# Command wrapper: docker run
#
# * Provides verbose and debug support
#
# Arguments:
#   $@: arguments are passed as-is to the command
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function _bl64_cnt_docker_run_interactive() {
  bl64_dbg_lib_show_function "$@"

  bl64_check_parameters_none "$#" || return $?

  # shellcheck disable=SC2086
  bl64_cnt_run_docker \
    run \
    $BL64_CNT_SET_RM \
    $BL64_CNT_SET_INTERACTIVE \
    $BL64_CNT_SET_TTY \
    "$@"

}

#######################################
# Command wrapper: docker
#
# * Provides debug support
#
# Arguments:
#   $@: arguments are passed as-is to the command
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_cnt_run_docker() {
  bl64_dbg_lib_show_function "$@"
  local verbose='error'
  local debug=' '

  bl64_check_parameters_none "$#" &&
    bl64_check_module 'BL64_CNT_MODULE' &&
    bl64_check_command "$BL64_CNT_CMD_DOCKER" ||
    return $?

  if bl64_dbg_lib_command_enabled; then
    verbose="$BL64_CNT_SET_LOG_LEVEL_DEBUG"
    debug="$BL64_CNT_SET_DEBUG"
  fi

  bl64_dbg_lib_trace_start
  # shellcheck disable=SC2086
  "$BL64_CNT_CMD_DOCKER" \
    $BL64_CNT_SET_LOG_LEVEL "$verbose" \
    $debug \
    "$@"
  bl64_dbg_lib_trace_stop
}

#######################################
# Command wrapper: docker build
#
# Arguments:
#   $1: file
#   $2: tag
#   $@: arguments are passed as-is to the command
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function _bl64_cnt_docker_build() {
  bl64_dbg_lib_show_function "$@"
  local file="$1"
  local tag="$2"

  # Remove used parameters
  shift
  shift

  # shellcheck disable=SC2086
  bl64_cnt_run_docker \
    build \
    --progress plain \
    $BL64_CNT_SET_TAG "$tag" \
    $BL64_CNT_SET_FILE "$file" \
    "$@" .
}

#######################################
# Command wrapper: docker push
#
# Arguments:
#   $1: source
#   $2: destination
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function _bl64_cnt_docker_push() {
  bl64_dbg_lib_show_function "$@"
  local source="$1"
  local destination="$2"

  bl64_cnt_run_docker \
    tag \
    "$source" \
    "$destination"

  bl64_cnt_run_docker \
    push \
    "$destination"
}

#######################################
# Command wrapper: docker pull
#
# Arguments:
#   $1: source
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function _bl64_cnt_docker_pull() {
  bl64_dbg_lib_show_function "$@"
  local source="$1"

  bl64_cnt_run_docker \
    pull \
    "${source}"
}

#######################################
# Command wrapper: docker tag
#
# Arguments:
#   $1: source. Format: image[:tag]
#   $2: target. Format: image[:tag]
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function _bl64_cnt_docker_tag() {
  bl64_dbg_lib_show_function "$@"
  local source="$1"
  local target="$2"

  bl64_cnt_run_docker \
    tag \
    "$source" \
    "$target"
}

#######################################
# Command wrapper: docker run
#
# * Provides verbose and debug support
#
# Arguments:
#   $@: arguments are passed as-is to the command
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function _bl64_cnt_docker_run() {
  bl64_dbg_lib_show_function "$@"

  # shellcheck disable=SC2086
  bl64_cnt_run_docker \
    run \
    "$@"

}

#######################################
# Command wrapper: detect network
#
# Arguments:
#   $1: network name
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: defined
#   >0: BL64_LIB_ERROR_IS_NOT or error
#######################################
function _bl64_cnt_docker_network_is_defined() {
  bl64_dbg_lib_show_function "$@"
  local network="$1"
  local network_id=''

  network_id="$(
    bl64_cnt_run_docker \
      network ls \
      "$BL64_CNT_SET_QUIET" \
      "$BL64_CNT_SET_FILTER" "name=${network}"
  )"

  bl64_dbg_lib_show_info "check if the network is defined ([${network}] == [${network_id}])"
  [[ -n "$network_id" ]] || return $BL64_LIB_ERROR_IS_NOT
}

#######################################
# Command wrapper: create network
#
# Arguments:
#   $1: network name
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function _bl64_cnt_docker_network_create() {
  bl64_dbg_lib_show_function "$@"
  local network="$1"

  bl64_cnt_run_docker \
    network create \
    "$network"
}

#######################################
# Command wrapper: ps with filters
#
# Arguments:
#   $1: name
#   $2: id
#   $3: status
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function _bl64_cnt_docker_ps_filter() {
  bl64_dbg_lib_show_function "$@"
  local name="$1"
  local id="$2"
  local status="$3"
  local format=''
  local filter=''

  if [[ "$name" != "$BL64_VAR_DEFAULT" ]]; then
    filter="$BL64_CNT_SET_FILTER name=${name}"
    format="$BL64_CNT_SET_FILTER_NAME"
  elif [[ "$id" != "$BL64_VAR_DEFAULT" ]]; then
    filter="$BL64_CNT_SET_FILTER id=${id}"
    format="$BL64_CNT_SET_FILTER_ID"
  fi
  [[ "$status" != "$BL64_VAR_DEFAULT" ]] && filter_status="$BL64_CNT_SET_FILTER status=${status}"

  # shellcheck disable=SC2086
  bl64_cnt_run_docker \
    ps \
    ${filter} ${filter_status} --format "$format"
}

#
# Podman
#

#######################################
# Command wrapper: podman login
#
# Arguments:
#   $1: user
#   $2: password
#   $3: file
#   $4: registry
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function _bl64_cnt_podman_login() {
  bl64_dbg_lib_show_function "$@"
  local user="$1"
  local password="$2"
  local file="$3"
  local registry="$4"

  # shellcheck disable=SC2086
  _bl64_cnt_login_put_password "$password" "$file" |
    bl64_cnt_run_podman \
      login \
      $BL64_CNT_SET_USERNAME "$user" \
      $BL64_CNT_SET_PASSWORD_STDIN \
      "$registry"
}

#######################################
# Command wrapper: podman run
#
# * Provides verbose and debug support
#
# Arguments:
#   $@: arguments are passed as-is to the command
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function _bl64_cnt_podman_run_interactive() {
  bl64_dbg_lib_show_function "$@"

  bl64_check_parameters_none "$#" || return $?

  # shellcheck disable=SC2086
  bl64_cnt_run_podman \
    run \
    $BL64_CNT_SET_RM \
    $BL64_CNT_SET_INTERACTIVE \
    $BL64_CNT_SET_TTY \
    "$@"
}

#######################################
# Command wrapper: podman
#
# * Provides debug support
#
# Arguments:
#   $@: arguments are passed as-is to the command
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_cnt_run_podman() {
  bl64_dbg_lib_show_function "$@"
  local verbose='error'

  bl64_check_parameters_none "$#" &&
    bl64_check_module 'BL64_CNT_MODULE' &&
    bl64_check_command "$BL64_CNT_CMD_PODMAN" ||
    return $?

  bl64_dbg_lib_command_enabled && verbose="$BL64_CNT_SET_LOG_LEVEL_DEBUG"

  bl64_dbg_lib_trace_start
  # shellcheck disable=SC2086
  "$BL64_CNT_CMD_PODMAN" \
    $BL64_CNT_SET_LOG_LEVEL "$verbose" \
    "$@"
  bl64_dbg_lib_trace_stop
}

#######################################
# Command wrapper: podman build
#
# Arguments:
#   $1: file
#   $2: tag
#   $@: arguments are passed as-is to the command
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function _bl64_cnt_podman_build() {
  bl64_dbg_lib_show_function "$@"
  local file="$1"
  local tag="$2"

  # Remove used parameters
  shift
  shift

  # shellcheck disable=SC2086
  bl64_cnt_run_podman \
    build \
    $BL64_CNT_SET_TAG "$tag" \
    $BL64_CNT_SET_FILE "$file" \
    "$@" .
}

#######################################
# Command wrapper: podman push
#
# Arguments:
#   $1: source
#   $2: destination
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function _bl64_cnt_podman_push() {
  bl64_dbg_lib_show_function "$@"
  local source="$1"
  local destination="$2"

  bl64_cnt_run_podman \
    push \
    "localhost/${source}" \
    "$destination"
}

#######################################
# Command wrapper: podman pull
#
# Arguments:
#   $1: source
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function _bl64_cnt_podman_pull() {
  bl64_dbg_lib_show_function "$@"
  local source="$1"

  bl64_cnt_run_podman \
    pull \
    "${source}"
}

#######################################
# Command wrapper: podman tag
#
# Arguments:
#   $1: source. Format: image[:tag]
#   $2: target. Format: image[:tag]
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function _bl64_cnt_podman_tag() {
  bl64_dbg_lib_show_function "$@"
  local source="$1"
  local target="$2"

  bl64_cnt_run_podman \
    tag \
    "$source" \
    "$target"
}

#######################################
# Command wrapper: podman run
#
# * Provides verbose and debug support
#
# Arguments:
#   $@: arguments are passed as-is to the command
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function _bl64_cnt_podman_run() {
  bl64_dbg_lib_show_function "$@"

  bl64_cnt_run_podman \
    run \
    "$@"
}

#######################################
# Command wrapper: detect network
#
# Arguments:
#   $1: network name
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: defined
#   >0: BL64_LIB_ERROR_IS_NOT or error
#######################################
function _bl64_cnt_podman_network_is_defined() {
  bl64_dbg_lib_show_function "$@"
  local network="$1"
  local network_id=''

  network_id="$(
    bl64_cnt_run_podman \
      network ls \
      "$BL64_CNT_SET_QUIET" \
      "$BL64_CNT_SET_FILTER" "name=${network}"
  )"

  bl64_dbg_lib_show_info "check if the network is defined ([${network}] == [${network_id}])"
  [[ -n "$network_id" ]] || return $BL64_LIB_ERROR_IS_NOT
}

#######################################
# Command wrapper: create network
#
# Arguments:
#   $1: network name
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: defined
#   >0: not defined or error
#######################################
function _bl64_cnt_podman_network_create() {
  bl64_dbg_lib_show_function "$@"
  local network="$1"

  bl64_cnt_run_podman \
    network create \
    "$network"
}

#######################################
# Command wrapper: ps with filters
#
# Arguments:
#   $1: name
#   $2: id
#   $3: status
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: defined
#   >0: not defined or error
#######################################
function _bl64_cnt_podman_ps_filter() {
  bl64_dbg_lib_show_function "$@"
  local name="$1"
  local id="$2"
  local status="$3"
  local format=''
  local filter=''

  if [[ "$name" != "$BL64_VAR_DEFAULT" ]]; then
    filter="$BL64_CNT_SET_FILTER name=${name}"
    format='{{.NAME}}'
  elif [[ "$id" != "$BL64_VAR_DEFAULT" ]]; then
    filter="$BL64_CNT_SET_FILTER id=${id}"
    format="$BL64_CNT_SET_FILTER_ID"
  fi
  [[ "$status" != "$BL64_VAR_DEFAULT" ]] && filter_status="$BL64_CNT_SET_FILTER status=${status}"

  # shellcheck disable=SC2086
  bl64_cnt_run_podman \
    ps \
    ${filter} ${filter_status} --format "$format"
}

#######################################
# Check that the script is running inside a container
#
# Arguments:
#   None
# Outputs:
#   STDOUT: none
#   STDERR: message
# Returns:
#   0: check ok
#   BL64_LIB_ERROR_TASK_REQUIREMENTS
#######################################
function bl64_cnt_check_in_container() {
  bl64_dbg_lib_show_function
  bl64_cnt_is_inside_container && return 0
  bl64_msg_show_error "${_BL64_CNT_TXT_ERROR_RUN_IN_CONTAINER}"
  return $BL64_LIB_ERROR_TASK_REQUIREMENTS
}

#######################################
# Check that the script is not running inside a container
#
# Arguments:
#   None
# Outputs:
#   STDOUT: none
#   STDERR: message
# Returns:
#   0: check ok
#   BL64_LIB_ERROR_TASK_REQUIREMENTS
#######################################
function bl64_cnt_check_not_in_container() {
  bl64_dbg_lib_show_function
  bl64_cnt_is_inside_container || return 0
  bl64_msg_show_error "${_BL64_CNT_TXT_ERROR_RUN_NOT_IN_CONTAINER}"
  return $BL64_LIB_ERROR_TASK_REQUIREMENTS
}

#!/usr/bin/env bash
#######################################
# BashLib64 / Bash automation library
#
# Author: serdigital64 (https://github.com/serdigital64)
# Repository: https://github.com/automation64/bashlib64
#
# Copyright 2022 SerDigital64@gmail.com
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#######################################

#######################################
# BashLib64 / Module / Globals / Manage local filesystem
#######################################

# shellcheck disable=SC2034
{
  declare BL64_FS_VERSION='5.7.0'

  declare BL64_FS_MODULE='0'

  declare BL64_FS_PATH_TEMPORAL=''
  declare BL64_FS_PATH_CACHE=''
  # Location for temporary files generated by bashlib64 functions
  declare BL64_FS_PATH_TMP='/tmp'

  declare BL64_FS_CMD_CHMOD=''
  declare BL64_FS_CMD_CHOWN=''
  declare BL64_FS_CMD_CP=''
  declare BL64_FS_CMD_FIND=''
  declare BL64_FS_CMD_LN=''
  declare BL64_FS_CMD_LS=''
  declare BL64_FS_CMD_MKDIR=''
  declare BL64_FS_CMD_MKTEMP=''
  declare BL64_FS_CMD_MV=''
  declare BL64_FS_CMD_RM=''
  declare BL64_FS_CMD_TOUCH=''

  declare BL64_FS_ALIAS_CHOWN_DIR=''
  declare BL64_FS_ALIAS_CP_FILE=''
  declare BL64_FS_ALIAS_LN_SYMBOLIC=''
  declare BL64_FS_ALIAS_LS_FILES=''
  declare BL64_FS_ALIAS_MKDIR_FULL=''
  declare BL64_FS_ALIAS_MV=''
  declare BL64_FS_ALIAS_RM_FILE=''
  declare BL64_FS_ALIAS_RM_FULL=''

  declare BL64_FS_SET_CHMOD_RECURSIVE=''
  declare BL64_FS_SET_CHMOD_VERBOSE=''
  declare BL64_FS_SET_CHOWN_RECURSIVE=''
  declare BL64_FS_SET_CHOWN_VERBOSE=''
  declare BL64_FS_SET_CP_FORCE=''
  declare BL64_FS_SET_CP_RECURSIVE=''
  declare BL64_FS_SET_CP_VERBOSE=''
  declare BL64_FS_SET_FIND_NAME=''
  declare BL64_FS_SET_FIND_PRINT=''
  declare BL64_FS_SET_FIND_RUN=''
  declare BL64_FS_SET_FIND_STAY=''
  declare BL64_FS_SET_FIND_TYPE_DIR=''
  declare BL64_FS_SET_FIND_TYPE_FILE=''
  declare BL64_FS_SET_LN_FORCE=''
  declare BL64_FS_SET_LN_SYMBOLIC=''
  declare BL64_FS_SET_LN_VERBOSE=''
  declare BL64_FS_SET_LS_NOCOLOR=''
  declare BL64_FS_SET_MKDIR_PARENTS=''
  declare BL64_FS_SET_MKDIR_VERBOSE=''
  declare BL64_FS_SET_MKTEMP_DIRECTORY=''
  declare BL64_FS_SET_MKTEMP_QUIET=''
  declare BL64_FS_SET_MKTEMP_TMPDIR=''
  declare BL64_FS_SET_MV_FORCE=''
  declare BL64_FS_SET_MV_VERBOSE=''
  declare BL64_FS_SET_RM_FORCE=''
  declare BL64_FS_SET_RM_RECURSIVE=''
  declare BL64_FS_SET_RM_VERBOSE=''

  #
  # File permission modes
  #
  # shellcheck disable=SC2034
  declare BL64_FS_UMASK_RW_USER='u=rwx,g=,o='
  declare BL64_FS_UMASK_RW_GROUP='u=rwx,g=rwx,o='
  declare BL64_FS_UMASK_RW_ALL='u=rwx,g=rwx,o=rwx'
  declare BL64_FS_UMASK_RW_USER_RO_ALL='u=rwx,g=rx,o=rx'
  declare BL64_FS_UMASK_RW_GROUP_RO_ALL='u=rwx,g=rwx,o=rx'

  declare BL64_FS_SAFEGUARD_POSTFIX='.bl64_fs_safeguard'

  declare BL64_FS_TMP_PREFIX='bl64tmp'

  declare _BL64_FS_TXT_CLEANUP_CACHES='clean up OS cache contents'
  declare _BL64_FS_TXT_CLEANUP_LOGS='clean up OS logs'
  declare _BL64_FS_TXT_CLEANUP_TEMP='clean up OS temporary files'
  declare _BL64_FS_TXT_CREATE_DIR_PATH='create directory'
  declare _BL64_FS_TXT_MERGE_ADD_SOURCE='merge content from source'
  declare _BL64_FS_TXT_MERGE_DIRS='merge directories content'
  declare _BL64_FS_TXT_RESTORE_OBJECT='restore original file from backup'
  declare _BL64_FS_TXT_SAFEGUARD_FAILED='unable to safeguard requested path'
  declare _BL64_FS_TXT_SAFEGUARD_OBJECT='backup original file'
  declare _BL64_FS_TXT_SYMLINK_CREATE='create symbolick link'
  declare _BL64_FS_TXT_SYMLINK_EXISTING='target symbolick link is already present. No further action taken'
  declare _BL64_FS_TXT_CREATE_FILE='create empty regular file'
  declare _BL64_FS_TXT_UMASK_SET='temporary change current script umask'

  declare _BL64_FS_TXT_WARN_EXISTING_FILE='target file is already created'
  declare _BL64_FS_TXT_ERROR_NOT_TMPDIR='provided directory was not created by bl64_fs_create_tmpdir'
  declare _BL64_FS_TXT_ERROR_NOT_TMPFILE='provided directory was not created by bl64_fs_create_tmpfile'
  declare _BL64_FS_TXT_ERROR_INVALID_FILE_TARGET='invalid file destination. Provided path exists and is a directory'
  declare _BL64_FS_TXT_ERROR_INVALID_DIR_TARGET='invalid directory destination. Provided path exists and is a file'

  declare _BL64_FS_TXT_SET_MODE='set new file permissions'
  declare _BL64_FS_TXT_SET_OWNER='set new file owner'
  declare _BL64_FS_TXT_SET_GROUP='set new file group'
}

#######################################
# BashLib64 / Module / Setup / Manage local filesystem
#######################################

#
# Deprecation aliases
#
# * Aliases to deprecated functions 
# * Needed to maintain compatibility up to N-2 versions
#

function bl64_fs_create_dir() { bl64_fs_dir_create "$@"; }
function bl64_fs_cp_file() { bl64_fs_run_cp "$BL64_FS_SET_CP_FORCE" "$@"; }
function bl64_fs_cp_dir() { bl64_fs_run_cp "$BL64_FS_SET_CP_FORCE" "$BL64_FS_SET_CP_RECURSIVE" "$@"; }
function bl64_fs_ln_symbolic() { bl64_fs_create_symlink "$1" "$2"; }
function bl64_fs_rm_file() { bl64_fs_file_remove "$@"; }
function bl64_fs_rm_full() { bl64_fs_path_remove "$@"; }

#######################################
# Setup the bashlib64 module
#
# * Warning: bootstrap function
#
# Arguments:
#   None
# Outputs:
#   STDOUT: None
#   STDERR: None
# Returns:
#   0: setup ok
#   >0: setup failed
#######################################
function bl64_fs_setup() {
  [[ -z "$BL64_VERSION" ]] &&
    echo 'Error: bashlib64-module-core.bash should the last module to be sourced' &&
    return 21

  # shellcheck disable=SC2034
  bl64_lib_module_imported 'BL64_CHECK_MODULE' &&
    bl64_lib_module_imported 'BL64_DBG_MODULE' &&
    bl64_dbg_lib_show_function &&
    bl64_lib_module_imported 'BL64_OS_MODULE' &&
    bl64_lib_module_imported 'BL64_MSG_MODULE' &&
    bl64_lib_module_imported 'BL64_FMT_MODULE' &&
    _bl64_fs_set_command &&
    _bl64_fs_set_alias &&
    _bl64_fs_set_options &&
    BL64_FS_MODULE="$BL64_VAR_ON"
  bl64_check_alert_module_setup 'fs'
}

#######################################
# Identify and normalize common *nix OS commands
#
# * Commands are exported as variables with full path
# * Warning: bootstrap function
#
# Arguments:
#   None
# Outputs:
#   STDOUT: None
#   STDERR: None
# Returns:
#   0: always ok, even when the OS is not supported
#######################################
# Warning: bootstrap function
function _bl64_fs_set_command() {
  # shellcheck disable=SC2034
  case "$BL64_OS_DISTRO" in
  ${BL64_OS_UB}-* | ${BL64_OS_DEB}-* | ${BL64_OS_KL}-*)
    BL64_FS_CMD_CHMOD='/bin/chmod'
    BL64_FS_CMD_CHOWN='/bin/chown'
    BL64_FS_CMD_CP='/bin/cp'
    BL64_FS_CMD_FIND='/usr/bin/find'
    BL64_FS_CMD_LN='/bin/ln'
    BL64_FS_CMD_LS='/bin/ls'
    BL64_FS_CMD_MKDIR='/bin/mkdir'
    BL64_FS_CMD_MKTEMP='/bin/mktemp'
    BL64_FS_CMD_MV='/bin/mv'
    BL64_FS_CMD_RM='/bin/rm'
    BL64_FS_CMD_TOUCH='/usr/bin/touch'
    ;;
  ${BL64_OS_FD}-* | ${BL64_OS_AMZ}-* | ${BL64_OS_CNT}-* | ${BL64_OS_RHEL}-* | ${BL64_OS_ALM}-* | ${BL64_OS_OL}-* | ${BL64_OS_RCK}-*)
    BL64_FS_CMD_CHMOD='/usr/bin/chmod'
    BL64_FS_CMD_CHOWN='/usr/bin/chown'
    BL64_FS_CMD_CP='/usr/bin/cp'
    BL64_FS_CMD_FIND='/usr/bin/find'
    BL64_FS_CMD_LN='/bin/ln'
    BL64_FS_CMD_LS='/usr/bin/ls'
    BL64_FS_CMD_MKDIR='/usr/bin/mkdir'
    BL64_FS_CMD_MKTEMP='/usr/bin/mktemp'
    BL64_FS_CMD_MV='/usr/bin/mv'
    BL64_FS_CMD_RM='/usr/bin/rm'
    BL64_FS_CMD_TOUCH='/usr/bin/touch'
    ;;
  ${BL64_OS_SLES}-*)
    BL64_FS_CMD_CHMOD='/usr/bin/chmod'
    BL64_FS_CMD_CHOWN='/usr/bin/chown'
    BL64_FS_CMD_CP='/usr/bin/cp'
    BL64_FS_CMD_FIND='/usr/bin/find'
    BL64_FS_CMD_LN='/usr/bin/ln'
    BL64_FS_CMD_LS='/usr/bin/ls'
    BL64_FS_CMD_MKDIR='/usr/bin/mkdir'
    BL64_FS_CMD_MKTEMP='/usr/bin/mktemp'
    BL64_FS_CMD_MV='/usr/bin/mv'
    BL64_FS_CMD_RM='/usr/bin/rm'
    BL64_FS_CMD_TOUCH='/usr/bin/touch'
    ;;
  ${BL64_OS_ALP}-*)
    BL64_FS_CMD_CHMOD='/bin/chmod'
    BL64_FS_CMD_CHOWN='/bin/chown'
    BL64_FS_CMD_CP='/bin/cp'
    BL64_FS_CMD_FIND='/usr/bin/find'
    BL64_FS_CMD_LN='/bin/ln'
    BL64_FS_CMD_LS='/bin/ls'
    BL64_FS_CMD_MKDIR='/bin/mkdir'
    BL64_FS_CMD_MKTEMP='/bin/mktemp'
    BL64_FS_CMD_MV='/bin/mv'
    BL64_FS_CMD_RM='/bin/rm'
    BL64_FS_CMD_TOUCH='/bin/touch'
    ;;
  ${BL64_OS_MCOS}-*)
    BL64_FS_CMD_CHMOD='/bin/chmod'
    BL64_FS_CMD_CHOWN='/usr/sbin/chown'
    BL64_FS_CMD_CP='/bin/cp'
    BL64_FS_CMD_FIND='/usr/bin/find'
    BL64_FS_CMD_LN='/bin/ln'
    BL64_FS_CMD_LS='/bin/ls'
    BL64_FS_CMD_MKDIR='/bin/mkdir'
    BL64_FS_CMD_MKTEMP='/usr/bin/mktemp'
    BL64_FS_CMD_MV='/bin/mv'
    BL64_FS_CMD_RM='/bin/rm'
    BL64_FS_CMD_TOUCH='/usr/bin/touch'
    ;;
  *) bl64_check_alert_unsupported ;;
  esac
}

#######################################
# Create command sets for common options
#
# * Warning: bootstrap function
# * BL64_FS_SET_MKTEMP_TMPDIR: not using long form (--) as it requires =
#
# Arguments:
#   None
# Outputs:
#   STDOUT: None
#   STDERR: None
# Returns:
#   0: always ok
#######################################
function _bl64_fs_set_options() {
  # shellcheck disable=SC2034
  case "$BL64_OS_DISTRO" in
  ${BL64_OS_UB}-* | ${BL64_OS_DEB}-* | ${BL64_OS_KL}-*)
    BL64_FS_SET_CHMOD_RECURSIVE='--recursive'
    BL64_FS_SET_CHMOD_VERBOSE='--verbose'
    BL64_FS_SET_CHOWN_RECURSIVE='--recursive'
    BL64_FS_SET_CHOWN_VERBOSE='--verbose'
    BL64_FS_SET_CP_FORCE='--force'
    BL64_FS_SET_CP_RECURSIVE='--recursive'
    BL64_FS_SET_CP_VERBOSE='--verbose'
    BL64_FS_SET_FIND_NAME='-name'
    BL64_FS_SET_FIND_PRINT='-print'
    BL64_FS_SET_FIND_RUN='-exec'
    BL64_FS_SET_FIND_STAY='-xdev'
    BL64_FS_SET_FIND_TYPE_DIR='-type d'
    BL64_FS_SET_FIND_TYPE_FILE='-type f'
    BL64_FS_SET_LN_FORCE='--force'
    BL64_FS_SET_LN_SYMBOLIC='--symbolic'
    BL64_FS_SET_LN_VERBOSE='--verbose'
    BL64_FS_SET_LS_NOCOLOR='--color=never'
    BL64_FS_SET_MKDIR_PARENTS='--parents'
    BL64_FS_SET_MKDIR_VERBOSE='--verbose'
    BL64_FS_SET_MKTEMP_DIRECTORY='--directory'
    BL64_FS_SET_MKTEMP_QUIET='--quiet'
    BL64_FS_SET_MKTEMP_TMPDIR='-p'
    BL64_FS_SET_MV_FORCE='--force'
    BL64_FS_SET_MV_VERBOSE='--verbose'
    BL64_FS_SET_RM_FORCE='--force'
    BL64_FS_SET_RM_RECURSIVE='--recursive'
    BL64_FS_SET_RM_VERBOSE='--verbose'
    ;;
  ${BL64_OS_FD}-* | ${BL64_OS_AMZ}-* | ${BL64_OS_CNT}-* | ${BL64_OS_RHEL}-* | ${BL64_OS_ALM}-* | ${BL64_OS_OL}-* | ${BL64_OS_RCK}-*)
    BL64_FS_SET_CHMOD_RECURSIVE='--recursive'
    BL64_FS_SET_CHMOD_VERBOSE='--verbose'
    BL64_FS_SET_CHOWN_RECURSIVE='--recursive'
    BL64_FS_SET_CHOWN_VERBOSE='--verbose'
    BL64_FS_SET_CP_FORCE='--force'
    BL64_FS_SET_CP_RECURSIVE='--recursive'
    BL64_FS_SET_CP_VERBOSE='--verbose'
    BL64_FS_SET_FIND_NAME='-name'
    BL64_FS_SET_FIND_PRINT='-print'
    BL64_FS_SET_FIND_RUN='-exec'
    BL64_FS_SET_FIND_STAY='-xdev'
    BL64_FS_SET_FIND_TYPE_DIR='-type d'
    BL64_FS_SET_FIND_TYPE_FILE='-type f'
    BL64_FS_SET_LN_FORCE='--force'
    BL64_FS_SET_LN_SYMBOLIC='--symbolic'
    BL64_FS_SET_LN_VERBOSE='--verbose'
    BL64_FS_SET_LS_NOCOLOR='--color=never'
    BL64_FS_SET_MKDIR_PARENTS='--parents'
    BL64_FS_SET_MKDIR_VERBOSE='--verbose'
    BL64_FS_SET_MKTEMP_DIRECTORY='--directory'
    BL64_FS_SET_MKTEMP_QUIET='--quiet'
    BL64_FS_SET_MKTEMP_TMPDIR='-p'
    BL64_FS_SET_MV_FORCE='--force'
    BL64_FS_SET_MV_VERBOSE='--verbose'
    BL64_FS_SET_RM_FORCE='--force'
    BL64_FS_SET_RM_RECURSIVE='--recursive'
    BL64_FS_SET_RM_VERBOSE='--verbose'
    ;;
  ${BL64_OS_SLES}-*)
    BL64_FS_SET_CHMOD_RECURSIVE='--recursive'
    BL64_FS_SET_CHMOD_VERBOSE='--verbose'
    BL64_FS_SET_CHOWN_RECURSIVE='--recursive'
    BL64_FS_SET_CHOWN_VERBOSE='--verbose'
    BL64_FS_SET_CP_FORCE='--force'
    BL64_FS_SET_CP_RECURSIVE='--recursive'
    BL64_FS_SET_CP_VERBOSE='--verbose'
    BL64_FS_SET_FIND_NAME='-name'
    BL64_FS_SET_FIND_PRINT='-print'
    BL64_FS_SET_FIND_RUN='-exec'
    BL64_FS_SET_FIND_STAY='-xdev'
    BL64_FS_SET_FIND_TYPE_DIR='-type d'
    BL64_FS_SET_FIND_TYPE_FILE='-type f'
    BL64_FS_SET_LN_FORCE='--force'
    BL64_FS_SET_LN_SYMBOLIC='--symbolic'
    BL64_FS_SET_LN_VERBOSE='--verbose'
    BL64_FS_SET_LS_NOCOLOR='--color=never'
    BL64_FS_SET_MKDIR_PARENTS='--parents'
    BL64_FS_SET_MKDIR_VERBOSE='--verbose'
    BL64_FS_SET_MKTEMP_DIRECTORY='--directory'
    BL64_FS_SET_MKTEMP_QUIET='--quiet'
    BL64_FS_SET_MKTEMP_TMPDIR='-p'
    BL64_FS_SET_MV_FORCE='--force'
    BL64_FS_SET_MV_VERBOSE='--verbose'
    BL64_FS_SET_RM_FORCE='--force'
    BL64_FS_SET_RM_RECURSIVE='--recursive'
    BL64_FS_SET_RM_VERBOSE='--verbose'
    ;;
  ${BL64_OS_ALP}-*)
    BL64_FS_SET_CHMOD_RECURSIVE='-R'
    BL64_FS_SET_CHMOD_VERBOSE='-v'
    BL64_FS_SET_CHOWN_RECURSIVE='-R'
    BL64_FS_SET_CHOWN_VERBOSE='-v'
    BL64_FS_SET_CP_FORCE='-f'
    BL64_FS_SET_CP_RECURSIVE='-R'
    BL64_FS_SET_CP_VERBOSE='-v'
    BL64_FS_SET_FIND_NAME='-name'
    BL64_FS_SET_FIND_PRINT='-print'
    BL64_FS_SET_FIND_RUN='-exec'
    BL64_FS_SET_FIND_STAY='-xdev'
    BL64_FS_SET_FIND_TYPE_DIR='-type d'
    BL64_FS_SET_FIND_TYPE_FILE='-type f'
    BL64_FS_SET_LN_FORCE='-f'
    BL64_FS_SET_LN_SYMBOLIC='-s'
    BL64_FS_SET_LN_VERBOSE='-v'
    BL64_FS_SET_LS_NOCOLOR='--color=never'
    BL64_FS_SET_MKDIR_PARENTS='-p'
    BL64_FS_SET_MKDIR_VERBOSE=' '
    BL64_FS_SET_MKTEMP_DIRECTORY='-d'
    BL64_FS_SET_MKTEMP_QUIET='-q'
    BL64_FS_SET_MKTEMP_TMPDIR='-p'
    BL64_FS_SET_MV_FORCE='-f'
    BL64_FS_SET_MV_VERBOSE=' '
    BL64_FS_SET_RM_FORCE='-f'
    BL64_FS_SET_RM_RECURSIVE='-R'
    BL64_FS_SET_RM_VERBOSE=' '
    ;;
  ${BL64_OS_MCOS}-*)
    BL64_FS_SET_CHMOD_RECURSIVE='-R'
    BL64_FS_SET_CHMOD_VERBOSE='-v'
    BL64_FS_SET_CHOWN_RECURSIVE='-R'
    BL64_FS_SET_CHOWN_VERBOSE='-v'
    BL64_FS_SET_CP_FORCE='-f'
    BL64_FS_SET_CP_RECURSIVE='-R'
    BL64_FS_SET_CP_VERBOSE='-v'
    BL64_FS_SET_FIND_NAME='-name'
    BL64_FS_SET_FIND_PRINT='-print'
    BL64_FS_SET_FIND_RUN='-exec'
    BL64_FS_SET_FIND_STAY='-xdev'
    BL64_FS_SET_FIND_TYPE_DIR='-type d'
    BL64_FS_SET_FIND_TYPE_FILE='-type f'
    BL64_FS_SET_LN_FORCE='-f'
    BL64_FS_SET_LN_SYMBOLIC='-s'
    BL64_FS_SET_LN_VERBOSE='-v'
    BL64_FS_SET_LS_NOCOLOR='--color=never'
    BL64_FS_SET_MKDIR_PARENTS='-p'
    BL64_FS_SET_MKDIR_VERBOSE='-v'
    BL64_FS_SET_MKTEMP_DIRECTORY='-d'
    BL64_FS_SET_MKTEMP_QUIET='-q'
    BL64_FS_SET_MKTEMP_TMPDIR='-p'
    BL64_FS_SET_MV_FORCE='-f'
    BL64_FS_SET_MV_VERBOSE='-v'
    BL64_FS_SET_RM_FORCE='-f'
    BL64_FS_SET_RM_RECURSIVE='-R'
    BL64_FS_SET_RM_VERBOSE='-v'
    ;;
  *) bl64_check_alert_unsupported ;;
  esac
}

#######################################
# Create command aliases for common use cases
#
# * Aliases are presented as regular shell variables for easy inclusion in complex commands
# * Use the alias without quotes, otherwise the shell will interprete spaces as part of the command
# * Warning: bootstrap function
#
# Arguments:
#   None
# Outputs:
#   STDOUT: None
#   STDERR: None
# Returns:
#   0: always ok
#######################################
# shellcheck disable=SC2034
function _bl64_fs_set_alias() {
  local cmd_mawk='/usr/bin/mawk'

  BL64_FS_ALIAS_CHOWN_DIR="${BL64_FS_CMD_CHOWN} ${BL64_FS_SET_CHOWN_VERBOSE} ${BL64_FS_SET_CHOWN_RECURSIVE}"
  BL64_FS_ALIAS_CP_DFIND="/usr/bin/find"
  BL64_FS_ALIAS_CP_DIR="${BL64_FS_CMD_CP} ${BL64_FS_SET_CP_VERBOSE} ${BL64_FS_SET_CP_FORCE} ${BL64_FS_SET_CP_RECURSIVE}"
  BL64_FS_ALIAS_CP_FIFIND="/usr/bin/find"
  BL64_FS_ALIAS_CP_FILE="${BL64_FS_CMD_CP} ${BL64_FS_SET_CP_VERBOSE} ${BL64_FS_SET_CP_FORCE}"
  BL64_FS_ALIAS_LN_FORCE="--force"
  BL64_FS_ALIAS_LN_SYMBOLIC="${BL64_FS_CMD_LN} ${BL64_FS_SET_LN_SYMBOLIC} ${BL64_FS_SET_LN_VERBOSE}"
  BL64_FS_ALIAS_LS_FILES="${BL64_FS_CMD_LS} ${BL64_FS_SET_LS_NOCOLOR}"
  BL64_FS_ALIAS_MKDIR_FULL="${BL64_FS_CMD_MKDIR} ${BL64_FS_SET_MKDIR_VERBOSE} ${BL64_FS_SET_MKDIR_PARENTS}"
  BL64_FS_ALIAS_MKTEMP_DIR="${BL64_FS_CMD_MKTEMP} -d"
  BL64_FS_ALIAS_MKTEMP_FILE="${BL64_FS_CMD_MKTEMP}"
  BL64_FS_ALIAS_MV="${BL64_FS_CMD_MV} ${BL64_FS_SET_MV_VERBOSE} ${BL64_FS_SET_MV_FORCE}"
  BL64_FS_ALIAS_MV="${BL64_FS_CMD_MV} ${BL64_FS_SET_MV_VERBOSE} ${BL64_FS_SET_MV_FORCE}"
  BL64_FS_ALIAS_RM_FILE="${BL64_FS_CMD_RM} ${BL64_FS_SET_RM_VERBOSE} ${BL64_FS_SET_RM_FORCE}"
  BL64_FS_ALIAS_RM_FULL="${BL64_FS_CMD_RM} ${BL64_FS_SET_RM_VERBOSE} ${BL64_FS_SET_RM_FORCE} ${BL64_FS_SET_RM_RECURSIVE}"
}

#######################################
# BashLib64 / Module / Functions / Manage local filesystem
#######################################

#######################################
# Set object permissions and ownership
#
# * DEPRECATED: to be removed in future versions. Migrate to bl64_fs_path_permission_set
# * work on individual files
# * no recurse option
# * all files get the same permissions, user, group
#
# Arguments:
#   $1: permissions. Format: chown format. Default: use current umask
#   $2: user name. Default: none
#   $3: group name. Default: current
#   $@: list of objects. Must use full path for each
# Outputs:
#   STDOUT: command stdin
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_fs_set_permissions() {
  bl64_dbg_lib_show_function "$@"
  bl64_msg_show_deprecated 'bl64_fs_set_permissions' 'bl64_fs_path_permission_set'
  local mode="${1:-${BL64_VAR_DEFAULT}}"
  local user="${2:-${BL64_VAR_DEFAULT}}"
  local group="${3:-${BL64_VAR_DEFAULT}}"
  local path=''

  # Remove consumed parameters
  shift
  shift
  shift

  bl64_fs_path_permission_set \
    "$mode" \
    "$mode" \
    "$user" \
    "$group" \
    "$BL64_VAR_OFF" \
    "$@"
}

#######################################
# Fix path permissions
#
# * DEPRECATED: to be removed in future versions. Migrate to bl64_fs_path_permission_set
# * allow different permissions for files and directories
# * recursive
#
# Arguments:
#   $1: file permissions. Format: chown format. Default: no action
#   $2: directory permissions. Format: chown format. Default: no action
#   $@: list of paths. Must use full path for each
# Outputs:
#   STDOUT: command stdin
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_fs_fix_permissions() {
  bl64_dbg_lib_show_function "$@"
  bl64_msg_show_deprecated 'bl64_fs_fix_permissions' 'bl64_fs_path_permission_set'
  local file_mode="${1:-${BL64_VAR_DEFAULT}}"
  local dir_mode="${2:-${BL64_VAR_DEFAULT}}"
  local path=''

  # Remove consumed parameters
  shift
  shift

  bl64_fs_path_permission_set \
    "$file_mode" \
    "$dir_mode" \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_ON" \
    "$@"
}

#######################################
# Copy one ore more files to a single destination, then set owner and permissions
#
# * DEPRECATED: to be removed in future versions. Migrate to bl64_fs_path_copy
#
# Requirements:
#   * Destination path should be present
#   * root privilege (sudo) if paths are restricted or change owner is requested
# Limitations:
#   * No rollback in case of errors. The process will not remove already copied files
# Arguments:
#   $1: permissions. Format: chown format. Default: use current umask
#   $2: user name. Default: current
#   $3: group name. Default: current
#   $4: destination path
#   $@: full file paths
# Outputs:
#   STDOUT: verbose operation
#   STDOUT: command errors
# Returns:
#   0: Operation completed ok
#   >0: Operation failed
#######################################
function bl64_fs_copy_files() {
  bl64_dbg_lib_show_function "$@"
  bl64_msg_show_deprecated 'bl64_fs_copy_files' 'bl64_fs_path_copy'
  local mode="${1:-${BL64_VAR_DEFAULT}}"
  local user="${2:-${BL64_VAR_DEFAULT}}"
  local group="${3:-${BL64_VAR_DEFAULT}}"
  local destination="${4:-${BL64_VAR_DEFAULT}}"

  # Remove consumed parameters
  shift
  shift
  shift
  shift

  bl64_fs_path_copy \
    "$mode" \
    "$BL64_VAR_DEFAULT" \
    "$user" \
    "$group" \
    "$destination" \
    "$@"
}

#######################################
# Create one ore more directories, then set owner and permissions
#
#  Features:
#   * If the new path is already present nothing is done. No error or warning is presented
# Limitations:
#   * Parent directories are not created
#   * No rollback in case of errors. The process will not remove already created paths
# Arguments:
#   $1: permissions. Format: chown format. Default: use current umask
#   $2: user name. Default: current
#   $3: group name. Default: current
#   $@: full directory paths
# Outputs:
#   STDOUT: verbose operation
#   STDOUT: command errors
# Returns:
#   0: Operation completed ok
#   >0: Operation failed
#######################################
function bl64_fs_dir_create() {
  bl64_dbg_lib_show_function "$@"
  local mode="${1:-${BL64_VAR_DEFAULT}}"
  local user="${2:-${BL64_VAR_DEFAULT}}"
  local group="${3:-${BL64_VAR_DEFAULT}}"
  local path=''

  # Remove consumed parameters
  shift
  shift
  shift

  bl64_check_parameters_none "$#" || return $?
  bl64_dbg_lib_show_info "path list:[${*}]"

  for path in "$@"; do
    bl64_check_path_absolute "$path" || return $?
    [[ -d "$path" ]] && continue
    bl64_msg_show_lib_subtask "${_BL64_FS_TXT_CREATE_DIR_PATH} (${path})"
    bl64_fs_run_mkdir "$path" &&
      bl64_fs_path_permission_set "$BL64_VAR_DEFAULT" "$mode" "$user" "$group" "$BL64_VAR_OFF" "$path" ||
      return $?
  done
  return 0
}

#######################################
#  Remove paths (files, directories)
#
# * Recursive
# * No error if the path is not present
# * No backup previous to removal
#
# Arguments:
#   $@: list of full paths
# Outputs:
#   STDOUT: verbose operation
#   STDOUT: command errors
# Returns:
#   0: Operation completed ok
#   >0: Operation failed
#######################################
function bl64_fs_path_remove() {
  bl64_dbg_lib_show_function "$@"
  local path_current=''

  bl64_check_parameters_none "$#" ||
    return $?

  for path_current in "$@"; do
    [[ ! -e "$path_current" ]] && continue
    bl64_msg_show_lib_subtask "remove path (${path_current})"
    bl64_fs_run_rm \
      "$BL64_FS_SET_RM_FORCE" \
      "$BL64_FS_SET_RM_RECURSIVE" \
      "$path_current" ||
      return $?
  done
}

#######################################
# Copy one ore more paths to a single destination. Optinally set owner and permissions
#
# * Wildcards are not allowed. Use run_cp instead if needed
# * Path can be directory and/or file only
# * Destination path should be present
# * Root privilege (sudo) needed if paths are restricted or change owner is requested
# * No rollback in case of errors. The process will not remove already copied files
# * Recursive
#
# Arguments:
#   $1: file permissions. Format: chown format. Default: use current umask
#   $2: directory permissions. Format: chown format. Default: use current umask
#   $3: user name. Default: current
#   $4: group name. Default: current
#   $5: destination path
#   $@: full source paths. No wildcards allowed
# Outputs:
#   STDOUT: verbose operation
#   STDERR: command errors
# Returns:
#   0: Operation completed ok
#   >0: Operation failed
#######################################
function bl64_fs_path_copy() {
  bl64_dbg_lib_show_function "$@"
  local file_mode="${1:-${BL64_VAR_DEFAULT}}"
  local dir_mode="${2:-${BL64_VAR_DEFAULT}}"
  local user="${3:-${BL64_VAR_DEFAULT}}"
  local group="${4:-${BL64_VAR_DEFAULT}}"
  local destination="${5:-${BL64_VAR_DEFAULT}}"
  local path_current=''
  local path_base=

  bl64_check_directory "$destination" || return $?

  # Remove consumed parameters
  shift
  shift
  shift
  shift
  shift

  # shellcheck disable=SC2086
  bl64_check_parameters_none "$#" || return $?
  bl64_msg_show_lib_subtask "copy paths (${*} ${BL64_MSG_COSMETIC_ARROW2} ${destination})"
  # shellcheck disable=SC2086
  bl64_fs_run_cp \
    $BL64_FS_SET_CP_FORCE \
    $BL64_FS_SET_CP_RECURSIVE \
    "$@" \
    "$destination" ||
    return $?

  for path_current in "$@"; do
    path_base="$(bl64_fmt_basename "$path_current")"
    bl64_fs_path_permission_set \
      "$file_mode" \
      "$dir_mode" \
      "$user" \
      "$group" \
      "$BL64_VAR_ON" \
      "${destination}/${path_base}" ||
      return $?
  done
}

#######################################
# Merge 2 or more files into a new one, then set owner and permissions
#
# * If the destination is already present no update is done unless requested
# * If asked to replace destination, no backup is done. Caller must take one if needed
# * If merge fails, the incomplete file will be removed
#
# Arguments:
#   $1: permissions. Format: chown format. Default: use current umask
#   $2: user name. Default: current
#   $3: group name. Default: current
#   $4: replace existing content. Values: $BL64_VAR_ON | $BL64_VAR_OFF (default)
#   $5: destination file. Full path
#   $@: source files. Full path
# Outputs:
#   STDOUT: verbose operation
#   STDOUT: command errors
# Returns:
#   command dependant
#   $BL64_FS_ERROR_EXISTING_FILE
#   $BL64_LIB_ERROR_TASK_FAILED
#######################################
function bl64_fs_merge_files() {
  bl64_dbg_lib_show_function "$@"
  local mode="${1:-${BL64_VAR_DEFAULT}}"
  local user="${2:-${BL64_VAR_DEFAULT}}"
  local group="${3:-${BL64_VAR_DEFAULT}}"
  local replace="${4:-${BL64_VAR_DEFAULT}}"
  local destination="${5:-${BL64_VAR_DEFAULT}}"
  local path=''
  local -i status=0
  local -i first=1

  bl64_check_parameter 'destination' &&
    bl64_fs_check_new_file "$destination" &&
    bl64_check_overwrite "$destination" "$replace" ||
    return $?

  # Remove consumed parameters
  shift
  shift
  shift
  shift
  shift
  bl64_check_parameters_none "$#" || return $?
  bl64_dbg_lib_show_info "source files:[${*}]"

  for path in "$@"; do
    bl64_msg_show_lib_subtask "${_BL64_FS_TXT_MERGE_ADD_SOURCE} (${path} ${BL64_MSG_COSMETIC_ARROW2} ${destination})"
    if ((first == 1)); then
      first=0
      bl64_check_path_absolute "$path" &&
        "$BL64_OS_CMD_CAT" "$path" >"$destination"
    else
      bl64_check_path_absolute "$path" &&
        "$BL64_OS_CMD_CAT" "$path" >>"$destination"
    fi
    status=$?
    ((status != 0)) && break
    :
  done

  if ((status == 0)); then
    bl64_dbg_lib_show_comments "merge commplete, update permissions if needed (${destination})"
    bl64_fs_path_permission_set "$mode" "$BL64_VAR_DEFAULT" "$user" "$group" "$BL64_VAR_OFF" "$destination"
    status=$?
  else
    bl64_dbg_lib_show_comments "merge failed, removing incomplete file (${destination})"
    [[ -f "$destination" ]] && bl64_fs_rm_file "$destination"
  fi

  return $status
}

#######################################
# Merge contents from source directory to target
#
# Requirements:
#   * root privilege (sudo) if the files are restricted
# Arguments:
#   $1: source path
#   $2: target path
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_fs_merge_dir() {
  bl64_dbg_lib_show_function "$@"
  local source="${1:-${BL64_VAR_DEFAULT}}"
  local target="${2:-${BL64_VAR_DEFAULT}}"

  bl64_check_parameter 'source' &&
    bl64_check_parameter 'target' &&
    bl64_check_directory "$source" &&
    bl64_check_directory "$target" ||
    return $?

  bl64_msg_show_lib_subtask "${_BL64_FS_TXT_MERGE_DIRS} (${source} ${BL64_MSG_COSMETIC_ARROW2} ${target})"
  case "$BL64_OS_DISTRO" in
  ${BL64_OS_UB}-* | ${BL64_OS_DEB}-* | ${BL64_OS_KL}-*)
    bl64_fs_cp_dir --no-target-directory "$source" "$target"
    ;;
  ${BL64_OS_FD}-* | ${BL64_OS_AMZ}-* | ${BL64_OS_CNT}-* | ${BL64_OS_RHEL}-* | ${BL64_OS_ALM}-* | ${BL64_OS_OL}-* | ${BL64_OS_RCK}-*)
    bl64_fs_cp_dir --no-target-directory "$source" "$target"
    ;;
  ${BL64_OS_SLES}-*)
    bl64_fs_cp_dir --no-target-directory "$source" "$target"
    ;;
  ${BL64_OS_ALP}-*)
    # shellcheck disable=SC2086
    shopt -sq dotglob &&
      bl64_fs_cp_dir ${source}/* -t "$target" &&
      shopt -uq dotglob
    ;;
  ${BL64_OS_MCOS}-*)
    # shellcheck disable=SC2086
    bl64_fs_cp_dir ${source}/ "$target"
    ;;
  *) bl64_check_alert_unsupported ;;
  esac
}

#######################################
# Command wrapper with verbose, debug and common options
#
# Arguments:
#   $@: arguments are passed as-is to the command
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_fs_run_chown() {
  bl64_dbg_lib_show_function "$@"
  local debug=''

  bl64_check_parameters_none "$#" &&
    bl64_check_module 'BL64_FS_MODULE' ||
    return $?
  bl64_dbg_lib_command_enabled && debug="$BL64_FS_SET_CHOWN_VERBOSE"

  bl64_dbg_lib_trace_start
  # shellcheck disable=SC2086
  "$BL64_FS_CMD_CHOWN" $debug "$@"
  bl64_dbg_lib_trace_stop
}

#######################################
# Command wrapper with verbose, debug and common options
#
# * Warning: mktemp with no arguments creates a temp file by default
#
# Arguments:
#   $@: arguments are passed as-is to the command
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_fs_run_mktemp() {
  bl64_dbg_lib_show_function "$@"

  bl64_check_module 'BL64_FS_MODULE' ||
    return $?

  bl64_dbg_lib_trace_start
  # shellcheck disable=SC2086
  "$BL64_FS_CMD_MKTEMP" "$@"
  bl64_dbg_lib_trace_stop
}

#######################################
# Command wrapper with verbose, debug and common options
#
# Arguments:
#   $@: arguments are passed as-is to the command
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_fs_run_chmod() {
  bl64_dbg_lib_show_function "$@"
  local debug=''

  bl64_check_parameters_none "$#" &&
    bl64_check_module 'BL64_FS_MODULE' ||
    return $?
  bl64_dbg_lib_command_enabled && debug="$BL64_FS_SET_CHMOD_VERBOSE"

  bl64_dbg_lib_trace_start
  # shellcheck disable=SC2086
  "$BL64_FS_CMD_CHMOD" $debug "$@"
  bl64_dbg_lib_trace_stop
}

#######################################
# Change directory ownership recursively
#
# * Simple command wrapper
#
# Arguments:
#   $@: arguments are passed as-is to the command
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_fs_chown_dir() {
  bl64_dbg_lib_show_function "$@"

  # shellcheck disable=SC2086
  bl64_fs_run_chown "$BL64_FS_SET_CHOWN_RECURSIVE" "$@"
}

#######################################
# Change directory permissions recursively
#
# * Simple command wrapper
#
# Arguments:
#   $@: arguments are passed as-is to the command
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_fs_chmod_dir() {
  bl64_dbg_lib_show_function "$@"

  # shellcheck disable=SC2086
  bl64_fs_run_chmod "$BL64_FS_SET_CHMOD_RECURSIVE" "$@"
}

#######################################
# Command wrapper with verbose, debug and common options
#
# Arguments:
#   $@: arguments are passed as-is to the command
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_fs_run_mkdir() {
  bl64_dbg_lib_show_function "$@"
  local debug=''

  bl64_check_parameters_none "$#" &&
    bl64_check_module 'BL64_FS_MODULE' ||
    return $?
  bl64_dbg_lib_command_enabled && debug="$BL64_FS_SET_MKDIR_VERBOSE"

  bl64_dbg_lib_trace_start
  # shellcheck disable=SC2086
  "$BL64_FS_CMD_MKDIR" $debug "$@"
  bl64_dbg_lib_trace_stop
}

#######################################
# Create full path including parents
#
# Arguments:
#   $@: arguments are passed as-is to the command
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_fs_mkdir_full() {
  bl64_dbg_lib_show_function "$@"

  bl64_fs_run_mkdir "$BL64_FS_SET_MKDIR_PARENTS" "$@"
}

#######################################
# Command wrapper with verbose, debug and common options
#
# Arguments:
#   $@: arguments are passed as-is to the command
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_fs_run_mv() {
  bl64_dbg_lib_show_function "$@"
  local debug=''

  bl64_check_parameters_none "$#" &&
    bl64_check_module 'BL64_FS_MODULE' ||
    return $?
  bl64_dbg_lib_command_enabled && debug="$BL64_FS_SET_MV_VERBOSE"

  bl64_dbg_lib_trace_start
  # shellcheck disable=SC2086
  "$BL64_FS_CMD_MV" $debug "$BL64_FS_SET_MV_FORCE" "$@"
  bl64_dbg_lib_trace_stop
}

#######################################
# Remove content from OS temporary repositories
#
# * Warning: intented for container build only, not to run on regular OS
#
# Arguments:
#   None
# Outputs:
#   STDOUT: rm output
#   STDERR: rm stderr
# Returns:
#   0: always ok
#######################################
function bl64_fs_cleanup_tmps() {
  bl64_dbg_lib_show_function
  local target=''

  target='/tmp'
  bl64_msg_show_lib_subtask "${_BL64_FS_TXT_CLEANUP_TEMP} (${target})"
  bl64_fs_rm_full -- ${target}/[[:alnum:]]*

  target='/var/tmp'
  bl64_msg_show_lib_subtask "${_BL64_FS_TXT_CLEANUP_TEMP} (${target})"
  bl64_fs_rm_full -- ${target}/[[:alnum:]]*
  return 0
}

#######################################
# Remove or reset logs from standard locations
#
# * Warning: intented for container build only, not to run on regular OS
#
# Arguments:
#   None
# Outputs:
#   STDOUT: rm output
#   STDERR: rm stderr
# Returns:
#   0: always ok
#######################################
function bl64_fs_cleanup_logs() {
  bl64_dbg_lib_show_function
  local target='/var/log'

  if [[ -d "$target" ]]; then
    bl64_msg_show_lib_subtask "${_BL64_FS_TXT_CLEANUP_LOGS} (${target})"
    bl64_fs_rm_full ${target}/[[:alnum:]]*
  fi
  return 0
}

#######################################
# Remove or reset OS caches from standard locations
#
# * Warning: intented for container build only, not to run on regular OS
#
# Arguments:
#   None
# Outputs:
#   STDOUT: rm output
#   STDERR: rm stderr
# Returns:
#   0: always ok
#######################################
function bl64_fs_cleanup_caches() {
  bl64_dbg_lib_show_function
  local target='/var/cache/man'

  if [[ -d "$target" ]]; then
    bl64_msg_show_lib_subtask "${_BL64_FS_TXT_CLEANUP_CACHES} (${target})"
    bl64_fs_rm_full ${target}/[[:alnum:]]*
  fi
  return 0
}

#######################################
# Performs a complete cleanup of OS ephemeral content
#
# * Warning: intented for container build only, not to run on regular OS
# * Removes temporary files
# * Cleans caches
# * Removes logs
#
# Arguments:
#   None
# Outputs:
#   STDOUT: output from clean functions
#   STDERR: output from clean functions
# Returns:
#   0: always ok
#######################################
function bl64_fs_cleanup_full() {
  bl64_dbg_lib_show_function

  bl64_fs_cleanup_tmps
  bl64_fs_cleanup_logs
  bl64_fs_cleanup_caches

  return 0
}

#######################################
# Command wrapper with verbose, debug and common options
#
# Arguments:
#   $@: arguments are passed as-is to the command
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_fs_run_find() {
  bl64_dbg_lib_show_function "$@"

  bl64_check_parameters_none "$#" &&
    bl64_check_module 'BL64_FS_MODULE' ||
    return $?
  bl64_check_command "$BL64_FS_CMD_FIND" || return $?

  bl64_dbg_lib_trace_start
  "$BL64_FS_CMD_FIND" "$@"
  bl64_dbg_lib_trace_stop
}

#######################################
# Find files and report as list
#
# * Not using bl64_fs_find to avoid file expansion for -name
#
# Arguments:
#   $1: search path
#   $2: search pattern. Format: find -name options
#   $3: search content in text files
# Outputs:
#   STDOUT: file list. One path per line
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_fs_find_files() {
  bl64_dbg_lib_show_function "$@"
  local path="${1:-.}"
  local pattern="${2:-${BL64_VAR_DEFAULT}}"
  local content="${3:-${BL64_VAR_DEFAULT}}"

  bl64_check_command "$BL64_FS_CMD_FIND" &&
    bl64_check_directory "$path" || return $?

  [[ "$pattern" == "$BL64_VAR_DEFAULT" ]] && pattern=''

  bl64_dbg_lib_trace_start
  # shellcheck disable=SC2086
  if [[ "$content" == "$BL64_VAR_DEFAULT" ]]; then
    "$BL64_FS_CMD_FIND" \
      "$path" \
      -type 'f' \
      ${pattern:+-name "${pattern}"} \
      -print
  else
    "$BL64_FS_CMD_FIND" \
      "$path" \
      -type 'f' \
      ${pattern:+-name "${pattern}"} \
      -exec \
      "$BL64_TXT_CMD_GREP" \
      "$BL64_TXT_SET_GREP_SHOW_FILE_ONLY" \
      "$BL64_TXT_SET_GREP_ERE" "$content" \
      "{}" \;
  fi
  bl64_dbg_lib_trace_stop

}

#######################################
# Safeguard path to a temporary location
#
# * Use for file/dir operations that will alter or replace the content and requires a quick rollback mechanism
# * The original path is renamed until bl64_fs_restore is called to either remove or restore it
# * If the destination is not present nothing is done. Return with no error. This is to cover for first time path creation
#
# Arguments:
#   $1: safeguard path (produced by bl64_fs_safeguard)
#   $2: task status (exit status from last operation)
# Outputs:
#   STDOUT: Task progress
#   STDERR: Task errors
# Returns:
#   0: task executed ok
#   >0: task failed
#######################################
function bl64_fs_safeguard() {
  bl64_dbg_lib_show_function "$@"
  local destination="${1:-}"
  local backup="${destination}${BL64_FS_SAFEGUARD_POSTFIX}"

  bl64_check_parameter 'destination' ||
    return $?

  # Return if not present
  if [[ ! -e "$destination" ]]; then
    bl64_dbg_lib_show_comments "path is not yet created, nothing to do (${destination})"
    return 0
  fi

  bl64_msg_show_lib_subtask "${_BL64_FS_TXT_SAFEGUARD_OBJECT} ([${destination}]->[${backup}])"
  if ! bl64_fs_run_mv "$destination" "$backup"; then
    bl64_msg_show_error "$_BL64_FS_TXT_SAFEGUARD_FAILED ($destination)"
    return $BL64_LIB_ERROR_TASK_BACKUP
  fi

  return 0
}

#######################################
# Restore path from safeguard if operation failed or remove if operation was ok
#
# * Use as a quick rollback for file/dir operations
# * Called after bl64_fs_safeguard creates the backup
# * If the backup is not there nothing is done, no error returned. This is to cover for first time path creation
#
# Arguments:
#   $1: safeguard path (produced by bl64_fs_safeguard)
#   $2: task status (exit status from last operation)
# Outputs:
#   STDOUT: Task progress
#   STDERR: Task errors
# Returns:
#   0: task executed ok
#   >0: task failed
#######################################
function bl64_fs_restore() {
  bl64_dbg_lib_show_function "$@"
  local destination="${1:-}"
  local -i result=$2
  local backup="${destination}${BL64_FS_SAFEGUARD_POSTFIX}"

  bl64_check_parameter 'destination' &&
    bl64_check_parameter 'result' ||
    return $?

  # Return if not present
  if [[ ! -e "$backup" ]]; then
    bl64_dbg_lib_show_comments "backup was not created, nothing to do (${backup})"
    return 0
  fi

  # Check if restore is needed based on the operation result
  if ((result == 0)); then
    bl64_dbg_lib_show_comments 'operation was ok, backup no longer needed, remove it'
    [[ -e "$backup" ]] && bl64_fs_rm_full "$backup"

    # shellcheck disable=SC2086
    return 0
  else
    bl64_dbg_lib_show_comments 'operation was NOT ok, remove invalid content'
    [[ -e "$destination" ]] && bl64_fs_rm_full "$destination"

    bl64_msg_show_lib_subtask "${_BL64_FS_TXT_RESTORE_OBJECT} ([${backup}]->[${destination}])"
    # shellcheck disable=SC2086
    bl64_fs_run_mv "$backup" "$destination" ||
      return $BL64_LIB_ERROR_TASK_RESTORE
  fi
}


#######################################
# Set path permissions and ownership
#
# * Path: directory and/or file only
# * Allow different permissions for files and directories
# * Requires root privilege if current user is not the path owner
# * Path wildcards are not allowed
# * Recursive
#
# Arguments:
#   $1: file permissions. Format: chown format. Default: no change
#   $2: directory permissions. Format: chown format. Default: no change
#   $3: user name. Default: no change
#   $4: group name. Default: no change
#   $5: Recursive. Format: ON|OFF. Default: OFF
#   $@: list of paths. Must use full path for each
# Outputs:
#   STDOUT: command stdin
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_fs_path_permission_set() {
  bl64_dbg_lib_show_function "$@"
  local file_mode="${1:-${BL64_VAR_DEFAULT}}"
  local dir_mode="${2:-${BL64_VAR_DEFAULT}}"
  local user="${3:-${BL64_VAR_DEFAULT}}"
  local group="${4:-${BL64_VAR_DEFAULT}}"
  local recursive="${5:-${BL64_VAR_DEFAULT}}"
  local target_path=''

  [[ "$recursive" == "$BL64_VAR_DEFAULT" ]] && recursive="$BL64_VAR_OFF"
  # Remove consumed parameters
  shift
  shift
  shift
  shift
  shift

  bl64_check_parameters_none "$#" || return $?
  bl64_dbg_lib_show_info "path list:[${*}]"
  for target_path in "$@"; do
    bl64_check_path "$target_path" || return $?
    _bl64_fs_path_permission_set_file "$file_mode" "$recursive" "$target_path" &&
      _bl64_fs_path_permission_set_dir "$dir_mode" "$recursive" "$target_path" &&
      _bl64_fs_path_permission_set_user "$user" "$recursive" "$target_path" &&
      _bl64_fs_path_permission_set_group "$group" "$recursive" "$target_path" ||
      return $?
  done
}

function _bl64_fs_path_permission_set_file() {
  bl64_dbg_lib_show_function "$@"
  local mode="$1"
  local recursive="$2"
  local path="$3"

  [[ "$mode" == "$BL64_VAR_DEFAULT" ]] && return 0
  bl64_msg_show_lib_subtask "set file permissions (${file_mode} ${BL64_MSG_COSMETIC_ARROW} ${path})"
  if bl64_lib_flag_is_enabled "$recursive"; then
    # shellcheck disable=SC2086
    bl64_fs_run_find \
      "$path" \
      ${BL64_FS_SET_FIND_STAY} \
      ${BL64_FS_SET_FIND_TYPE_FILE} \
      ${BL64_FS_SET_FIND_RUN} "$BL64_FS_CMD_CHMOD" "$file_mode" "{}" \;
  else
    [[ ! -f "$path" ]] && return 0
    bl64_fs_run_chmod "$mode" "$path"
  fi
}

function _bl64_fs_path_permission_set_dir() {
  bl64_dbg_lib_show_function "$@"
  local mode="$1"
  local recursive="$2"
  local path="$3"

  [[ "$mode" == "$BL64_VAR_DEFAULT" ]] && return 0
  bl64_msg_show_lib_subtask "set directory permissions (${dir_mode} ${BL64_MSG_COSMETIC_ARROW} ${path})"
  if bl64_lib_flag_is_enabled "$recursive"; then
    # shellcheck disable=SC2086
    bl64_fs_run_find \
      "$path" \
      ${BL64_FS_SET_FIND_STAY} \
      ${BL64_FS_SET_FIND_TYPE_DIR} \
      ${BL64_FS_SET_FIND_RUN} "$BL64_FS_CMD_CHMOD" "$dir_mode" "{}" \;
  else
    [[ ! -d "$path" ]] && return 0
    bl64_fs_run_chmod "$mode" "$path"
  fi
}

function _bl64_fs_path_permission_set_user() {
  bl64_dbg_lib_show_function "$@"
  local user="$1"
  local recursive="$2"
  local path="$3"
  local cli_options=' '

  [[ "$user" == "$BL64_VAR_DEFAULT" ]] && return 0
  bl64_lib_flag_is_enabled "$recursive" && cli_options="$BL64_FS_SET_CHOWN_RECURSIVE"
  bl64_msg_show_lib_subtask "${_BL64_FS_TXT_SET_OWNER} (${user} ${BL64_MSG_COSMETIC_ARROW2} ${path})"
  # shellcheck disable=SC2086
  bl64_fs_run_chown \
    $cli_options \
    "${user}" \
    "$path"
}

function _bl64_fs_path_permission_set_group() {
  bl64_dbg_lib_show_function "$@"
  local group="$1"
  local recursive="$2"
  local path="$3"
  local cli_options=' '

  [[ "$group" == "$BL64_VAR_DEFAULT" ]] && return 0
  bl64_lib_flag_is_enabled "$recursive" && cli_options="$BL64_FS_SET_CHOWN_RECURSIVE"
  bl64_msg_show_lib_subtask "${_BL64_FS_TXT_SET_GROUP} (${group} ${BL64_MSG_COSMETIC_ARROW2} ${path})"
  # shellcheck disable=SC2086
  bl64_fs_run_chown \
    $cli_options \
    ":${group}" \
    "$path"
}

#######################################
# Command wrapper with verbose, debug and common options
#
# Arguments:
#   $@: arguments are passed as-is to the command
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_fs_run_cp() {
  bl64_dbg_lib_show_function "$@"
  local debug=''

  bl64_check_parameters_none "$#" &&
    bl64_check_module 'BL64_FS_MODULE' ||
    return $?
  bl64_dbg_lib_command_enabled && debug="$BL64_FS_SET_CP_VERBOSE"

  bl64_dbg_lib_trace_start
  # shellcheck disable=SC2086
  "$BL64_FS_CMD_CP" $debug "$@"
  bl64_dbg_lib_trace_stop
}

#######################################
# Command wrapper with verbose, debug and common options
#
# Arguments:
#   $@: arguments are passed as-is to the command
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_fs_run_rm() {
  bl64_dbg_lib_show_function "$@"
  local debug=''

  bl64_check_parameters_none "$#" &&
    bl64_check_module 'BL64_FS_MODULE' ||
    return $?
  bl64_dbg_lib_command_enabled && debug="$BL64_FS_SET_CP_VERBOSE"

  bl64_dbg_lib_trace_start
  # shellcheck disable=SC2086
  "$BL64_FS_CMD_RM" $debug "$@"
  bl64_dbg_lib_trace_stop
}

#######################################
# Command wrapper with verbose, debug and common options
#
# Arguments:
#   $@: arguments are passed as-is to the command
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_fs_run_ls() {
  bl64_dbg_lib_show_function "$@"

  bl64_check_parameters_none "$#" &&
    bl64_check_module 'BL64_FS_MODULE' ||
    return $?

  bl64_dbg_lib_trace_start
  "$BL64_FS_CMD_LS" "$@"
  bl64_dbg_lib_trace_stop
}

#######################################
# Command wrapper with verbose, debug and common options
#
# Arguments:
#   $@: arguments are passed as-is to the command
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_fs_run_ln() {
  bl64_dbg_lib_show_function "$@"
  local debug=''

  bl64_check_parameters_none "$#" &&
    bl64_check_module 'BL64_FS_MODULE' ||
    return $?
  bl64_dbg_lib_command_enabled && debug="$BL64_FS_SET_LN_VERBOSE"

  bl64_dbg_lib_trace_start
  # shellcheck disable=SC2086
  "$BL64_FS_CMD_LN" $debug "$@"
  bl64_dbg_lib_trace_stop
}

#######################################
# Set default path creation permission with umask
#
# * Uses symbolic permission form
# * Supports predefined sets: BL64_FS_UMASK_*
#
# Arguments:
#   $1: permission. Format: BL64_FS_UMASK_RW_USER
# Outputs:
#   STDOUT: None
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
# shellcheck disable=SC2120
function bl64_fs_set_umask() {
  bl64_dbg_lib_show_function "$@"
  local permissions="${1:-${BL64_FS_UMASK_RW_USER}}"

  bl64_msg_show_lib_subtask "${_BL64_FS_TXT_UMASK_SET} (${permissions})"
  umask -S "$permissions" >/dev/null
}

#######################################
# Set global ephemeral paths for bashlib64 functions
#
# * When set, bashlib64 can use these locations as alternative paths to standard ephemeral locations (tmp, cache, etc)
# * Path is created if not already present
#
# Arguments:
#   $1: Temporal files. Short lived, data should be removed after usage. Format: full path
#   $2: cache files. Lifecycle managed by the consumer. Data can persist between runs. If data is removed, consumer should be able to regenerate it. Format: full path
#   $3: permissions. Format: chown format. Default: use current umask
#   $4: user name. Default: current
#   $5: group name. Default: current
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_fs_set_ephemeral() {
  bl64_dbg_lib_show_function "$@"
  local temporal="${1:-${BL64_VAR_DEFAULT}}"
  local cache="${2:-${BL64_VAR_DEFAULT}}"
  local mode="${3:-${BL64_VAR_DEFAULT}}"
  local user="${4:-${BL64_VAR_DEFAULT}}"
  local group="${5:-${BL64_VAR_DEFAULT}}"

  if [[ "$temporal" != "$BL64_VAR_DEFAULT" ]]; then
    bl64_fs_create_dir "$mode" "$user" "$group" "$temporal" &&
      BL64_FS_PATH_TEMPORAL="$temporal" ||
      return $?
  fi

  if [[ "$cache" != "$BL64_VAR_DEFAULT" ]]; then
    bl64_fs_create_dir "$mode" "$user" "$group" "$cache" &&
      BL64_FS_PATH_CACHE="$cache" ||
      return $?
  fi

  return 0
}

#######################################
# Create temporal directory
#
# * Wrapper for the mktemp tool
#
# Arguments:
#   None
# Outputs:
#   STDOUT: full path to temp dir
#   STDERR: error messages
# Returns:
#   0: temp created ok
#  >0: failed to create temp
#######################################
function bl64_fs_create_tmpdir() {
  bl64_dbg_lib_show_function
  local template="${BL64_FS_TMP_PREFIX}-${BL64_SCRIPT_NAME}.XXXXXXXXXX"

  bl64_fs_run_mktemp \
    "$BL64_FS_SET_MKTEMP_DIRECTORY" \
    "$BL64_FS_SET_MKTEMP_TMPDIR" "$BL64_FS_PATH_TMP" \
    "$template"
}

#######################################
# Create temporal file
#
# * Wrapper for the mktemp tool
#
# Arguments:
#   None
# Outputs:
#   STDOUT: full path to temp file
#   STDERR: error messages
# Returns:
#   0: temp created ok
#  >0: failed to create temp
#######################################
function bl64_fs_create_tmpfile() {
  bl64_dbg_lib_show_function
  local template="${BL64_FS_TMP_PREFIX}-${BL64_SCRIPT_NAME}.XXXXXXXXXX"

  bl64_fs_run_mktemp \
    "$BL64_FS_SET_MKTEMP_TMPDIR" "$BL64_FS_PATH_TMP" \
    "$template"
}

#######################################
# Remove temporal directory created by bl64_fs_create_tmpdir
#
# Arguments:
#   $1: full path to the tmpdir
# Outputs:
#   STDOUT: None
#   STDERR: error messages
# Returns:
#   0: temp removed ok
#  >0: failed to remove temp
#######################################
function bl64_fs_rm_tmpdir() {
  bl64_dbg_lib_show_function "$@"
  local tmpdir="$1"

  bl64_check_parameter 'tmpdir' &&
    bl64_check_directory "$tmpdir" ||
    return $?

  if [[ "$tmpdir" != ${BL64_FS_PATH_TMP}/${BL64_FS_TMP_PREFIX}-*.* ]]; then
    bl64_msg_show_error "${_BL64_FS_TXT_ERROR_NOT_TMPDIR} (${tmpdir})"
    return $BL64_LIB_ERROR_TASK_FAILED
  fi

  bl64_fs_rm_full "$tmpdir"
}

#######################################
# Remove temporal file create by bl64_fs_create_tmpfile
#
# Arguments:
#   $1: full path to the tmpfile
# Outputs:
#   STDOUT: None
#   STDERR: error messages
# Returns:
#   0: temp removed ok
#  >0: failed to remove temp
#######################################
function bl64_fs_rm_tmpfile() {
  bl64_dbg_lib_show_function "$@"
  local tmpfile="$1"

  bl64_check_parameter 'tmpfile' &&
    bl64_check_file "$tmpfile" ||
    return $?

  if [[ "$tmpfile" != ${BL64_FS_PATH_TMP}/${BL64_FS_TMP_PREFIX}-*.* ]]; then
    bl64_msg_show_error "${_BL64_FS_TXT_ERROR_NOT_TMPFILE} (${tmpfile})"
    return $BL64_LIB_ERROR_TASK_FAILED
  fi

  bl64_fs_rm_file "$tmpfile"
}

#######################################
# Check that the new file path is valid
#
# * If path exists, check that is not a directory
# * Check is ok when path does not exist or exists but it's a file
#
# Arguments:
#   $1: new file path
# Outputs:
#   STDOUT: none
#   STDERR: message
# Returns:
#   0: check ok
#   BL64_LIB_ERROR_PARAMETER_INVALID
#######################################
function bl64_fs_check_new_file() {
  bl64_dbg_lib_show_function "$@"
  local file="${1:-}"

  bl64_check_parameter 'file' ||
    return $?

  if [[ -d "$file" ]]; then
    bl64_msg_show_error "${_BL64_FS_TXT_ERROR_INVALID_FILE_TARGET} (${file})"
    return $BL64_LIB_ERROR_PARAMETER_INVALID
  fi

  return 0
}

#######################################
# Check that the new directory path is valid
#
# * If path exists, check that is not a file
# * Check is ok when path does not exist or exists but it's a directory
#
# Arguments:
#   $1: new directory path
# Outputs:
#   STDOUT: none
#   STDERR: message
# Returns:
#   0: check ok
#   BL64_LIB_ERROR_PARAMETER_INVALID
#######################################
function bl64_fs_check_new_dir() {
  bl64_dbg_lib_show_function "$@"
  local directory="${1:-}"

  bl64_check_parameter 'directory' ||
    return $?

  if [[ -f "$directory" ]]; then
    bl64_msg_show_error "${_BL64_FS_TXT_ERROR_INVALID_DIR_TARGET} (${directory})"
    return $BL64_LIB_ERROR_PARAMETER_INVALID
  fi

  return 0
}

#######################################
# Create symbolic link
#
# * Wrapper for the ln -s command
# * Provide extra checks and verbosity
#
# Arguments:
#   $1: source path
#   $2: destination path
#   $3: overwrite if already present?
# Outputs:
#   STDOUT: verbose operation
#   STDOUT: command errors
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_fs_create_symlink() {
  bl64_dbg_lib_show_function "$@"
  local source="${1:-}"
  local destination="${2:-}"
  local overwrite="${3:-$BL64_VAR_OFF}"

  bl64_check_parameter 'source' &&
    bl64_check_parameter 'destination' &&
    bl64_check_path "$source" ||
    return $?

  if [[ -e "$destination" ]]; then
    if [[ "$overwrite" == "$BL64_VAR_ON" ]]; then
      bl64_fs_rm_file "$destination" ||
        return $?
    else
      bl64_msg_show_warning "${_BL64_FS_TXT_SYMLINK_EXISTING} (${destination})"
      return 0
    fi
  fi
  bl64_msg_show_lib_subtask "${_BL64_FS_TXT_SYMLINK_CREATE} (${source} ${BL64_MSG_COSMETIC_ARROW2} ${destination})"
  bl64_fs_run_ln "$BL64_FS_SET_LN_SYMBOLIC" "$source" "$destination"
}

#######################################
# Creates an empty regular file
#
# * Creates file if not existing only
# * If existing, warn and return with no error
#
# Arguments:
#   $1: full path to the file
#   $2: (optional) permissions. Format: chown format. Default: use current umask
#   $3: (optional) user name. Default: current
#   $4: (optional) group name. Default: current
# Outputs:
#   STDOUT: Task progress
#   STDERR: Task errors
# Returns:
#   0: task executed ok
#   >0: task failed
#######################################
function bl64_fs_create_file() {
  bl64_dbg_lib_show_function "$@"
  local file_path="$1"
  local mode="${2:-${BL64_VAR_DEFAULT}}"
  local user="${3:-${BL64_VAR_DEFAULT}}"
  local group="${4:-${BL64_VAR_DEFAULT}}"

  bl64_check_parameter 'file_path' ||
    return $?

  bl64_msg_show_lib_subtask "${_BL64_FS_TXT_CREATE_FILE} (${file_path})"
  [[ -f "$file_path" ]] &&
    bl64_msg_show_warning "$_BL64_FS_TXT_WARN_EXISTING_FILE" &&
    return 0

  "$BL64_FS_CMD_TOUCH" "$file_path" &&
    bl64_fs_path_permission_set "$mode" "$BL64_VAR_DEFAULT" "$user" "$group" "$BL64_VAR_OFF" "$file_path"
}

#######################################
#  Remove files
#
# * No error if the path is not present
# * No backup previous to removal
#
# Arguments:
#   $@: list of full file paths
# Outputs:
#   STDOUT: verbose operation
#   STDOUT: command errors
# Returns:
#   0: Operation completed ok
#   >0: Operation failed
#######################################
function bl64_fs_file_remove() {
  bl64_dbg_lib_show_function "$@"
  local path_current=''

  bl64_check_parameters_none "$#" ||
    return $?

  for path_current in "$@"; do
    [[ ! -f "$path_current" ]] && continue
    bl64_msg_show_lib_subtask "remove file (${path_current})"
    bl64_fs_run_rm \
      "$BL64_FS_SET_RM_FORCE" \
      "$path_current" ||
      return $?
  done
}

#######################################
#  Recreate ephemeral directory path
#
# * No error if the path is not present
# * No backup previous to removal
# * Recursive delete if path is present
#
# Arguments:
#   $1: permissions. Format: chown format. Default: use current umask
#   $2: user name. Default: current
#   $3: group name. Default: current
#   $@: full directory paths
# Outputs:
#   STDOUT: verbose operation
#   STDOUT: command errors
# Returns:
#   0: Operation completed ok
#   >0: Operation failed
#######################################
function bl64_fs_dir_reset() {
  bl64_dbg_lib_show_function "$@"
  local mode="${1:-${BL64_VAR_DEFAULT}}"
  local user="${2:-${BL64_VAR_DEFAULT}}"
  local group="${3:-${BL64_VAR_DEFAULT}}"

  # Remove consumed parameters
  shift
  shift
  shift

  bl64_fs_path_remove "$@" &&
    bl64_fs_dir_create "$mode" "$user" "$group" "$@"
}

#!/usr/bin/env bash
#######################################
# BashLib64 / Bash automation library
#
# Author: serdigital64 (https://github.com/serdigital64)
# Repository: https://github.com/automation64/bashlib64
#
# Copyright 2022 SerDigital64@gmail.com
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#######################################

#
# Library Bootstrap
#

# Do not inherit aliases and commands
builtin unset -f unalias
builtin unalias -a
builtin unset -f command
builtin hash -r

# Normalize shtop defaults
builtin shopt -qu \
  'dotglob' \
  'extdebug' \
  'failglob' \
  'globstar' \
  'gnu_errfmt' \
  'huponexit' \
  'lastpipe' \
  'login_shell' \
  'nocaseglob' \
  'nocasematch' \
  'nullglob' \
  'xpg_echo'
builtin shopt -qs \
  'extquote'

# Ensure pipeline exit status is failed when any cmd fails
builtin set -o 'pipefail'

# Enable error processing
builtin set -o 'errtrace'
builtin set -o 'functrace'

# Disable fast-fail. Developer must implement error handling (check for exit status)
builtin set +o 'errexit'

# Reset bash set options to defaults
builtin set -o 'braceexpand'
builtin set -o 'hashall'
builtin set +o 'allexport'
builtin set +o 'histexpand'
builtin set +o 'history'
builtin set +o 'ignoreeof'
builtin set +o 'monitor'
builtin set +o 'noclobber'
builtin set +o 'noglob'
builtin set +o 'nolog'
builtin set +o 'notify'
builtin set +o 'onecmd'
builtin set +o 'posix'

# Do not set/unset - Breaks bats-core
# set -o 'keyword'
# set -o 'noexec'

# Do not inherit sensitive environment variables
builtin unset MAIL
builtin unset ENV
builtin unset IFS
builtin unset TMPDIR

# Normalize terminal settings
TERM="${TERM:-vt100}"

#######################################
# BashLib64 / Module / Globals / Setup script run-time environment
#######################################

# shellcheck disable=SC2034
{
  declare BL64_VERSION='20.4.0'

  #
  # Imported shell standard variables
  #

  export LANG
  export LC_ALL
  export LANGUAGE
  export TERM

  #
  # Common constants
  #

  # Default value for parameters
  declare BL64_VAR_DEFAULT='DEFAULT'
  declare BL64_VAR_DEFAULT_LEGACY='_'

  # Flag for incompatible command or task
  declare BL64_VAR_INCOMPATIBLE='_INC_'

  # Flag for unavailable command or task
  declare BL64_VAR_UNAVAILABLE='_UNV_'

  # Pseudo null value
  declare BL64_VAR_NULL='_NULL_'

  # Logical values
  declare BL64_VAR_TRUE='0'
  declare BL64_VAR_FALSE='1'
  declare BL64_VAR_ON='1'
  declare BL64_VAR_OFF='0'
  declare BL64_VAR_OK='0'
  declare BL64_VAR_NONE='_NONE_'
  declare BL64_VAR_ALL='_ALL_'

  #
  # Global settings
  #
  # * Allows the caller to customize bashlib64 behaviour
  # * Set the variable to the intented value before sourcing bashlib64
  #

  # Run lib as command? (On/Off)
  declare BL64_LIB_CMD="${BL64_LIB_CMD:-$BL64_VAR_OFF}"

  # Enable generic compatibility mode? (On/Off)
  declare BL64_LIB_COMPATIBILITY="${BL64_LIB_COMPATIBILITY:-$BL64_VAR_ON}"

  # Normalize locale? (On/Off)
  declare BL64_LIB_LANG="${BL64_LIB_LANG:-$BL64_VAR_ON}"

  # Enable strict security? (On/Off)
  declare BL64_LIB_STRICT="${BL64_LIB_STRICT:-$BL64_VAR_ON}"

  # Enable lib shell traps? (On/Off)
  declare BL64_LIB_TRAPS="${BL64_LIB_TRAPS:-$BL64_VAR_ON}"

  #
  # Shared exit codes
  #
  # * Exit code 1 and 2 are reserved for the caller script
  # * Exit codes for bashlib64 functions must be between 3 and 127
  #

  # Application reserved. Not used by bashlib64
  # shellcheck disable=SC2034
  declare -i BL64_LIB_ERROR_APP_1=1
  declare -i BL64_LIB_ERROR_APP_2=2

  # Parameters
  # shellcheck disable=SC2034
  declare -i BL64_LIB_ERROR_PARAMETER_INVALID=3
  declare -i BL64_LIB_ERROR_PARAMETER_MISSING=4
  declare -i BL64_LIB_ERROR_PARAMETER_RANGE=5
  declare -i BL64_LIB_ERROR_PARAMETER_EMPTY=6

  # Function operation
  # shellcheck disable=SC2034
  declare -i BL64_LIB_ERROR_TASK_FAILED=10
  declare -i BL64_LIB_ERROR_TASK_BACKUP=11
  declare -i BL64_LIB_ERROR_TASK_RESTORE=12
  declare -i BL64_LIB_ERROR_TASK_TEMP=13
  declare -i BL64_LIB_ERROR_TASK_UNDEFINED=14
  declare -i BL64_LIB_ERROR_TASK_REQUIREMENTS=15

  # Module operation
  # shellcheck disable=SC2034
  declare -i BL64_LIB_ERROR_MODULE_SETUP_INVALID=20
  declare -i BL64_LIB_ERROR_MODULE_SETUP_MISSING=21
  declare -i BL64_LIB_ERROR_MODULE_NOT_IMPORTED=22

  # OS
  # shellcheck disable=SC2034
  declare -i BL64_LIB_ERROR_OS_NOT_MATCH=30
  declare -i BL64_LIB_ERROR_OS_TAG_INVALID=31
  declare -i BL64_LIB_ERROR_OS_INCOMPATIBLE=32
  declare -i BL64_LIB_ERROR_OS_BASH_VERSION=33

  # External commands
  # shellcheck disable=SC2034
  declare -i BL64_LIB_ERROR_APP_INCOMPATIBLE=40
  declare -i BL64_LIB_ERROR_APP_MISSING=41

  # Filesystem
  # shellcheck disable=SC2034
  declare -i BL64_LIB_ERROR_FILE_NOT_FOUND=50
  declare -i BL64_LIB_ERROR_FILE_NOT_READ=51
  declare -i BL64_LIB_ERROR_FILE_NOT_EXECUTE=52
  declare -i BL64_LIB_ERROR_DIRECTORY_NOT_FOUND=53
  declare -i BL64_LIB_ERROR_DIRECTORY_NOT_READ=54
  declare -i BL64_LIB_ERROR_PATH_NOT_RELATIVE=55
  declare -i BL64_LIB_ERROR_PATH_NOT_ABSOLUTE=56
  declare -i BL64_LIB_ERROR_PATH_NOT_FOUND=57
  declare -i BL64_LIB_ERROR_PATH_PRESENT=58

  # IAM
  # shellcheck disable=SC2034
  declare -i BL64_LIB_ERROR_PRIVILEGE_IS_ROOT=60
  declare -i BL64_LIB_ERROR_PRIVILEGE_IS_NOT_ROOT=61
  declare -i BL64_LIB_ERROR_USER_NOT_FOUND=62
  declare -i BL64_LIB_ERROR_GROUP_NOT_FOUND=63

  # General
  # shellcheck disable=SC2034
  declare -i BL64_LIB_ERROR_EXPORT_EMPTY=70
  declare -i BL64_LIB_ERROR_EXPORT_SET=71
  declare -i BL64_LIB_ERROR_OVERWRITE_NOT_PERMITED=72
  declare -i BL64_LIB_ERROR_CHECK_FAILED=80
  declare -i BL64_LIB_ERROR_IS_NOT=85

  #
  # Script Identify
  #

  # shellcheck disable=SC2034
  declare BL64_SCRIPT_PATH=''
  declare BL64_SCRIPT_NAME=''
  declare BL64_SCRIPT_SID=''
  declare BL64_SCRIPT_ID=''

  #
  # Set Signal traps
  #

  declare BL64_LIB_SIGNAL_HUP='-'
  declare BL64_LIB_SIGNAL_STOP='-'
  declare BL64_LIB_SIGNAL_QUIT='-'
  declare BL64_LIB_SIGNAL_DEBUG='-'
  declare BL64_LIB_SIGNAL_ERR='-'
  declare BL64_LIB_SIGNAL_EXIT='bl64_dbg_runtime_show'
}
#######################################
# BashLib64 / Module / Functions / Setup script run-time environment
#######################################

function bl64_lib_mode_command_is_enabled { bl64_lib_flag_is_enabled "$BL64_LIB_CMD"; }
function bl64_lib_mode_compability_is_enabled { bl64_lib_flag_is_enabled "$BL64_LIB_COMPATIBILITY"; }
function bl64_lib_mode_strict_is_enabled { bl64_lib_flag_is_enabled "$BL64_LIB_STRICT"; }

function bl64_lib_lang_is_enabled { bl64_lib_flag_is_enabled "$BL64_LIB_LANG"; }
function bl64_lib_trap_is_enabled { bl64_lib_flag_is_enabled "$BL64_LIB_TRAPS"; }

function bl64_lib_var_is_default { local value="${1:-}"; [[ "$value" == "$BL64_VAR_DEFAULT" || "$value" == "$BL64_VAR_DEFAULT_LEGACY" ]]; }

#######################################
# Determines if the flag variable is enabled or not
#
# * Use to query flag type parameters that are called directly from the shell where bl64 vars are not yet defined
# * Primitive function: should not depend on any other function or external command
# * Flag is considered enabled when value is:
#   * $BL64_VAR_ON
#   * 'ON' | 'on' | 'On'
#   * 'YES' | 'no' | 'No'
#   * 1
#
# Arguments:
#   $1: flag value. Strings are automatically converted to uppercase
# Outputs:
#   STDOUT: None
#   STDERR: command stderr
# Returns:
#   0: flag enabled
#   BL64_LIB_ERROR_IS_NOT
#   BL64_LIB_ERROR_PARAMETER_MISSING
#######################################
function bl64_lib_flag_is_enabled {
  local -u flag="${1:-}"

  # shellcheck disable=SC2086
  [[ -z "$flag" ]] && return $BL64_LIB_ERROR_PARAMETER_MISSING

  # shellcheck disable=SC2086
  [[ "$flag" == "$BL64_VAR_ON" ||
    "$flag" == 'ON' ||
    "$flag" == 'YES' ]] ||
    return $BL64_LIB_ERROR_IS_NOT
}

#######################################
# Set script ID
#
# * Use to change the default BL64_SCRIPT_ID which is BL64_SCRIPT_NAME
#
# Arguments:
#   $1: id value
# Outputs:
#   STDOUT: None
#   STDERR: Error messages
# Returns:
#   0: id changed ok
#   >0: command error
#######################################
# shellcheck disable=SC2120
function bl64_lib_script_set_id() {
  local script_id="${1:-}"
  # shellcheck disable=SC2086
  [[ -z "$script_id" ]] && return $BL64_LIB_ERROR_PARAMETER_MISSING
  BL64_SCRIPT_ID="$script_id"
}

#######################################
# Define current script identity
#
# * BL64_SCRIPT_SID: session ID for the running script. Changes on each run
# * BL64_SCRIPT_PATH: full path to the base directory script
# * BL64_SCRIPT_NAME: file name of the current script
# * BL64_SCRIPT_ID: script id (tag)
#
# Arguments:
#   None
# Outputs:
#   STDOUT: None
#   STDERR: Error messages
# Returns:
#   0: identity set
#   >0: failed to set
#######################################
function bl64_lib_script_set_identity() {
  BL64_SCRIPT_SID="${BASHPID}${RANDOM}" &&
    BL64_SCRIPT_PATH="$(_bl64_lib_script_get_path)" &&
    BL64_SCRIPT_NAME="$(_bl64_lib_script_get_name)" &&
    bl64_lib_script_set_id "$BL64_SCRIPT_NAME"
}

function _bl64_lib_script_get_path() {
  local -i main=${#BASH_SOURCE[*]}
  local caller=''

  ((main > 0)) && main=$((main - 1))
  caller="${BASH_SOURCE[${main}]}"

  unset CDPATH &&
    [[ -n "$caller" ]] &&
    cd -- "${caller%/*}" >/dev/null &&
    pwd -P ||
    return $?
}

function _bl64_lib_script_get_name() {
  local -i main=0
  local path=''
  local base=''

  main=${#BASH_SOURCE[*]}
  ((main > 0)) && main=$((main - 1))
  path="${BASH_SOURCE[${main}]}"

  if [[ -n "$path" && "$path" != '/' ]]; then
    base="${path##*/}"
  fi
  if [[ -z "$base" || "$base" == */* ]]; then
    # shellcheck disable=SC2086
    return $BL64_LIB_ERROR_PARAMETER_INVALID
  else
    printf '%s' "$base"
  fi
}

#######################################
# Check that the module is imported
#
# * Used for the modular version of bashlib64 to ensure dependant modules are loaded (sourced)
# * A module is considered imported if the associated shell environment variable BL64_XXX_MODULE is defined
# * This check will not verify if the module was also initialized. Use the function 'bl64_check_module' instead
#
# Arguments:
#   $1: module id (eg: BL64_XXXX_MODULE)
# Outputs:
#   STDOUT: none
#   STDERR: message
# Returns:
#   0: check ok
#   BL64_LIB_ERROR_MODULE_NOT_IMPORTED
#######################################
function bl64_lib_module_imported() {
  local module="${1:-}"
  [[ -z "$module" ]] && return $BL64_LIB_ERROR_PARAMETER_MISSING

  if [[ ! -v "$module" ]]; then
    module="${module##BL64_}"
    module="${module%%_MODULE}"
    printf 'Error: required BashLib64 module not found. Please source the module before using it. (module: %s | caller: %s)\n' \
      "${module%%BL64_}" \
      "${FUNCNAME[1]:-NONE}@${BASH_LINENO[1]:-NONE}.${FUNCNAME[2]:-NONE}@${BASH_LINENO[2]:-NONE}" \
      >&2
    # shellcheck disable=SC2086
    return $BL64_LIB_ERROR_MODULE_NOT_IMPORTED
  fi
  return 0
}

function bl64_lib_alert_parameter_invalid() {
  local parameter="${1:-${BL64_VAR_DEFAULT}}"
  local message="${2:-${BL64_VAR_DEFAULT}}"
  local value="${3:-${BL64_VAR_DEFAULT}}"

  [[ "$parameter" == "$BL64_VAR_DEFAULT" ]] && parameter=''
  [[ "$message" == "$BL64_VAR_DEFAULT" ]] && message='Error: the requested operation was provided with an invalid parameter value'
  [[ "$value" == "$BL64_VAR_DEFAULT" ]] && value=''
  printf '%s (%s%scaller: %s)\n' \
    "$message" \
    "${parameter:+parameter: ${parameter} | }" \
    "${value:+value: ${value} | }" \
    "${FUNCNAME[1]:-NONE}@${BASH_LINENO[1]:-NONE}.${FUNCNAME[2]:-NONE}@${BASH_LINENO[2]:-NONE}" \
    >&2
  return $BL64_LIB_ERROR_PARAMETER_INVALID
}

function bl64_lib_module_is_setup() {
  local module="${1:-}"
  local setup_status=''
  [[ -z "$module" ]] && return $BL64_LIB_ERROR_PARAMETER_MISSING
  bl64_lib_module_imported "$module" || return $?

  setup_status="${!module}"
  if [[ "$setup_status" == "$BL64_VAR_OFF" ]]; then
    printf 'Error: required BashLib64 module is not setup. Call the bl64_<MODULE>_setup function before using the module (module-id: %s | function: %s)\n' \
    "${module}" \
    "${FUNCNAME[1]:-NONE}@${BASH_LINENO[1]:-NONE}.${FUNCNAME[2]:-NONE}@${BASH_LINENO[2]:-NONE}" \
    >&2
    return $BL64_LIB_ERROR_MODULE_SETUP_MISSING
  fi
  return 0
}
#######################################
# BashLib64 / Module / Globals / Check for conditions and report status
#######################################

# shellcheck disable=SC2034
{
  declare BL64_CHECK_VERSION='6.1.1'

  declare BL64_CHECK_MODULE='0'

  declare _BL64_CHECK_TXT_PARAMETER_MISSING='required parameter is missing'
  declare _BL64_CHECK_TXT_PARAMETER_NOT_SET='required shell variable is not set'
  declare _BL64_CHECK_TXT_PARAMETER_DEFAULT='required parameter value must be other than default'
  declare _BL64_CHECK_TXT_PARAMETER_INVALID='the requested operation was provided with an invalid parameter value'

  declare _BL64_CHECK_TXT_COMMAND_NOT_FOUND='required command is not present'
  declare _BL64_CHECK_TXT_COMMAND_NOT_EXECUTABLE='required command is present but has no execution permission'
  declare _BL64_CHECK_TXT_COMMAND_NOT_INSTALLED='required command is not installed'
  declare _BL64_CHECK_TXT_COMMAND_NOT_IN_PATH='required command is not found in any of the search paths'

  declare _BL64_CHECK_TXT_FILE_NOT_FOUND='required file is not present'
  declare _BL64_CHECK_TXT_FILE_NOT_FILE='path is present but is not a regular file'
  declare _BL64_CHECK_TXT_FILE_NOT_READABLE='required file is present but has no read permission'

  declare _BL64_CHECK_TXT_DIRECTORY_NOT_FOUND='required directory is not present'
  declare _BL64_CHECK_TXT_DIRECTORY_NOT_DIR='path is present but is not a directory'
  declare _BL64_CHECK_TXT_DIRECTORY_NOT_READABLE='required directory is present but has no read permission'

  declare _BL64_CHECK_TXT_EXPORT_EMPTY='required shell exported variable is empty'
  declare _BL64_CHECK_TXT_EXPORT_SET='required shell exported variable is not set'

  declare _BL64_CHECK_TXT_PATH_NOT_FOUND='required path is not present'
  declare _BL64_CHECK_TXT_PATH_NOT_RELATIVE='required path must be relative'
  declare _BL64_CHECK_TXT_PATH_NOT_ABSOLUTE='required path must be absolute'
  declare _BL64_CHECK_TXT_PATH_PRESENT='requested path is already present'

  declare _BL64_CHECK_TXT_PRIVILEGE_IS_NOT_ROOT='the task requires root privilege. Please run the script as root or with SUDO'
  declare _BL64_CHECK_TXT_PRIVILEGE_IS_ROOT='the task should not be run with root privilege. Please run the script as a regular user and not using SUDO'

  declare _BL64_CHECK_TXT_OVERWRITE_NOT_PERMITED='target is already present and overwrite is not permitted. Unable to continue'
  declare _BL64_CHECK_TXT_OVERWRITE_SKIP_EXISTING='target is already present and overwrite is not requested. Target is left as is'

  declare _BL64_CHECK_TXT_INCOMPATIBLE='the requested operation is not supported on the current OS'
  declare _BL64_CHECK_TXT_UNDEFINED='requested command is not defined or implemented'
  declare _BL64_CHECK_TXT_NOARGS='the requested operation requires at least one parameter and none was provided'
  declare _BL64_CHECK_TXT_FAILED='task execution failed'

  declare _BL64_CHECK_TXT_MODULE_SETUP_FAILED='failed to setup the requested BashLib64 module'
  declare _BL64_CHECK_TXT_MODULE_NOT_SETUP='required BashLib64 module is not setup. Call the bl64_<MODULE>_setup function before using the module'

  declare _BL64_CHECK_TXT_HOME_MISSING='standard shell variable HOME is not defined'
  declare _BL64_CHECK_TXT_HOME_DIR_MISSING="unable to find user's HOME directory"

  declare _BL64_CHECK_TXT_RESOURCE_NOT_FOUND='required resource was not found on the system'
  declare _BL64_CHECK_TXT_STATUS_ERROR='task execution failed'
  declare _BL64_CHECK_TXT_COMPATIBILITY_MODE='using generic compatibility mode for untested command version'

  declare _BL64_CHECK_TXT_COMMAND='command'
  declare _BL64_CHECK_TXT_FILE='file'
  declare _BL64_CHECK_TXT_PATH='path'
  declare _BL64_CHECK_TXT_FUNCTION='caller'
  declare _BL64_CHECK_TXT_MODULE='module'
  declare _BL64_CHECK_TXT_PARAMETER='parameter'
}

#######################################
# BashLib64 / Module / Globals / Show shell debugging information
#######################################

# shellcheck disable=SC2034
{
  declare BL64_DBG_VERSION='3.1.1'

  declare BL64_DBG_MODULE='0'

  # Debug target
  declare BL64_DBG_TARGET=''

  #
  # Debug targets. Use to select what to debug and how
  #
  # * ALL_TRACE: Shell tracing for the application and bashlib64
  # * APP_TRACE: Shell tracing for selected application functions
  # * APP_TASK: Debugging messages from selected application functions
  # * APP_CMD: External commands: enable command specific debugging options used in the app
  # * APP_CUSTOM_X: Do nothing. Reserved to allow the application define custom debug
  # * APP_ALL: Enable full app debugging (task,trace,cmd)
  # * LIB_TRACE: Shell tracing for selected bashlib64 functions
  # * LIB_TASK: Debugging messages from selected bashlib64 functions
  # * LIB_CMD: External commands: enable command specific debugging options used in bashlib64
  # * LIB_ALL: Enable full bashlib64 debugging (task,trace,cmd)
  #

  declare BL64_DBG_TARGET_NONE='NONE'
  declare BL64_DBG_TARGET_APP_TRACE='APP_TRACE'
  declare BL64_DBG_TARGET_APP_TASK='APP_TASK'
  declare BL64_DBG_TARGET_APP_CMD='APP_CMD'
  declare BL64_DBG_TARGET_APP_ALL='APP'
  declare BL64_DBG_TARGET_APP_CUSTOM_1='CUSTOM_1'
  declare BL64_DBG_TARGET_APP_CUSTOM_2='CUSTOM_2'
  declare BL64_DBG_TARGET_APP_CUSTOM_3='CUSTOM_3'
  declare BL64_DBG_TARGET_LIB_TRACE='LIB_TRACE'
  declare BL64_DBG_TARGET_LIB_TASK='LIB_TASK'
  declare BL64_DBG_TARGET_LIB_CMD='LIB_CMD'
  declare BL64_DBG_TARGET_LIB_ALL='LIB'
  declare BL64_DBG_TARGET_ALL='ALL'

  #
  # Debugging exclussions
  #
  # * Used to excluded non-esential debugging information from general output
  # * Each variable represents a module
  # * Default is to exclude declared modules
  #

  declare BL64_DBG_EXCLUDE_CHECK="$BL64_VAR_ON"
  declare BL64_DBG_EXCLUDE_MSG="$BL64_VAR_ON"
  declare BL64_DBG_EXCLUDE_LOG="$BL64_VAR_ON"

  declare _BL64_DBG_TXT_FUNCTION_START='start-function-tracing'
  declare _BL64_DBG_TXT_FUNCTION_STOP='stop-function-tracing'
  declare _BL64_DBG_TXT_SHELL_VAR='shell-variable'
  declare _BL64_DBG_TXT_COMMENTS='dev-comments'
  declare _BL64_DBG_TXT_INFO='dev-info'

  declare _BL64_DBG_TXT_LABEL_BASH_RUNTIME='[bash-runtime]'
  declare _BL64_DBG_TXT_LABEL_BL64_RUNTIME='[bl64-runtime]'
  declare _BL64_DBG_TXT_LABEL_BASH_VARIABLE='[bash-variable]'
  declare _BL64_DBG_TXT_LABEL_FUNCTION='>>>'
  declare _BL64_DBG_TXT_LABEL_INFO='==='
  declare _BL64_DBG_TXT_LABEL_TRACE='***'

  declare _BL64_DBG_TXT_BASH='Bash / Interpreter path'
  declare _BL64_DBG_TXT_BASHOPTS='Bash / ShOpt Options'
  declare _BL64_DBG_TXT_SHELLOPTS='Bash / Set -o Options'
  declare _BL64_DBG_TXT_BASH_VERSION='Bash / Version'
  declare _BL64_DBG_TXT_OSTYPE='Bash / Detected OS'
  declare _BL64_DBG_TXT_LC_ALL='Shell / Locale setting'
  declare _BL64_DBG_TXT_HOSTNAME='Shell / Hostname'
  declare _BL64_DBG_TXT_EUID='Script / User ID'
  declare _BL64_DBG_TXT_UID='Script / Effective User ID'
  declare _BL64_DBG_TXT_BASH_ARGV='Script / Arguments'
  declare _BL64_DBG_TXT_COMMAND='Script / Last executed command'
  declare _BL64_DBG_TXT_STATUS='Script / Last exit status'

  declare _BL64_DBG_TXT_FUNCTION_APP_RUN='run app function with parameters'
  declare _BL64_DBG_TXT_FUNCTION_LIB_RUN='run bashlib64 function with parameters'

  declare _BL64_DBG_TXT_CALLSTACK='Last executed function'

  declare _BL64_DBG_TXT_HOME='Home directory (HOME)'
  declare _BL64_DBG_TXT_PATH='Search path (PATH)'
  declare _BL64_DBG_TXT_CD_PWD='Current cd working directory (PWD)'
  declare _BL64_DBG_TXT_CD_OLDPWD='Previous cd working directory (OLDPWD)'
  declare _BL64_DBG_TXT_SCRIPT_PATH='Initial script path (BL64_SCRIPT_PATH)'
  declare _BL64_DBG_TXT_TMPDIR='Temporary path (TMPDIR)'
  declare _BL64_DBG_TXT_PWD='Current working directory (pwd command)'
  declare _BL64_DBG_TXT_DEBUG='Debug'

  declare _BL64_DBG_TXT_WRONG_LEVEL='invalid debugging level. Must be one of: '
}

#######################################
# BashLib64 / Module / Globals / Write messages to logs
#######################################

# shellcheck disable=SC2034
{
  declare BL64_LOG_VERSION='2.1.1'

  declare BL64_LOG_MODULE='0'

  # Log file types
  declare BL64_LOG_FORMAT_CSV='C'

  # Logging categories
  declare BL64_LOG_CATEGORY_NONE='NONE'
  declare BL64_LOG_CATEGORY_INFO='INFO'
  declare BL64_LOG_CATEGORY_DEBUG='DEBUG'
  declare BL64_LOG_CATEGORY_WARNING='WARNING'
  declare BL64_LOG_CATEGORY_ERROR='ERROR'

  # Parameters
  declare BL64_LOG_REPOSITORY_MODE='0755'
  declare BL64_LOG_TARGET_MODE='0644'

  # Module variables
  declare BL64_LOG_FS=''
  declare BL64_LOG_FORMAT=''
  declare BL64_LOG_LEVEL=''
  declare BL64_LOG_REPOSITORY=''
  declare BL64_LOG_DESTINATION=''
  declare BL64_LOG_RUNTIME=''

  declare _BL64_LOG_TXT_INVALID_TYPE='invalid log type. Please use any of BL64_LOG_TYPE_*'
  declare _BL64_LOG_TXT_SET_TARGET_FAILED='failed to set log target'
  declare _BL64_LOG_TXT_CREATE_REPOSITORY='create log repository'
}

#######################################
# BashLib64 / Module / Globals / Display messages
#######################################

# shellcheck disable=SC2034
{
  declare BL64_MSG_VERSION='5.3.0'

  declare BL64_MSG_MODULE='0'

  # Target verbosity)
  declare BL64_MSG_VERBOSE=''

  #
  # Verbosity levels
  #
  # * 0: nothing is showed
  # * 1: application messages only
  # * 2: bashlib64 and application messages
  #

  declare BL64_MSG_VERBOSE_NONE='NONE'
  declare BL64_MSG_VERBOSE_APP='APP'
  declare BL64_MSG_VERBOSE_LIB='LIB'
  declare BL64_MSG_VERBOSE_ALL='ALL'

  #
  # Message type tag
  #

  declare BL64_MSG_TYPE_BATCH='BATCH'
  declare BL64_MSG_TYPE_BATCHERR='BATCHERR'
  declare BL64_MSG_TYPE_BATCHOK='BATCHOK'
  declare BL64_MSG_TYPE_ERROR='ERROR'
  declare BL64_MSG_TYPE_INFO='INFO'
  declare BL64_MSG_TYPE_INIT='INIT'
  declare BL64_MSG_TYPE_INPUT='INPUT'
  declare BL64_MSG_TYPE_LIBINFO='LIBINFO'
  declare BL64_MSG_TYPE_LIBSUBTASK='LIBSUBTASK'
  declare BL64_MSG_TYPE_LIBTASK='LIBTASK'
  declare BL64_MSG_TYPE_PHASE='PHASE'
  declare BL64_MSG_TYPE_SEPARATOR='SEPARATOR'
  declare BL64_MSG_TYPE_SUBTASK='SUBTASK'
  declare BL64_MSG_TYPE_TASK='TASK'
  declare BL64_MSG_TYPE_WARNING='WARNING'

  #
  # Message output type
  #

  declare BL64_MSG_OUTPUT_ASCII='A'
  declare BL64_MSG_OUTPUT_ANSI='N'

  # default message output type
  declare BL64_MSG_OUTPUT=''

  #
  # Message formats
  #

  declare BL64_MSG_FORMAT_PLAIN='R'
  declare BL64_MSG_FORMAT_HOST='H'
  declare BL64_MSG_FORMAT_TIME='T'
  declare BL64_MSG_FORMAT_CALLER='C'
  declare BL64_MSG_FORMAT_FULL='F'

  # Selected message format
  declare BL64_MSG_FORMAT="${BL64_MSG_FORMAT:-$BL64_MSG_FORMAT_FULL}"

  #
  # Message Themes
  #

  declare BL64_MSG_THEME_ID_ASCII_STD='ascii-std'
  declare BL64_MSG_THEME_ASCII_STD_BATCH='(@)'
  declare BL64_MSG_THEME_ASCII_STD_BATCHERR='(@)'
  declare BL64_MSG_THEME_ASCII_STD_BATCHOK='(@)'
  declare BL64_MSG_THEME_ASCII_STD_ERROR='(!)'
  declare BL64_MSG_THEME_ASCII_STD_FMTCALLER=''
  declare BL64_MSG_THEME_ASCII_STD_FMTHOST=''
  declare BL64_MSG_THEME_ASCII_STD_FMTTIME=''
  declare BL64_MSG_THEME_ASCII_STD_INFO='(I)'
  declare BL64_MSG_THEME_ASCII_STD_INIT='(:)'
  declare BL64_MSG_THEME_ASCII_STD_INPUT='(?)'
  declare BL64_MSG_THEME_ASCII_STD_LIBINFO='(II)'
  declare BL64_MSG_THEME_ASCII_STD_LIBSUBTASK='(>>)'
  declare BL64_MSG_THEME_ASCII_STD_LIBTASK='(--)'
  declare BL64_MSG_THEME_ASCII_STD_PHASE='(=)'
  declare BL64_MSG_THEME_ASCII_STD_SEPARATOR=''
  declare BL64_MSG_THEME_ASCII_STD_SUBTASK='(>)'
  declare BL64_MSG_THEME_ASCII_STD_TASK='(-)'
  declare BL64_MSG_THEME_ASCII_STD_WARNING='(*)'

  declare BL64_MSG_THEME_ID_ANSI_STD='ansi-std'
  declare BL64_MSG_THEME_ANSI_STD_BATCH='30;1;47'
  declare BL64_MSG_THEME_ANSI_STD_BATCHERR='5;30;41'
  declare BL64_MSG_THEME_ANSI_STD_BATCHOK='30;42'
  declare BL64_MSG_THEME_ANSI_STD_ERROR='5;37;41'
  declare BL64_MSG_THEME_ANSI_STD_FMTCALLER='33'
  declare BL64_MSG_THEME_ANSI_STD_FMTHOST='34'
  declare BL64_MSG_THEME_ANSI_STD_FMTTIME='36'
  declare BL64_MSG_THEME_ANSI_STD_INFO='36'
  declare BL64_MSG_THEME_ANSI_STD_INIT='36'
  declare BL64_MSG_THEME_ANSI_STD_INPUT='5;30;47'
  declare BL64_MSG_THEME_ANSI_STD_LIBINFO='1;32'
  declare BL64_MSG_THEME_ANSI_STD_LIBSUBTASK='1;36'
  declare BL64_MSG_THEME_ANSI_STD_LIBTASK='1;35'
  declare BL64_MSG_THEME_ANSI_STD_PHASE='7;1;36'
  declare BL64_MSG_THEME_ANSI_STD_SEPARATOR='30;44'
  declare BL64_MSG_THEME_ANSI_STD_SUBTASK='37'
  declare BL64_MSG_THEME_ANSI_STD_TASK='1;37'
  declare BL64_MSG_THEME_ANSI_STD_WARNING='5;37;43'

  # Selected message theme
  declare BL64_MSG_THEME='BL64_MSG_THEME_ANSI_STD'

  #
  # ANSI codes
  #

  declare BL64_MSG_ANSI_FG_BLACK='30'
  declare BL64_MSG_ANSI_FG_RED='31'
  declare BL64_MSG_ANSI_FG_GREEN='32'
  declare BL64_MSG_ANSI_FG_BROWN='33'
  declare BL64_MSG_ANSI_FG_BLUE='34'
  declare BL64_MSG_ANSI_FG_PURPLE='35'
  declare BL64_MSG_ANSI_FG_CYAN='36'
  declare BL64_MSG_ANSI_FG_LIGHT_GRAY='37'
  declare BL64_MSG_ANSI_FG_DARK_GRAY='1;30'
  declare BL64_MSG_ANSI_FG_LIGHT_RED='1;31'
  declare BL64_MSG_ANSI_FG_LIGHT_GREEN='1;32'
  declare BL64_MSG_ANSI_FG_YELLOW='1;33'
  declare BL64_MSG_ANSI_FG_LIGHT_BLUE='1;34'
  declare BL64_MSG_ANSI_FG_LIGHT_PURPLE='1;35'
  declare BL64_MSG_ANSI_FG_LIGHT_CYAN='1;36'
  declare BL64_MSG_ANSI_FG_WHITE='1;37'

  declare BL64_MSG_ANSI_BG_BLACK='40'
  declare BL64_MSG_ANSI_BG_RED='41'
  declare BL64_MSG_ANSI_BG_GREEN='42'
  declare BL64_MSG_ANSI_BG_BROWN='43'
  declare BL64_MSG_ANSI_BG_BLUE='44'
  declare BL64_MSG_ANSI_BG_PURPLE='45'
  declare BL64_MSG_ANSI_BG_CYAN='46'
  declare BL64_MSG_ANSI_BG_LIGHT_GRAY='47'
  declare BL64_MSG_ANSI_BG_DARK_GRAY='1;40'
  declare BL64_MSG_ANSI_BG_LIGHT_RED='1;41'
  declare BL64_MSG_ANSI_BG_LIGHT_GREEN='1;42'
  declare BL64_MSG_ANSI_BG_YELLOW='1;43'
  declare BL64_MSG_ANSI_BG_LIGHT_BLUE='1;44'
  declare BL64_MSG_ANSI_BG_LIGHT_PURPLE='1;45'
  declare BL64_MSG_ANSI_BG_LIGHT_CYAN='1;46'
  declare BL64_MSG_ANSI_BG_WHITE='1;47'

  declare BL64_MSG_ANSI_CHAR_NORMAL='0'
  declare BL64_MSG_ANSI_CHAR_BOLD='1'
  declare BL64_MSG_ANSI_CHAR_UNDERLINE='4'
  declare BL64_MSG_ANSI_CHAR_BLINK='5'
  declare BL64_MSG_ANSI_CHAR_REVERSE='7'

  #
  # Cosmetic
  #

  declare BL64_MSG_COSMETIC_TAB2='  '
  declare BL64_MSG_COSMETIC_TAB4='    '
  declare BL64_MSG_COSMETIC_TAB6='      '
  declare BL64_MSG_COSMETIC_ARROW='-->'
  declare BL64_MSG_COSMETIC_ARROW2='==>'
  declare BL64_MSG_COSMETIC_ARROW3='>>>'
  declare BL64_MSG_COSMETIC_LEFT_ARROW='<--'
  declare BL64_MSG_COSMETIC_LEFT_ARROW2='<=='
  declare BL64_MSG_COSMETIC_LEFT_ARROW3='<<<'
  declare BL64_MSG_COSMETIC_PHASE_PREFIX='===['
  declare BL64_MSG_COSMETIC_PHASE_SUFIX=']==='
  declare BL64_MSG_COSMETIC_PIPE='|'
  declare BL64_MSG_COSMETIC_ARROW='-->'
}

#######################################
# BashLib64 / Module / Globals / OS / Identify OS attributes and provide command aliases
#######################################

# shellcheck disable=SC2034
{
  declare BL64_OS_VERSION='5.4.1'

  declare BL64_OS_MODULE='0'

  # Current OS Distro ID
  declare BL64_OS_DISTRO=''

  # Current OS Flavor ID
  declare BL64_OS_FLAVOR=''

  declare BL64_OS_CMD_BASH=''
  declare BL64_OS_CMD_CAT=''
  declare BL64_OS_CMD_DATE=''
  declare BL64_OS_CMD_FALSE=''
  declare BL64_OS_CMD_GETENT=''
  declare BL64_OS_CMD_HOSTNAME=''
  declare BL64_OS_CMD_LOCALE=''
  declare BL64_OS_CMD_SLEEP=''
  declare BL64_OS_CMD_TEE=''
  declare BL64_OS_CMD_TRUE=''
  declare BL64_OS_CMD_UNAME=''

  declare BL64_OS_SET_LOCALE_ALL=''

  #
  # OS standard name tags
  #
  # * Used to normalize OS names
  # * Value format: [A-Z]+
  #

  declare BL64_OS_ALM='ALMALINUX'
  declare BL64_OS_ALP='ALPINE'
  declare BL64_OS_AMZ='AMAZONLINUX'
  declare BL64_OS_CNT='CENTOS'
  declare BL64_OS_DEB='DEBIAN'
  declare BL64_OS_FD='FEDORA'
  declare BL64_OS_KL='KALI'
  declare BL64_OS_MCOS='DARWIN'
  declare BL64_OS_OL='ORACLELINUX'
  declare BL64_OS_RCK='ROCKYLINUX'
  declare BL64_OS_RHEL='RHEL'
  declare BL64_OS_SLES='SLES'
  declare BL64_OS_UB='UBUNTU'
  declare BL64_OS_UNK='UNKNOWN'

  #
  # OS flavor tags
  #
  # * Flavor defines groups of OS distros that are 100% compatible between them

  declare BL64_OS_FLAVOR_ALPINE='ALPINE'
  declare BL64_OS_FLAVOR_DEBIAN='DEBIAN'
  declare BL64_OS_FLAVOR_FEDORA='FEDORA'
  declare BL64_OS_FLAVOR_MACOS='MACOS'
  declare BL64_OS_FLAVOR_REDHAT='REDHAT'
  declare BL64_OS_FLAVOR_SUSE='SUSE'
}

#######################################
# BashLib64 / Module / Setup / Check for conditions and report status
#######################################

#######################################
# Setup the bashlib64 module
#
# * Warning: bootstrap function
#
# Arguments:
#   None
# Outputs:
#   STDOUT: None
#   STDERR: None
# Returns:
#   0: setup ok
#   >0: setup failed
#######################################
function bl64_check_setup() {
  [[ -z "$BL64_VERSION" ]] &&
    echo 'Error: bashlib64-module-core.bash should the last module to be sourced' &&
    return 21
  bl64_dbg_lib_check_enabled && bl64_dbg_lib_show_function

  # shellcheck disable=SC2034
  bl64_lib_module_imported 'BL64_DBG_MODULE' &&
    bl64_dbg_lib_show_function &&
    bl64_lib_module_imported 'BL64_MSG_MODULE' &&
    BL64_CHECK_MODULE="$BL64_VAR_ON"
  bl64_check_alert_module_setup 'check'
}

#######################################
# BashLib64 / Module / Functions / Check for conditions and report status
#######################################

# DEPRECATED: to be removed in future releases
function bl64_check_module_imported() { bl64_msg_show_deprecated 'bl64_check_module_imported' 'bl64_lib_module_imported'; bl64_lib_module_imported "$@"; }

#######################################
# Check and report if the command is present and has execute permissions for the current user.
#
# Arguments:
#   $1: Full path to the command to check
#   $2: (optional) Not found error message. Default: _BL64_CHECK_TXT_COMMAND_NOT_FOUND
#   $3: (optional) Command name. Displayed in the error message when not found
# Outputs:
#   STDOUT: None
#   STDERR: Error message
# Returns:
#   0: Command found
#   $BL64_LIB_ERROR_PARAMETER_MISSING
#   $BL64_LIB_ERROR_APP_INCOMPATIBLE
#   $BL64_LIB_ERROR_APP_MISSING
#   $BL64_LIB_ERROR_FILE_NOT_FOUND
#   $BL64_LIB_ERROR_FILE_NOT_EXECUTE
#######################################
function bl64_check_command() {
  bl64_dbg_lib_check_enabled && bl64_dbg_lib_show_function "$@"
  local path="${1:-}"
  local message="${2:-$BL64_VAR_DEFAULT}"
  local command_name="${3:-}"

  bl64_check_parameter 'path' || return $?
  [[ "$message" == "$BL64_VAR_DEFAULT" ]] && message="$_BL64_CHECK_TXT_COMMAND_NOT_FOUND"

  if [[ "$path" == "$BL64_VAR_INCOMPATIBLE" ]]; then
    bl64_msg_show_error "${_BL64_CHECK_TXT_INCOMPATIBLE} (OS: ${BL64_OS_DISTRO} ${BL64_MSG_COSMETIC_PIPE} ${_BL64_CHECK_TXT_FUNCTION}: ${FUNCNAME[1]:-NONE}@${BASH_LINENO[1]:-NONE}.${FUNCNAME[2]:-NONE}@${BASH_LINENO[2]:-NONE})"
    # shellcheck disable=SC2086
    return $BL64_LIB_ERROR_APP_INCOMPATIBLE
  fi

  if [[ "$path" == "$BL64_VAR_UNAVAILABLE" ]]; then
    bl64_msg_show_error "${_BL64_CHECK_TXT_COMMAND_NOT_INSTALLED} (${command_name:+${_BL64_CHECK_TXT_COMMAND}: ${command_name} ${BL64_MSG_COSMETIC_PIPE} }${_BL64_CHECK_TXT_FUNCTION}: ${FUNCNAME[1]:-NONE}@${BASH_LINENO[1]:-NONE}.${FUNCNAME[2]:-NONE}@${BASH_LINENO[2]:-NONE})"
    # shellcheck disable=SC2086
    return $BL64_LIB_ERROR_APP_MISSING
  fi

  if [[ ! -e "$path" ]]; then
    bl64_msg_show_error "${message} (${_BL64_CHECK_TXT_COMMAND}: ${path} ${BL64_MSG_COSMETIC_PIPE} ${_BL64_CHECK_TXT_FUNCTION}: ${FUNCNAME[1]:-NONE}@${BASH_LINENO[1]:-NONE}.${FUNCNAME[2]:-NONE}@${BASH_LINENO[2]:-NONE})"
    # shellcheck disable=SC2086
    return $BL64_LIB_ERROR_FILE_NOT_FOUND
  fi

  if [[ ! -x "$path" ]]; then
    bl64_msg_show_error "${_BL64_CHECK_TXT_COMMAND_NOT_EXECUTABLE} (${_BL64_CHECK_TXT_COMMAND}: ${path} ${BL64_MSG_COSMETIC_PIPE} ${_BL64_CHECK_TXT_FUNCTION}: ${FUNCNAME[1]:-NONE}@${BASH_LINENO[1]:-NONE}.${FUNCNAME[2]:-NONE}@${BASH_LINENO[2]:-NONE})"
    # shellcheck disable=SC2086
    return $BL64_LIB_ERROR_FILE_NOT_EXECUTE
  fi

  return 0
}

#######################################
# Check that the file is present and has read permissions for the current user.
#
# Arguments:
#   $1: Full path to the file
#   $2: Not found error message. Default: _BL64_CHECK_TXT_FILE_NOT_FOUND
# Outputs:
#   STDOUT: None
#   STDERR: Error message
# Returns:
#   0: Check ok
#   $BL64_LIB_ERROR_PARAMETER_MISSING
#   $BL64_LIB_ERROR_FILE_NOT_FOUND
#   $BL64_LIB_ERROR_FILE_NOT_READ
#######################################
function bl64_check_file() {
  bl64_dbg_lib_check_enabled && bl64_dbg_lib_show_function "$@"
  local path="${1:-}"
  local message="${2:-${_BL64_CHECK_TXT_FILE_NOT_FOUND}}"

  bl64_check_parameter 'path' || return $?
  if [[ ! -e "$path" ]]; then
    bl64_msg_show_error "${message} (${_BL64_CHECK_TXT_PATH}: ${path} ${BL64_MSG_COSMETIC_PIPE} ${_BL64_CHECK_TXT_FUNCTION}: ${FUNCNAME[1]:-NONE}@${BASH_LINENO[1]:-NONE}.${FUNCNAME[2]:-NONE}@${BASH_LINENO[2]:-NONE})"
    # shellcheck disable=SC2086
    return $BL64_LIB_ERROR_FILE_NOT_FOUND
  fi
  if [[ ! -f "$path" ]]; then
    bl64_msg_show_error "${_BL64_CHECK_TXT_FILE_NOT_FILE} (${_BL64_CHECK_TXT_PATH}: ${path} ${BL64_MSG_COSMETIC_PIPE} ${_BL64_CHECK_TXT_FUNCTION}: ${FUNCNAME[1]:-NONE}@${BASH_LINENO[1]:-NONE}.${FUNCNAME[2]:-NONE}@${BASH_LINENO[2]:-NONE})"
    # shellcheck disable=SC2086
    return $BL64_LIB_ERROR_FILE_NOT_FOUND
  fi
  if [[ ! -r "$path" ]]; then
    bl64_msg_show_error "${_BL64_CHECK_TXT_FILE_NOT_READABLE} (${_BL64_CHECK_TXT_FILE}: ${path} ${BL64_MSG_COSMETIC_PIPE} ${_BL64_CHECK_TXT_FUNCTION}: ${FUNCNAME[1]:-NONE}@${BASH_LINENO[1]:-NONE}.${FUNCNAME[2]:-NONE}@${BASH_LINENO[2]:-NONE})"
    # shellcheck disable=SC2086
    return $BL64_LIB_ERROR_FILE_NOT_READ
  fi
  return 0
}

#######################################
# Check that the directory is present and has read and execute permissions for the current user.
#
# Arguments:
#   $1: Full path to the directory
#   $2: Not found error message. Default: _BL64_CHECK_TXT_DIRECTORY_NOT_FOUND
# Outputs:
#   STDOUT: None
#   STDERR: Error message
# Returns:
#   0: Check ok
#   $BL64_LIB_ERROR_PARAMETER_MISSING
#   $BL64_LIB_ERROR_DIRECTORY_NOT_FOUND
#   $BL64_LIB_ERROR_DIRECTORY_NOT_READ
#######################################
function bl64_check_directory() {
  bl64_dbg_lib_check_enabled && bl64_dbg_lib_show_function "$@"
  local path="${1:-}"
  local message="${2:-${_BL64_CHECK_TXT_DIRECTORY_NOT_FOUND}}"

  bl64_check_parameter 'path' || return $?
  if [[ ! -e "$path" ]]; then
    bl64_msg_show_error "${message} (${_BL64_CHECK_TXT_PATH}: ${path} ${BL64_MSG_COSMETIC_PIPE} ${_BL64_CHECK_TXT_FUNCTION}: ${FUNCNAME[1]:-NONE}@${BASH_LINENO[1]:-NONE}.${FUNCNAME[2]:-NONE}@${BASH_LINENO[2]:-NONE})"
    # shellcheck disable=SC2086
    return $BL64_LIB_ERROR_DIRECTORY_NOT_FOUND
  fi
  if [[ ! -d "$path" ]]; then
    bl64_msg_show_error "${_BL64_CHECK_TXT_DIRECTORY_NOT_DIR} (${_BL64_CHECK_TXT_PATH}: ${path} ${BL64_MSG_COSMETIC_PIPE} ${_BL64_CHECK_TXT_FUNCTION}: ${FUNCNAME[1]:-NONE}@${BASH_LINENO[1]:-NONE}.${FUNCNAME[2]:-NONE}@${BASH_LINENO[2]:-NONE})"
    # shellcheck disable=SC2086
    return $BL64_LIB_ERROR_DIRECTORY_NOT_FOUND
  fi
  if [[ ! -r "$path" || ! -x "$path" ]]; then
    bl64_msg_show_error "${_BL64_CHECK_TXT_DIRECTORY_NOT_READABLE} (${_BL64_CHECK_TXT_PATH}: ${path} ${BL64_MSG_COSMETIC_PIPE} ${_BL64_CHECK_TXT_FUNCTION}: ${FUNCNAME[1]:-NONE}@${BASH_LINENO[1]:-NONE}.${FUNCNAME[2]:-NONE}@${BASH_LINENO[2]:-NONE})"
    # shellcheck disable=SC2086
    return $BL64_LIB_ERROR_DIRECTORY_NOT_READ
  fi
  return 0
}

#######################################
# Check that the path is present
#
# * The target must can be of any type
#
# Arguments:
#   $1: Full path
#   $2: Not found error message. Default: _BL64_CHECK_TXT_PATH_NOT_FOUND
# Outputs:
#   STDOUT: None
#   STDERR: Error message
# Returns:
#   0: Check ok
#   $BL64_LIB_ERROR_PARAMETER_MISSING
#   $BL64_LIB_ERROR_PATH_NOT_FOUND
#######################################
function bl64_check_path() {
  bl64_dbg_lib_check_enabled && bl64_dbg_lib_show_function "$@"
  local path="${1:-}"
  local message="${2:-${_BL64_CHECK_TXT_PATH_NOT_FOUND}}"

  bl64_check_parameter 'path' || return $?
  if [[ ! -e "$path" ]]; then
    bl64_msg_show_error "${message} (${_BL64_CHECK_TXT_PATH}: ${path} ${BL64_MSG_COSMETIC_PIPE} ${_BL64_CHECK_TXT_FUNCTION}: ${FUNCNAME[1]:-NONE}@${BASH_LINENO[1]:-NONE}.${FUNCNAME[2]:-NONE}@${BASH_LINENO[2]:-NONE})"
    # shellcheck disable=SC2086
    return $BL64_LIB_ERROR_PATH_NOT_FOUND
  fi
  return 0
}

#######################################
# Check for mandatory shell function parameters
#
# * Check that:
#   * variable is defined
#   * parameter is not empty
#   * parameter is not using null value
#   * parameter is not using default value: this is to allow the calling function to have several mandatory parameters before optionals
#
# Arguments:
#   $1: parameter name
#   $2: (optional) parameter description. Shown on error messages
# Outputs:
#   STDOUT: None
#   STDERR: Error message
# Returns:
#   0: Check ok
#   $BL64_LIB_ERROR_PARAMETER_MISSING
#   $BL64_LIB_ERROR_PARAMETER_EMPTY
#######################################
function bl64_check_parameter() {
  bl64_dbg_lib_check_enabled && bl64_dbg_lib_show_function "$@"
  local parameter_name="${1:-}"
  local description="${2:-parameter: ${parameter_name}}"
  local parameter_ref=''

  if [[ -z "$parameter_name" ]]; then
    bl64_msg_show_error "${_BL64_CHECK_TXT_PARAMETER_MISSING} (${_BL64_CHECK_TXT_PARAMETER}: ${parameter_name} ${BL64_MSG_COSMETIC_PIPE} ${_BL64_CHECK_TXT_FUNCTION}: ${FUNCNAME[1]:-NONE}@${BASH_LINENO[1]:-NONE}.${FUNCNAME[2]:-NONE}@${BASH_LINENO[2]:-NONE})"
    return $BL64_LIB_ERROR_PARAMETER_EMPTY
  fi

  if [[ ! -v "$parameter_name" ]]; then
    bl64_msg_show_error "${_BL64_CHECK_TXT_PARAMETER_NOT_SET} (${description} ${BL64_MSG_COSMETIC_PIPE} ${_BL64_CHECK_TXT_FUNCTION}: ${FUNCNAME[1]:-NONE}@${BASH_LINENO[1]:-NONE}.${FUNCNAME[2]:-NONE}@${BASH_LINENO[2]:-NONE})"
    return $BL64_LIB_ERROR_PARAMETER_MISSING
  fi

  parameter_ref="${!parameter_name}"
  if [[ -z "$parameter_ref" || "$parameter_ref" == "${BL64_VAR_NULL}" ]]; then
    bl64_msg_show_error "${_BL64_CHECK_TXT_PARAMETER_MISSING} (${description} ${BL64_MSG_COSMETIC_PIPE} ${_BL64_CHECK_TXT_FUNCTION}: ${FUNCNAME[1]:-NONE}@${BASH_LINENO[1]:-NONE}.${FUNCNAME[2]:-NONE}@${BASH_LINENO[2]:-NONE})"
    return $BL64_LIB_ERROR_PARAMETER_EMPTY
  fi

  if [[ "$parameter_ref" == "${BL64_VAR_DEFAULT}" ]]; then
    bl64_msg_show_error "${_BL64_CHECK_TXT_PARAMETER_DEFAULT} (${description} ${BL64_MSG_COSMETIC_PIPE} ${_BL64_CHECK_TXT_FUNCTION}: ${FUNCNAME[1]:-NONE}@${BASH_LINENO[1]:-NONE}.${FUNCNAME[2]:-NONE}@${BASH_LINENO[2]:-NONE})"
    return $BL64_LIB_ERROR_PARAMETER_INVALID
  fi
  return 0
}

#######################################
# Check shell exported environment variable:
#   - exported variable is not empty
#   - exported variable is set
#
# Arguments:
#   $1: parameter name
#   $2: parameter description. Shown on error messages
# Outputs:
#   STDOUT: None
#   STDERR: Error message
# Returns:
#   0: Check ok
#   $BL64_LIB_ERROR_PARAMETER_MISSING
#   $BL64_LIB_ERROR_EXPORT_EMPTY
#   $BL64_LIB_ERROR_EXPORT_SET
#######################################
function bl64_check_export() {
  bl64_dbg_lib_check_enabled && bl64_dbg_lib_show_function "$@"
  local export_name="${1:-}"
  local description="${2:-export: $export_name}"
  local export_ref=''

  bl64_check_parameter 'export_name' || return $?

  if [[ ! -v "$export_name" ]]; then
    bl64_msg_show_error "${_BL64_CHECK_TXT_EXPORT_SET} (${description} ${BL64_MSG_COSMETIC_PIPE} ${_BL64_CHECK_TXT_FUNCTION}: ${FUNCNAME[1]:-NONE}@${BASH_LINENO[1]:-NONE}.${FUNCNAME[2]:-NONE}@${BASH_LINENO[2]:-NONE})"
    # shellcheck disable=SC2086
    return $BL64_LIB_ERROR_EXPORT_SET
  fi

  export_ref="${!export_name}"
  if [[ -z "$export_ref" ]]; then
    bl64_msg_show_error "${_BL64_CHECK_TXT_EXPORT_EMPTY} (${description} ${BL64_MSG_COSMETIC_PIPE} ${_BL64_CHECK_TXT_FUNCTION}: ${FUNCNAME[1]:-NONE}@${BASH_LINENO[1]:-NONE}.${FUNCNAME[2]:-NONE}@${BASH_LINENO[2]:-NONE})"
    # shellcheck disable=SC2086
    return $BL64_LIB_ERROR_EXPORT_EMPTY
  fi
  return 0
}

#######################################
# Check that the given path is relative
#
# * String check only
# * Path is not tested for existance
#
# Arguments:
#   $1: Path string
#   $2: Failed check error message. Default: _BL64_CHECK_TXT_PATH_NOT_RELATIVE
# Outputs:
#   STDOUT: None
#   STDERR: Error message
# Returns:
#   0: Check ok
#   $BL64_LIB_ERROR_PARAMETER_MISSING
#   $BL64_LIB_ERROR_PATH_NOT_RELATIVE
#######################################
function bl64_check_path_relative() {
  bl64_dbg_lib_check_enabled && bl64_dbg_lib_show_function "$@"
  local path="${1:-}"
  local message="${2:-${_BL64_CHECK_TXT_PATH_NOT_RELATIVE}}"

  bl64_check_parameter 'path' || return $?
  if [[ "$path" == '/' || "$path" == /* ]]; then
    bl64_msg_show_error "${_BL64_CHECK_TXT_PATH_NOT_RELATIVE} (${_BL64_CHECK_TXT_PATH}: ${path} ${BL64_MSG_COSMETIC_PIPE} ${_BL64_CHECK_TXT_FUNCTION}: ${FUNCNAME[1]:-NONE}@${BASH_LINENO[1]:-NONE}.${FUNCNAME[2]:-NONE}@${BASH_LINENO[2]:-NONE})"
    # shellcheck disable=SC2086
    return $BL64_LIB_ERROR_PATH_NOT_RELATIVE
  fi
  return 0
}

#######################################
# Check that the given path is not present
#
# * The target must can be of any type
#
# Arguments:
#   $1: Full path
#   $2: Failed check error message. Default: _BL64_CHECK_TXT_PATH_PRESENT
# Outputs:
#   STDOUT: None
#   STDERR: Error message
# Returns:
#   0: Check ok
#   $BL64_LIB_ERROR_PARAMETER_MISSING
#   $BL64_LIB_ERROR_PATH_PRESENT
#######################################
function bl64_check_path_not_present() {
  bl64_dbg_lib_check_enabled && bl64_dbg_lib_show_function "$@"
  local path="${1:-}"
  local message="${2:-${_BL64_CHECK_TXT_PATH_PRESENT}}"

  bl64_check_parameter 'path' || return $?
  if [[ -e "$path" ]]; then
    bl64_msg_show_error "${_BL64_CHECK_TXT_PATH_PRESENT} (${_BL64_CHECK_TXT_PATH}: ${path} ${BL64_MSG_COSMETIC_PIPE} ${_BL64_CHECK_TXT_FUNCTION}: ${FUNCNAME[1]:-NONE}@${BASH_LINENO[1]:-NONE}.${FUNCNAME[2]:-NONE}@${BASH_LINENO[2]:-NONE})"
    # shellcheck disable=SC2086
    return $BL64_LIB_ERROR_PATH_PRESENT
  fi
  return 0
}

#######################################
# Check that the given path is absolute
#
# * String check only
# * Path is not tested for existance
#
# Arguments:
#   $1: Path string
#   $2: Failed check error message. Default: _BL64_CHECK_TXT_PATH_NOT_ABSOLUTE
# Outputs:
#   STDOUT: None
#   STDERR: Error message
# Returns:
#   0: Check ok
#   $BL64_LIB_ERROR_PARAMETER_MISSING
#   $BL64_LIB_ERROR_PATH_NOT_ABSOLUTE
#######################################
function bl64_check_path_absolute() {
  bl64_dbg_lib_check_enabled && bl64_dbg_lib_show_function "$@"
  local path="${1:-}"
  local message="${2:-${_BL64_CHECK_TXT_PATH_NOT_ABSOLUTE}}"

  bl64_check_parameter 'path' || return $?
  if [[ "$path" != '/' && "$path" != /* ]]; then
    bl64_msg_show_error "${_BL64_CHECK_TXT_PATH_NOT_ABSOLUTE} (${_BL64_CHECK_TXT_PATH}: ${path} ${BL64_MSG_COSMETIC_PIPE} ${_BL64_CHECK_TXT_FUNCTION}: ${FUNCNAME[1]:-NONE}@${BASH_LINENO[1]:-NONE}.${FUNCNAME[2]:-NONE}@${BASH_LINENO[2]:-NONE})"
    # shellcheck disable=SC2086
    return $BL64_LIB_ERROR_PATH_NOT_ABSOLUTE
  fi
  return 0
}

#######################################
# Check that the effective user running the current process is root
#
# Arguments:
#   None
# Outputs:
#   STDOUT: None
#   STDERR: Error message
# Returns:
#   0: check ok
#   $BL64_LIB_ERROR_PRIVILEGE_IS_ROOT
#######################################
function bl64_check_privilege_root() {
  bl64_dbg_lib_check_enabled && bl64_dbg_lib_show_function
  if [[ "$EUID" != '0' ]]; then
    bl64_msg_show_error "${_BL64_CHECK_TXT_PRIVILEGE_IS_NOT_ROOT} (current id: $EUID ${BL64_MSG_COSMETIC_PIPE} ${_BL64_CHECK_TXT_FUNCTION}: ${FUNCNAME[1]:-NONE}@${BASH_LINENO[1]:-NONE}.${FUNCNAME[2]:-NONE}@${BASH_LINENO[2]:-NONE})"
    # shellcheck disable=SC2086
    return $BL64_LIB_ERROR_PRIVILEGE_IS_NOT_ROOT
  fi
  return 0
}

#######################################
# Check that the effective user running the current process is not root
#
# Arguments:
#   None
# Outputs:
#   STDOUT: None
#   STDERR: Error message
# Returns:
#   0: check ok
#   $BL64_LIB_ERROR_PRIVILEGE_IS_NOT_ROOT
#######################################
function bl64_check_privilege_not_root() {
  bl64_dbg_lib_check_enabled && bl64_dbg_lib_show_function

  if [[ "$EUID" == '0' ]]; then
    bl64_msg_show_error "${_BL64_CHECK_TXT_PRIVILEGE_IS_ROOT} (${_BL64_CHECK_TXT_FUNCTION}: ${FUNCNAME[1]:-NONE}@${BASH_LINENO[1]:-NONE}.${FUNCNAME[2]:-NONE}@${BASH_LINENO[2]:-NONE})"
    # shellcheck disable=SC2086
    return $BL64_LIB_ERROR_PRIVILEGE_IS_ROOT
  fi
  return 0
}

#######################################
# Check file/dir overwrite condition and fail if not meet
#
# * Use for tasks that needs to ensure that previous content will not overwriten unless requested
# * Target path can be of any type
#
# Arguments:
#   $1: Full path to the object
#   $2: Overwrite flag. Must be ON(1) or OFF(0). Default: OFF
#   $3: Error message
# Outputs:
#   STDOUT: None
#   STDERR: Error message
# Returns:
#   0: no previous file/dir or overwrite is requested
#   $BL64_LIB_ERROR_PARAMETER_MISSING
#   $BL64_LIB_ERROR_OVERWRITE_NOT_PERMITED
#######################################
function bl64_check_overwrite() {
  bl64_dbg_lib_check_enabled && bl64_dbg_lib_show_function "$@"
  local path="${1:-}"
  local overwrite="${2:-$BL64_VAR_OFF}"
  local message="${3:-$_BL64_CHECK_TXT_OVERWRITE_NOT_PERMITED}"

  bl64_check_parameter 'path' || return $?

  if [[ "$overwrite" == "$BL64_VAR_OFF" || "$overwrite" == "$BL64_VAR_DEFAULT" ]]; then
    if [[ -e "$path" ]]; then
      bl64_msg_show_error "${message:-$_BL64_CHECK_TXT_OVERWRITE_NOT_PERMITED} (${_BL64_CHECK_TXT_PATH}: ${path} ${BL64_MSG_COSMETIC_PIPE} ${_BL64_CHECK_TXT_FUNCTION}: ${FUNCNAME[1]:-NONE}@${BASH_LINENO[1]:-NONE}.${FUNCNAME[2]:-NONE}@${BASH_LINENO[2]:-NONE})"
      return $BL64_LIB_ERROR_OVERWRITE_NOT_PERMITED
    fi
  fi

  return 0
}

#######################################
# Check file/dir overwrite condition and warn if not meet
#
# * Use for tasks that will do nothing if the target is already present
# * Warning: Caller is responsible for checking that path parameter is valid
# * Target path can be of any type
#
# Arguments:
#   $1: Full path to the object
#   $2: Overwrite flag. Must be ON(1) or OFF(0). Default: OFF
#   $3: Warning message
# Outputs:
#   STDOUT: None
#   STDERR: Error message
# Returns:
#   0: skip since previous file/dir is present
#   1: no previous file/dir present or overwrite is requested
#######################################
function bl64_check_overwrite_skip() {
  bl64_dbg_lib_check_enabled && bl64_dbg_lib_show_function "$@"
  local path="${1:-}"
  local overwrite="${2:-$BL64_VAR_OFF}"
  local message="${3:-}"

  bl64_check_parameter 'path'

  if [[ "$overwrite" == "$BL64_VAR_OFF" || "$overwrite" == "$BL64_VAR_DEFAULT" ]]; then
    if [[ -e "$path" ]]; then
      bl64_msg_show_warning "${message:-$_BL64_CHECK_TXT_OVERWRITE_SKIP_EXISTING} (${_BL64_CHECK_TXT_PATH}: ${path} ${BL64_MSG_COSMETIC_PIPE} ${_BL64_CHECK_TXT_FUNCTION}: ${FUNCNAME[1]:-NONE}@${BASH_LINENO[1]:-NONE}.${FUNCNAME[2]:-NONE}@${BASH_LINENO[2]:-NONE})"
      return 0
    fi
  fi

  return 1
}

#######################################
# Raise error: invalid parameter
#
# * Use to raise an error when the calling function has verified that the parameter is not valid
# * This is a generic enough message to capture most validation use cases when there is no specific bl64_check_*
# * Can be used as the default value (*) for the bash command "case" to capture invalid options
#
# Arguments:
#   $1: parameter name
#   $2: error message
# Outputs:
#   STDOUT: none
#   STDERR: message
# Returns:
#   BL64_LIB_ERROR_PARAMETER_INVALID
#######################################
# shellcheck disable=SC2120
function bl64_check_alert_parameter_invalid() {
  bl64_dbg_lib_check_enabled && bl64_dbg_lib_show_function "$@"
  local parameter="${1:-${BL64_VAR_DEFAULT}}"
  local message="${2:-${_BL64_CHECK_TXT_PARAMETER_INVALID}}"

  [[ "$parameter" == "$BL64_VAR_DEFAULT" ]] && parameter=''
  bl64_msg_show_error "${message} (${parameter:+${_BL64_CHECK_TXT_PARAMETER}: ${parameter} ${BL64_MSG_COSMETIC_PIPE} }${_BL64_CHECK_TXT_FUNCTION}: ${FUNCNAME[1]:-NONE}@${BASH_LINENO[1]:-NONE}.${FUNCNAME[2]:-NONE}@${BASH_LINENO[2]:-NONE})"
  return $BL64_LIB_ERROR_PARAMETER_INVALID
}

#######################################
# Raise unsupported platform error
#
# Arguments:
#   $1: extra error message. Added to the error detail between (). Default: none
# Outputs:
#   STDOUT: none
#   STDERR: message
# Returns:
#   BL64_LIB_ERROR_OS_INCOMPATIBLE
#######################################
function bl64_check_alert_unsupported() {
  bl64_dbg_lib_check_enabled && bl64_dbg_lib_show_function "$@"
  local extra="${1:-}"

  bl64_msg_show_error "${_BL64_CHECK_TXT_INCOMPATIBLE} (${extra:+${extra} ${BL64_MSG_COSMETIC_PIPE} }os: ${BL64_OS_DISTRO} ${BL64_MSG_COSMETIC_PIPE} ${_BL64_CHECK_TXT_FUNCTION}: ${FUNCNAME[1]:-NONE}@${BASH_LINENO[1]:-NONE}.${FUNCNAME[2]:-NONE}@${BASH_LINENO[2]:-NONE})"
  return $BL64_LIB_ERROR_OS_INCOMPATIBLE
}

#######################################
# Check that the compatibility mode is enabled to support untested command
#
# * If enabled, show a warning and continue OK
# * If not enabled, fail
#
# Arguments:
#   $1: extra error message. Added to the error detail between (). Default: none
# Outputs:
#   STDOUT: none
#   STDERR: message
# Returns:
#   0: using compatibility mode
#   >0: command is incompatible and compatibility mode is disabled
#######################################
function bl64_check_compatibility_mode() {
  bl64_dbg_lib_check_enabled && bl64_dbg_lib_show_function "$@"
  local extra="${1:-}"

  if bl64_lib_mode_compability_is_enabled; then
    bl64_msg_show_warning "${_BL64_CHECK_TXT_COMPATIBILITY_MODE} (${extra:+${extra} ${BL64_MSG_COSMETIC_PIPE} }os: ${BL64_OS_DISTRO} ${BL64_MSG_COSMETIC_PIPE} ${_BL64_CHECK_TXT_FUNCTION}: ${FUNCNAME[1]:-NONE}@${BASH_LINENO[1]:-NONE}.${FUNCNAME[2]:-NONE}@${BASH_LINENO[2]:-NONE})"
  else
    bl64_check_alert_unsupported "$extra"
    return $?
  fi
}

#######################################
# Raise resource not detected error
#
# * Generic error used when a required external resource is not found on the system
# * Common use case: module setup looking for command in known locations
#
# Arguments:
#   $1: resource name. Default: none
# Outputs:
#   STDOUT: none
#   STDERR: message
# Returns:
#   BL64_LIB_ERROR_APP_MISSING
#######################################
function bl64_check_alert_resource_not_found() {
  bl64_dbg_lib_check_enabled && bl64_dbg_lib_show_function "$@"
  local resource="${1:-}"

  bl64_msg_show_error "${_BL64_CHECK_TXT_RESOURCE_NOT_FOUND} (${resource:+resource: ${resource} ${BL64_MSG_COSMETIC_PIPE} }os: ${BL64_OS_DISTRO} ${BL64_MSG_COSMETIC_PIPE} ${_BL64_CHECK_TXT_FUNCTION}: ${FUNCNAME[1]:-NONE}@${BASH_LINENO[1]:-NONE}.${FUNCNAME[2]:-NONE}@${BASH_LINENO[2]:-NONE})"
  return $BL64_LIB_ERROR_APP_MISSING
}

#######################################
# Raise undefined command error
#
# * Commonly used in the default branch of case statements to catch undefined options
#
# Arguments:
#   $1: command
# Outputs:
#   STDOUT: none
#   STDERR: message
# Returns:
#   BL64_LIB_ERROR_TASK_UNDEFINED
#######################################
# shellcheck disable=SC2119,SC2120
function bl64_check_alert_undefined() {
  bl64_dbg_lib_check_enabled && bl64_dbg_lib_show_function "$@"
  local target="${1:-}"

  bl64_msg_show_error "${_BL64_CHECK_TXT_UNDEFINED} (${_BL64_CHECK_TXT_FUNCTION}: ${FUNCNAME[1]:-NONE}@${BASH_LINENO[1]:-NONE}.${FUNCNAME[2]:-NONE}@${BASH_LINENO[2]:-NONE}${target:+ ${BL64_MSG_COSMETIC_PIPE} command: ${target}})"
  return $BL64_LIB_ERROR_TASK_UNDEFINED
}

#######################################
# Raise module setup error
#
# * Helper to check if the module was correctly setup and raise error if not
# * Use as last function of bl64_*_setup
# * Will take the last exit status
#
# Arguments:
#   $1: bashlib64 module alias
# Outputs:
#   STDOUT: none
#   STDERR: message
# Returns:
#   $status
#######################################
function bl64_check_alert_module_setup() {
  local -i last_status=$? # must be first line to catch $?
  bl64_dbg_lib_check_enabled && bl64_dbg_lib_show_function "$@"
  local module="${1:-}"

  bl64_check_parameter 'module' || return $?

  if [[ "$last_status" != '0' ]]; then
    bl64_msg_show_error "${_BL64_CHECK_TXT_MODULE_SETUP_FAILED} (${_BL64_CHECK_TXT_MODULE}: ${module} ${BL64_MSG_COSMETIC_PIPE} ${_BL64_CHECK_TXT_FUNCTION}: ${FUNCNAME[1]:-NONE}@${BASH_LINENO[1]:-NONE}.${FUNCNAME[2]:-NONE}@${BASH_LINENO[2]:-NONE})"
    return $last_status
  else
    return 0
  fi
}

#######################################
# Check that at least 1 parameter is passed when using dynamic arguments
#
# Arguments:
#   $1: must be $# to capture number of parameters from the calling function
#   $2: error message
# Outputs:
#   STDOUT: none
#   STDERR: message
# Returns:
#   0: check ok
#   BL64_LIB_ERROR_TASK_UNDEFINED
#######################################
function bl64_check_parameters_none() {
  bl64_dbg_lib_check_enabled && bl64_dbg_lib_show_function "$@"
  local count="$1"
  local message="${2:-${_BL64_CHECK_TXT_NOARGS}}"

  bl64_check_parameter 'count' || return $?

  if [[ "$count" == '0' ]]; then
    bl64_msg_show_error "${message} (${_BL64_CHECK_TXT_FUNCTION}: ${FUNCNAME[1]:-NONE}@${BASH_LINENO[1]:-NONE}.${FUNCNAME[2]:-NONE}@${BASH_LINENO[2]:-NONE})"
    return $BL64_LIB_ERROR_PARAMETER_MISSING
  else
    return 0
  fi
}

#######################################
# Check that the module is loaded and has been setup
#
# * Use in functions that depends on module resources being present before execution
#
# Arguments:
#   $1: module id (eg: BL64_XXXX_MODULE)
# Outputs:
#   STDOUT: none
#   STDERR: message
# Returns:
#   0: check ok
#   BL64_LIB_ERROR_MODULE_SETUP_MISSING
#######################################
function bl64_check_module() {
  bl64_dbg_lib_check_enabled && bl64_dbg_lib_show_function "$@"
  local module="${1:-}"
  local setup_status=''

  bl64_check_parameter 'module' &&
    bl64_lib_module_imported "$module" ||
    return $?

  setup_status="${!module}"
  if [[ "$setup_status" == "$BL64_VAR_OFF" ]]; then
    bl64_msg_show_error "${_BL64_CHECK_TXT_MODULE_NOT_SETUP} (${_BL64_CHECK_TXT_MODULE}: ${module} ${BL64_MSG_COSMETIC_PIPE} ${_BL64_CHECK_TXT_FUNCTION}: ${FUNCNAME[1]:-NONE}@${BASH_LINENO[1]:-NONE}.${FUNCNAME[2]:-NONE}@${BASH_LINENO[2]:-NONE})"
    return $BL64_LIB_ERROR_MODULE_SETUP_MISSING
  fi

  return 0
}

#######################################
# Check exit status
#
# * Helper to check for exit status of the last executed command and show error if failed
# * Return the same status as the latest command. This is to facilitate chaining with && return $? or be the last command of the function
#
# Arguments:
#   $1: exit status
#   $2: error message
# Outputs:
#   STDOUT: none
#   STDERR: message
# Returns:
#   $status
#######################################
function bl64_check_status() {
  bl64_dbg_lib_check_enabled && bl64_dbg_lib_show_function "$@"
  local status="${1:-}"
  local message="${2:-${_BL64_CHECK_TXT_STATUS_ERROR}}"

  bl64_check_parameter 'status' || return $?

  if [[ "$status" != '0' ]]; then
    bl64_msg_show_error "${message} (status: ${status} ${BL64_MSG_COSMETIC_PIPE} ${_BL64_CHECK_TXT_FUNCTION}: ${FUNCNAME[1]:-NONE}@${BASH_LINENO[1]:-NONE}.${FUNCNAME[2]:-NONE}@${BASH_LINENO[2]:-NONE})"
    # shellcheck disable=SC2086
    return "$status"
  else
    return 0
  fi
}

#######################################
# Check that the HOME variable is present and the path is valid
#
# * HOME is the standard shell variable for current user's home
#
# Arguments:
#   None
# Outputs:
#   STDOUT: none
#   STDERR: message
# Returns:
#   0: home is valid
#   >0: home is not valid
#######################################
function bl64_check_home() {
  bl64_dbg_lib_check_enabled && bl64_dbg_lib_show_function

  bl64_check_export 'HOME' "$_BL64_CHECK_TXT_HOME_MISSING" &&
    bl64_check_directory "$HOME" "$_BL64_CHECK_TXT_HOME_DIR_MISSING"
}

#######################################
# Check and report if the command is available using the current search path
#
# * standar PATH variable is used for the search
# * aliases and built-in commands will always return true
# * if the command is in the search path, then bl64_check_command is used to ensure it can be used
#
# Arguments:
#   $1: command file name
#   $2: Not found error message. Default: _BL64_CHECK_TXT_COMMAND_NOT_IN_PATH
# Outputs:
#   STDOUT: None
#   STDERR: Error message
# Returns:
#   0: Command found
#   BL64_LIB_ERROR_FILE_NOT_FOUND
#######################################
function bl64_check_command_search_path() {
  bl64_dbg_lib_check_enabled && bl64_dbg_lib_show_function "$@"
  local file="${1:-}"
  local message="${2:-${_BL64_CHECK_TXT_COMMAND_NOT_IN_PATH}}"
  local full_path=''

  bl64_check_parameter 'file' || return $?

  full_path="$(type -p "${file}")"
  # shellcheck disable=SC2181
  if (($? != 0)); then
    bl64_msg_show_error "${message} (command: ${file} ${BL64_MSG_COSMETIC_PIPE} ${_BL64_CHECK_TXT_FUNCTION}: ${FUNCNAME[1]:-NONE}@${BASH_LINENO[1]:-NONE}.${FUNCNAME[2]:-NONE}@${BASH_LINENO[2]:-NONE})"
    # shellcheck disable=SC2086
    return $BL64_LIB_ERROR_FILE_NOT_FOUND
  fi

  bl64_check_command "$full_path"
}

#######################################
# BashLib64 / Module / Setup / Show shell debugging inlevelion
#######################################

#
# Debugging level status
#
function bl64_dbg_app_task_enabled { [[ "$BL64_DBG_TARGET" == "$BL64_DBG_TARGET_ALL" || "$BL64_DBG_TARGET" == "$BL64_DBG_TARGET_APP_TASK" || "$BL64_DBG_TARGET" == "$BL64_DBG_TARGET_APP_ALL" ]]; }
function bl64_dbg_lib_task_enabled { [[ "$BL64_DBG_TARGET" == "$BL64_DBG_TARGET_ALL" || "$BL64_DBG_TARGET" == "$BL64_DBG_TARGET_LIB_TASK" || "$BL64_DBG_TARGET" == "$BL64_DBG_TARGET_LIB_ALL" ]]; }
function bl64_dbg_app_command_enabled { [[ "$BL64_DBG_TARGET" == "$BL64_DBG_TARGET_ALL" || "$BL64_DBG_TARGET" == "$BL64_DBG_TARGET_APP_CMD" || "$BL64_DBG_TARGET" == "$BL64_DBG_TARGET_APP_ALL" ]]; }
function bl64_dbg_lib_command_enabled { [[ "$BL64_DBG_TARGET" == "$BL64_DBG_TARGET_ALL" || "$BL64_DBG_TARGET" == "$BL64_DBG_TARGET_LIB_CMD" || "$BL64_DBG_TARGET" == "$BL64_DBG_TARGET_LIB_ALL" ]]; }
function bl64_dbg_app_trace_enabled { [[ "$BL64_DBG_TARGET" == "$BL64_DBG_TARGET_ALL" || "$BL64_DBG_TARGET" == "$BL64_DBG_TARGET_APP_TRACE" || "$BL64_DBG_TARGET" == "$BL64_DBG_TARGET_APP_ALL" ]]; }
function bl64_dbg_lib_trace_enabled { [[ "$BL64_DBG_TARGET" == "$BL64_DBG_TARGET_ALL" || "$BL64_DBG_TARGET" == "$BL64_DBG_TARGET_LIB_TRACE" || "$BL64_DBG_TARGET" == "$BL64_DBG_TARGET_LIB_ALL" ]]; }
function bl64_dbg_app_custom_1_enabled { [[ "$BL64_DBG_TARGET" == "$BL64_DBG_TARGET_APP_CUSTOM_1" ]]; }
function bl64_dbg_app_custom_2_enabled { [[ "$BL64_DBG_TARGET" == "$BL64_DBG_TARGET_APP_CUSTOM_2" ]]; }
function bl64_dbg_app_custom_3_enabled { [[ "$BL64_DBG_TARGET" == "$BL64_DBG_TARGET_APP_CUSTOM_3" ]]; }
function bl64_dbg_lib_check_enabled { [[ "$BL64_DBG_EXCLUDE_CHECK" == "$BL64_VAR_OFF" ]]; }
function bl64_dbg_lib_log_enabled { [[ "$BL64_DBG_EXCLUDE_LOG" == "$BL64_VAR_OFF" ]]; }
function bl64_dbg_lib_msg_enabled { [[ "$BL64_DBG_EXCLUDE_MSG" == "$BL64_VAR_OFF" ]]; }

#
# Debugging level control
#
function bl64_dbg_all_disable { BL64_DBG_TARGET="$BL64_DBG_TARGET_NONE"; }
function bl64_dbg_all_enable { BL64_DBG_TARGET="$BL64_DBG_TARGET_ALL"; }
function bl64_dbg_app_enable { BL64_DBG_TARGET="$BL64_DBG_TARGET_APP_ALL"; }
function bl64_dbg_lib_enable { BL64_DBG_TARGET="$BL64_DBG_TARGET_LIB_ALL"; }
function bl64_dbg_app_task_enable { BL64_DBG_TARGET="$BL64_DBG_TARGET_APP_TASK"; }
function bl64_dbg_lib_task_enable { BL64_DBG_TARGET="$BL64_DBG_TARGET_LIB_TASK"; }
function bl64_dbg_app_command_enable { BL64_DBG_TARGET="$BL64_DBG_TARGET_APP_CMD"; }
function bl64_dbg_lib_command_enable { BL64_DBG_TARGET="$BL64_DBG_TARGET_LIB_CMD"; }
function bl64_dbg_app_trace_enable { BL64_DBG_TARGET="$BL64_DBG_TARGET_APP_TRACE"; }
function bl64_dbg_lib_trace_enable { BL64_DBG_TARGET="$BL64_DBG_TARGET_LIB_TRACE"; }
function bl64_dbg_app_custom_1_enable { BL64_DBG_TARGET="$BL64_DBG_TARGET_APP_CUSTOM_1"; }
function bl64_dbg_app_custom_2_enable { BL64_DBG_TARGET="$BL64_DBG_TARGET_APP_CUSTOM_2"; }
function bl64_dbg_app_custom_3_enable { BL64_DBG_TARGET="$BL64_DBG_TARGET_APP_CUSTOM_3"; }
function bl64_dbg_lib_check_enable { BL64_DBG_EXCLUDE_CHECK="$BL64_VAR_OFF"; }
function bl64_dbg_lib_log_enable { BL64_DBG_EXCLUDE_LOG="$BL64_VAR_OFF"; }
function bl64_dbg_lib_msg_enable { BL64_DBG_EXCLUDE_MSG="$BL64_VAR_OFF"; }

#######################################
# Setup the bashlib64 module
#
# * Warning: bootstrap function
# * Warning: keep this module independant (do not depend on other bl64 modules)
# * Debugging messages are disabled by default
#
# Arguments:
#   None
# Outputs:
#   STDOUT: None
#   STDERR: None
# Returns:
#   0: setup ok
#   >0: setup failed
#######################################
function bl64_dbg_setup() {
  [[ -z "$BL64_VERSION" ]] &&
    echo 'Error: bashlib64-module-core.bash should the last module to be sourced' &&
    return 21

  # shellcheck disable=SC2034
  bl64_dbg_all_disable &&
    BL64_DBG_MODULE="$BL64_VAR_ON"
}

#######################################
# Set debugging level
#
# Arguments:
#   $1: target level. One of BL64_DBG_TARGET_*
# Outputs:
#   STDOUT: None
#   STDERR: check error
# Returns:
#   0: set ok
#   BL64_LIB_ERROR_PARAMETER_INVALID
#######################################
function bl64_dbg_set_level() {
  local level="$1"
  case "$level" in
  "$BL64_DBG_TARGET_NONE") bl64_dbg_all_disable ;;
  "$BL64_DBG_TARGET_APP_TRACE") bl64_dbg_app_trace_enable ;;
  "$BL64_DBG_TARGET_APP_TASK") bl64_dbg_app_task_enable ;;
  "$BL64_DBG_TARGET_APP_CMD") bl64_dbg_app_command_enable ;;
  "$BL64_DBG_TARGET_APP_CUSTOM_1") bl64_dbg_app_custom_1_enable ;;
  "$BL64_DBG_TARGET_APP_CUSTOM_2") bl64_dbg_app_custom_2_enable ;;
  "$BL64_DBG_TARGET_APP_CUSTOM_3") bl64_dbg_app_custom_3_enable ;;
  "$BL64_DBG_TARGET_APP_ALL") bl64_dbg_app_enable ;;
  "$BL64_DBG_TARGET_LIB_TRACE") bl64_dbg_lib_trace_enable ;;
  "$BL64_DBG_TARGET_LIB_TASK") bl64_dbg_lib_task_enable ;;
  "$BL64_DBG_TARGET_LIB_CMD") bl64_dbg_lib_command_enable ;;
  "$BL64_DBG_TARGET_LIB_ALL") bl64_dbg_lib_enable ;;
  "$BL64_DBG_TARGET_ALL") bl64_dbg_all_enable ;;
  *)
    _bl64_dbg_show "[${FUNCNAME[1]:-NONE}] ${_BL64_DBG_TXT_WRONG_LEVEL} ${BL64_DBG_TARGET_ALL}|${BL64_DBG_TARGET_APP_ALL}|${BL64_DBG_TARGET_LIB_ALL}"
    return $BL64_LIB_ERROR_PARAMETER_INVALID
    ;;
  esac
}

#######################################
# BashLib64 / Module / Functions / Show shell debugging information
#######################################

# DEPRECATED
function bl64_dbg_app_show_variables() { bl64_msg_show_deprecated 'bl64_dbg_app_show_variables' 'bl64_dbg_app_show_globals'; bl64_dbg_app_show_globals "$@"; }
function bl64_dbg_lib_show_variables() { bl64_msg_show_deprecated 'bl64_dbg_lib_show_variables' 'bl64_dbg_lib_show_globals'; bl64_dbg_lib_show_globals "$@"; }

function _bl64_dbg_show() {
  local message="$1"

  printf '%s: %s\n' "$_BL64_DBG_TXT_DEBUG" "$message" >&2
}

#######################################
# Show runtime info
#
# * Saves the last exit status so the function will not disrupt the error flow
#
# Arguments:
#   None
# Outputs:
#   STDOUT: None
#   STDERR: runtime info
# Returns:
#   latest exit status (before function call)
#######################################
function bl64_dbg_runtime_show() {
  local -i last_status=$?
  local label="${_BL64_DBG_TXT_LABEL_BASH_RUNTIME}"
  bl64_dbg_app_command_enabled || return $last_status

  _bl64_dbg_show "${label} ${_BL64_DBG_TXT_BASH}: [${BASH}]"
  _bl64_dbg_show "${label} ${_BL64_DBG_TXT_BASHOPTS}: [${BASHOPTS:-NONE}]"
  _bl64_dbg_show "${label} ${_BL64_DBG_TXT_SHELLOPTS}: [${SHELLOPTS:-NONE}]"
  _bl64_dbg_show "${label} ${_BL64_DBG_TXT_BASH_VERSION}: [${BASH_VERSION}]"
  _bl64_dbg_show "${label} ${_BL64_DBG_TXT_OSTYPE}: [${OSTYPE:-NONE}]"
  _bl64_dbg_show "${label} ${_BL64_DBG_TXT_LC_ALL}: [${LC_ALL:-NONE}]"
  _bl64_dbg_show "${label} ${_BL64_DBG_TXT_HOSTNAME}: [${HOSTNAME:-EMPTY}]"
  _bl64_dbg_show "${label} ${_BL64_DBG_TXT_EUID}: [${EUID}]"
  _bl64_dbg_show "${label} ${_BL64_DBG_TXT_UID}: [${UID}]"
  _bl64_dbg_show "${label} ${_BL64_DBG_TXT_BASH_ARGV}: [${BASH_ARGV[*]:-NONE}]"
  _bl64_dbg_show "${label} ${_BL64_DBG_TXT_COMMAND}: [${BASH_COMMAND:-NONE}]"
  _bl64_dbg_show "${label} ${_BL64_DBG_TXT_STATUS}: [${last_status}]"

  bl64_dbg_runtime_show_paths
  bl64_dbg_runtime_show_callstack
  bl64_dbg_runtime_show_bashlib64

  # shellcheck disable=SC2248
  return $last_status
}

#######################################
# Show BashLib64 runtime information
#
# Arguments:
#   None
# Outputs:
#   STDOUT: None
#   STDERR: bl64 runtime info
# Returns:
#   latest exit status (before function call)
#######################################
function bl64_dbg_runtime_show_bashlib64() {
  local label="${_BL64_DBG_TXT_LABEL_BL64_RUNTIME}"
  bl64_dbg_app_task_enabled || bl64_dbg_lib_task_enabled || return 0
  _bl64_dbg_show "${label} BL64_SCRIPT_NAME: [${BL64_SCRIPT_NAME:-NOTSET}]"
  _bl64_dbg_show "${label} BL64_SCRIPT_SID: [${BL64_SCRIPT_SID:-NOTSET}]"
  _bl64_dbg_show "${label} BL64_SCRIPT_ID: [${BL64_SCRIPT_ID:-NOTSET}]"
}

#######################################
# Show runtime call stack
#
# * Show previous 3 functions from the current caller
#
# Arguments:
#   None
# Outputs:
#   STDOUT: None
#   STDERR: callstack
# Returns:
#   latest exit status (before function call)
#######################################
function bl64_dbg_runtime_show_callstack() {
  local label="${_BL64_DBG_TXT_LABEL_BASH_RUNTIME}"
  bl64_dbg_app_task_enabled || bl64_dbg_lib_task_enabled || return 0
  _bl64_dbg_show "${label} ${_BL64_DBG_TXT_CALLSTACK}(2): [${BASH_SOURCE[1]:-NONE}:${FUNCNAME[2]:-NONE}:${BASH_LINENO[2]:-0}]"
  _bl64_dbg_show "${label} ${_BL64_DBG_TXT_CALLSTACK}(3): [${BASH_SOURCE[2]:-NONE}:${FUNCNAME[3]:-NONE}:${BASH_LINENO[3]:-0}]"
  _bl64_dbg_show "${label} ${_BL64_DBG_TXT_CALLSTACK}(4): [${BASH_SOURCE[3]:-NONE}:${FUNCNAME[4]:-NONE}:${BASH_LINENO[4]:-0}]"
  _bl64_dbg_show "${label} ${_BL64_DBG_TXT_CALLSTACK}(5): [${BASH_SOURCE[4]:-NONE}:${FUNCNAME[5]:-NONE}:${BASH_LINENO[5]:-0}]"
}

#######################################
# Show runtime paths
#
# Arguments:
#   None
# Outputs:
#   STDOUT: None
#   STDERR: callstack
# Returns:
#   latest exit status (before function call)
#######################################
function bl64_dbg_runtime_show_paths() {
  local label="${_BL64_DBG_TXT_LABEL_BASH_RUNTIME}"
  bl64_dbg_app_task_enabled || bl64_dbg_lib_task_enabled || return 0
  _bl64_dbg_show "${label} ${_BL64_DBG_TXT_SCRIPT_PATH}: [${BL64_SCRIPT_PATH:-EMPTY}]"
  _bl64_dbg_show "${label} ${_BL64_DBG_TXT_HOME}: [${HOME:-EMPTY}]"
  _bl64_dbg_show "${label} ${_BL64_DBG_TXT_PATH}: [${PATH:-EMPTY}]"
  _bl64_dbg_show "${label} ${_BL64_DBG_TXT_CD_PWD}: [${PWD:-EMPTY}]"
  _bl64_dbg_show "${label} ${_BL64_DBG_TXT_CD_OLDPWD}: [${OLDPWD:-EMPTY}]"
  _bl64_dbg_show "${label} ${_BL64_DBG_TXT_PWD}: [$(pwd)]"
  _bl64_dbg_show "${label} ${_BL64_DBG_TXT_TMPDIR}: [${TMPDIR:-NONE}]"
}

#######################################
# Stop app  shell tracing
#
# * Saves the last exit status so the function will not disrupt the error flow
#
# Arguments:
#   None
# Outputs:
#   STDOUT: None
#   STDERR: None
# Returns:
#   exit status from previous command
#######################################
function bl64_dbg_app_trace_stop() {
  local -i state=$?
  bl64_dbg_app_trace_enabled || return $state
  set +x
  _bl64_dbg_show "${_BL64_DBG_TXT_LABEL_TRACE} (${#FUNCNAME[*]})[${FUNCNAME[1]:-NONE}] ${_BL64_DBG_TXT_FUNCTION_STOP}"
  return $state
}

#######################################
# Start app  shell tracing if target is in scope
#
# Arguments:
#   None
# Outputs:
#   STDOUT: Tracing
#   STDERR: Debug messages
# Returns:
#   0: always ok
#######################################
function bl64_dbg_app_trace_start() {
  bl64_dbg_app_trace_enabled || return 0
  _bl64_dbg_show "${_BL64_DBG_TXT_LABEL_TRACE} (${#FUNCNAME[*]})[${FUNCNAME[1]:-NONE}] ${_BL64_DBG_TXT_FUNCTION_START}"
  set -x
  return 0
}

#######################################
# Stop bashlib64 shell tracing
#
# * Saves the last exit status so the function will not disrupt the error flow
#
# Arguments:
#   None
# Outputs:
#   STDOUT: None
#   STDERR: None
# Returns:
#   Saved exit status
#######################################
function bl64_dbg_lib_trace_stop() {
  local -i state=$?
  bl64_dbg_lib_trace_enabled || return $state

  set +x
  _bl64_dbg_show "${_BL64_DBG_TXT_LABEL_TRACE} (${#FUNCNAME[*]})[${FUNCNAME[1]:-NONE}] ${_BL64_DBG_TXT_FUNCTION_STOP}"

  return $state
}

#######################################
# Start bashlib64 shell tracing if target is in scope
#
# Arguments:
#   None
# Outputs:
#   STDOUT: Tracing
#   STDERR: Debug messages
# Returns:
#   0: always ok
#######################################
function bl64_dbg_lib_trace_start() {
  bl64_dbg_lib_trace_enabled || return 0

  _bl64_dbg_show "${_BL64_DBG_TXT_LABEL_TRACE} (${#FUNCNAME[*]})[${FUNCNAME[1]:-NONE}] ${_BL64_DBG_TXT_FUNCTION_START}"
  set -x

  return 0
}

#######################################
# Show bashlib64 task level debugging information
#
# Arguments:
#   $1: message
# Outputs:
#   STDOUT: None
#   STDERR: Debug message
# Returns:
#   0: always ok
#######################################
function bl64_dbg_lib_show_info() {
  bl64_dbg_lib_task_enabled || return 0
  _bl64_dbg_show "${_BL64_DBG_TXT_LABEL_INFO} (${#FUNCNAME[*]})[${FUNCNAME[1]:-NONE}] ${_BL64_DBG_TXT_INFO}: ${*}"
  return 0
}

#######################################
# Show app task level debugging information
#
# Arguments:
#   $@: messages
# Outputs:
#   STDOUT: None
#   STDERR: Debug message
# Returns:
#   0: always ok
#######################################
function bl64_dbg_app_show_info() {
  bl64_dbg_app_task_enabled || return 0
  _bl64_dbg_show "${_BL64_DBG_TXT_LABEL_INFO} (${#FUNCNAME[*]})[${FUNCNAME[1]:-NONE}] ${_BL64_DBG_TXT_INFO}: ${*}"
  return 0
}

#######################################
# Show bashlib64 task level variable values
#
# Arguments:
#   $@: variable names
# Outputs:
#   STDOUT: None
#   STDERR: Debug message
# Returns:
#   0: always ok
#######################################
function bl64_dbg_lib_show_vars() {
  local variable=''
  bl64_dbg_lib_task_enabled || return 0

  for variable in "$@"; do
    eval "_bl64_dbg_show \"${_BL64_DBG_TXT_LABEL_INFO} (${#FUNCNAME[*]})[${FUNCNAME[1]:-NONE}] ${_BL64_DBG_TXT_SHELL_VAR}: [${variable}=\$${variable}]\""
  done

  return 0
}

#######################################
# Show app task level variable values
#
# Arguments:
#   $@: variable names
# Outputs:
#   STDOUT: None
#   STDERR: Debug message
# Returns:
#   0: always ok
#######################################
function bl64_dbg_app_show_vars() {
  local variable=''
  bl64_dbg_app_task_enabled || return 0

  for variable in "$@"; do
    eval "_bl64_dbg_show \"${_BL64_DBG_TXT_LABEL_INFO} (${#FUNCNAME[*]})[${FUNCNAME[1]:-NONE}] ${_BL64_DBG_TXT_SHELL_VAR}: [${variable}=\$${variable}]\""
  done

  return 0
}

#######################################
# Show bashlib64 function name and parameters
#
# Arguments:
#   $@: parameters
# Outputs:
#   STDOUT: None
#   STDERR: Debug message
# Returns:
#   0: always ok
#######################################
# shellcheck disable=SC2120
function bl64_dbg_lib_show_function() {
  bl64_dbg_lib_task_enabled || return 0
  _bl64_dbg_show "${_BL64_DBG_TXT_LABEL_FUNCTION} (${#FUNCNAME[*]})[${FUNCNAME[1]:-NONE}] ${_BL64_DBG_TXT_FUNCTION_LIB_RUN}: ${*}"
  return 0
}

#######################################
# Show app function name and parameters
#
# Arguments:
#   $@: parameters
# Outputs:
#   STDOUT: None
#   STDERR: Debug message
# Returns:
#   0: always ok
#######################################
# shellcheck disable=SC2120
function bl64_dbg_app_show_function() {
  bl64_dbg_app_task_enabled || return 0
  _bl64_dbg_show "${_BL64_DBG_TXT_LABEL_FUNCTION} (${#FUNCNAME[*]})[${FUNCNAME[1]:-NONE}] ${_BL64_DBG_TXT_FUNCTION_APP_RUN}: (${*})"
  return 0
}

#######################################
# Stop bashlib64 external command tracing
#
# * Saves the last exit status so the function will not disrupt the error flow
#
# Arguments:
#   None
# Outputs:
#   STDOUT: None
#   STDERR: None
# Returns:
#   Saved exit status
#######################################
function bl64_dbg_lib_command_trace_stop() {
  local -i state=$?
  bl64_dbg_lib_task_enabled || return $state

  set +x
  _bl64_dbg_show "${_BL64_DBG_TXT_LABEL_TRACE} (${#FUNCNAME[*]})[${FUNCNAME[1]:-NONE}] ${_BL64_DBG_TXT_FUNCTION_STOP}"

  return $state
}

#######################################
# Start bashlib64 external command tracing if target is in scope
#
# * Use in functions: bl64_*_run_*
#
# Arguments:
#   None
# Outputs:
#   STDOUT: Tracing
#   STDERR: Debug messages
# Returns:
#   0: always ok
#######################################
function bl64_dbg_lib_command_trace_start() {
  bl64_dbg_lib_task_enabled || return 0

  _bl64_dbg_show "${_BL64_DBG_TXT_LABEL_TRACE} (${#FUNCNAME[*]})[${FUNCNAME[1]:-NONE}] ${_BL64_DBG_TXT_FUNCTION_START}"
  set -x

  return 0
}

#######################################
# Show developer comments in bashlib64 functions
#
# Arguments:
#   $1: comments
# Outputs:
#   STDOUT: None
#   STDERR: Debug message
# Returns:
#   0: always ok
#######################################
function bl64_dbg_lib_show_comments() {
  bl64_dbg_lib_task_enabled || return 0
  _bl64_dbg_show "${_BL64_DBG_TXT_LABEL_INFO} (${#FUNCNAME[*]})[${FUNCNAME[1]:-NONE}] ${_BL64_DBG_TXT_COMMENTS}: ${*}"
  return 0
}

#######################################
# Show developer comments in app functions
#
# Arguments:
#   $@: comments
# Outputs:
#   STDOUT: None
#   STDERR: Debug message
# Returns:
#   0: always ok
#######################################
function bl64_dbg_app_show_comments() {
  bl64_dbg_app_task_enabled || return 0
  _bl64_dbg_show "${_BL64_DBG_TXT_LABEL_INFO} (${#FUNCNAME[*]})[${FUNCNAME[1]:-NONE}] ${_BL64_DBG_TXT_COMMENTS}: ${*}"
  return 0
}

#######################################
# Show non BL64 global variables and attributes
#
# Arguments:
#   None
# Outputs:
#   STDOUT: declare -p output
#   STDERR: None
# Returns:
#   0: always ok
#######################################
function bl64_dbg_app_show_globals() {
  bl64_dbg_app_task_enabled || return 0
  local filter='^declare .*BL64_.*=.*'

  IFS=$'\n'
  for variable in $(declare -p); do
    unset IFS
    [[ "$variable" =~ $filter || "$variable" =~ "declare -- filter=" ]] && continue
    _bl64_dbg_show "${_BL64_DBG_TXT_LABEL_BASH_VARIABLE} ${variable}"
  done
  return 0
}

#######################################
# Show BL64 global variables and attributes
#
# Arguments:
#   None
# Outputs:
#   STDOUT: declare -p output
#   STDERR: None
# Returns:
#   0: always ok
#######################################
function bl64_dbg_lib_show_globals() {
  bl64_dbg_lib_task_enabled || return 0
  local filter='^declare .*BL64_.*=.*'

  IFS=$'\n'
  for variable in $(declare -p); do
    unset IFS
    [[ ! "$variable" =~ $filter || "$variable" =~ "declare -- filter=" ]] && continue
    _bl64_dbg_show "${_BL64_DBG_TXT_LABEL_BASH_VARIABLE} ${variable}"
  done
  return 0
}

#######################################
# BashLib64 / Module / Setup / Write messages to logs
#######################################

#######################################
# Setup the bashlib64 module
#
# Arguments:
#   $1: log repository. Full path
#   $2: log target. Default: BL64_SCRIPT_ID
#   $2: level. One of BL64_LOG_CATEGORY_*
#   $3: format. One of BL64_LOG_FORMAT_*
# Outputs:
#   STDOUT: None
#   STDERR: None
# Returns:
#   0: setup ok
#   BL64_LIB_ERROR_MODULE_SETUP_INVALID
#   BL64_LIB_ERROR_MODULE_SETUP_INVALID
#######################################
function bl64_log_setup() {
  [[ -z "$BL64_VERSION" ]] &&
    echo 'Error: bashlib64-module-core.bash should the last module to be sourced' &&
    return 21
  bl64_dbg_lib_log_enabled && bl64_dbg_lib_show_function "$@"
  local repository="${1:-}"
  local target="${2:-${BL64_SCRIPT_ID}}"
  local level="${3:-${BL64_LOG_CATEGORY_NONE}}"
  local format="${4:-${BL64_LOG_FORMAT_CSV}}"

  [[ -z "$repository" ]] && return $BL64_LIB_ERROR_PARAMETER_MISSING

  # shellcheck disable=SC2034
  bl64_lib_module_imported 'BL64_DBG_MODULE' &&
    bl64_dbg_lib_show_function &&
    bl64_lib_module_imported 'BL64_CHECK_MODULE' &&
    bl64_log_set_repository "$repository" &&
    bl64_log_set_target "$target" &&
    bl64_log_set_level "$level" &&
    bl64_log_set_format "$format" &&
    BL64_LOG_MODULE="$BL64_VAR_ON"
  bl64_check_alert_module_setup 'log'
}

#######################################
# Set log repository
#
# * Create the repository directory
#
# Arguments:
#   $1: repository path
# Outputs:
#   STDOUT: None
#   STDERR: command stderr
# Returns:
#   0: set ok
#   >0: unable to set
#######################################
function bl64_log_set_repository() {
  bl64_dbg_lib_log_enabled && bl64_dbg_lib_show_function "$@"
  local repository="$1"

  if [[ ! -d "$repository" ]]; then
    "$BL64_FS_CMD_MKDIR" "$repository" &&
      "$BL64_FS_CMD_CHMOD" "$BL64_LOG_REPOSITORY_MODE" "$repository" ||
      return $BL64_LIB_ERROR_TASK_FAILED
  else
    [[ -w "$repository" ]] || return $BL64_LIB_ERROR_TASK_FAILED
  fi

  BL64_LOG_REPOSITORY="$repository"
  return 0
}

#######################################
# Set logging level
#
# Arguments:
#   $1: target level. One of BL64_LOG_CATEGORY_*
# Outputs:
#   STDOUT: None
#   STDERR: check error
# Returns:
#   0: set ok
#   >0: unable to set
#######################################
function bl64_log_set_level() {
  bl64_dbg_lib_log_enabled && bl64_dbg_lib_show_function "$@"
  local level="$1"

  case "$level" in
  "$BL64_LOG_CATEGORY_NONE") BL64_LOG_LEVEL="$BL64_LOG_CATEGORY_NONE" ;;
  "$BL64_LOG_CATEGORY_INFO") BL64_LOG_LEVEL="$BL64_LOG_CATEGORY_INFO" ;;
  "$BL64_LOG_CATEGORY_DEBUG") BL64_LOG_LEVEL="$BL64_LOG_CATEGORY_DEBUG" ;;
  "$BL64_LOG_CATEGORY_WARNING") BL64_LOG_LEVEL="$BL64_LOG_CATEGORY_WARNING" ;;
  "$BL64_LOG_CATEGORY_ERROR") BL64_LOG_LEVEL="$BL64_LOG_CATEGORY_ERROR" ;;
  *) return $BL64_LIB_ERROR_PARAMETER_INVALID ;;
  esac
}

#######################################
# Set log format
#
# Arguments:
#   $1: log format. One of BL64_LOG_FORMAT_*
# Outputs:
#   STDOUT: None
#   STDERR: commands stderr
# Returns:
#   0: set ok
#   >0: unable to set
#######################################
function bl64_log_set_format() {
  bl64_dbg_lib_log_enabled && bl64_dbg_lib_show_function "$@"
  local format="$1"

  case "$format" in
  "$BL64_LOG_FORMAT_CSV")
    BL64_LOG_FORMAT="$BL64_LOG_FORMAT_CSV"
    BL64_LOG_FS=':'
    ;;
  *) return $BL64_LIB_ERROR_PARAMETER_INVALID ;;
  esac
}

#######################################
# Set log target
#
# * Log target is the file where logs will be written to
# * File is created or appended in the log repository
#
# Arguments:
#   $1: log target. Format: file name
# Outputs:
#   STDOUT: None
#   STDERR: commands stderr
# Returns:
#   0: set ok
#   >0: unable to set
#######################################
function bl64_log_set_target() {
  bl64_dbg_lib_log_enabled && bl64_dbg_lib_show_function "$@"
  local target="$1"
  local destination="${BL64_LOG_REPOSITORY}/${target}"

  # Check if there is a new target to set
  [[ "$BL64_LOG_DESTINATION" == "$destination" ]] && return 0

  if [[ ! -w "$destination" ]]; then
    "$BL64_FS_CMD_TOUCH" "$destination" &&
      "$BL64_FS_CMD_CHMOD" "$BL64_LOG_TARGET_MODE" "$destination" ||
      return $BL64_LIB_ERROR_TASK_FAILED
  fi

  BL64_LOG_DESTINATION="$destination"
  return 0
}

#######################################
# Set runtime log target
#
# * Use to save output from commands using one file per execution
# * The target name is used as the directory for each execution
# * The target directory is created in the log repository
# * The calling script is responsible for redirecting the command's output to the target path BL64_LOG_RUNTIME
#
# Arguments:
#   $1: runtime log target. Format: directory name
# Outputs:
#   STDOUT: None
#   STDERR: commands stderr
# Returns:
#   0: set ok
#   >0: unable to set
#######################################
function bl64_log_set_runtime() {
  bl64_dbg_lib_log_enabled && bl64_dbg_lib_show_function "$@"
  local target="$1"
  local destination="${BL64_LOG_REPOSITORY}/${target}"
  local log=''

  # Check if there is a new target to set
  [[ "$BL64_LOG_RUNTIME" == "$destination" ]] && return 0

  if [[ ! -d "$destination" ]]; then
    "$BL64_FS_CMD_MKDIR" "$destination" &&
      "$BL64_FS_CMD_CHMOD" "$BL64_LOG_REPOSITORY_MODE" "$destination" ||
      return $BL64_LIB_ERROR_TASK_FAILED
  fi

  [[ ! -w "$destination" ]] && return $BL64_LIB_ERROR_TASK_FAILED

  log="$(printf '%(%FT%TZ%z)T' '-1')" &&
    BL64_LOG_RUNTIME="${destination}/${log}.log" ||
    return 0

  return 0
}

#######################################
# BashLib64 / Module / Functions / Write messages to logs
#######################################

#######################################
# Save a log record to the logs repository
#
# Arguments:
#   $1: name of the source that is generating the message
#   $2: log message category. Use any of $BL64_LOG_CATEGORY_*
#   $3: message
# Outputs:
#   STDOUT: None
#   STDERR: execution errors
# Returns:
#   0: log record successfully saved
#   >0: failed to save the log record
#   BL64_LIB_ERROR_MODULE_SETUP_MISSING
#   BL64_LIB_ERROR_MODULE_SETUP_INVALID
#######################################
function _bl64_log_register() {
  bl64_dbg_lib_log_enabled && bl64_dbg_lib_show_function "$@"
  local source="$1"
  local category="$2"
  local payload="$3"

  [[ "$BL64_LOG_MODULE" == "$BL64_VAR_OFF" ]] && return 0
  [[ -z "$source" || -z "$category" || -z "$payload" ]] && return $BL64_LIB_ERROR_PARAMETER_MISSING

  case "$BL64_LOG_FORMAT" in
  "$BL64_LOG_FORMAT_CSV")
    printf '%(%FT%TZ%z)T%s%s%s%s%s%s%s%s%s%s%s%s\n' \
      '-1' \
      "$BL64_LOG_FS" \
      "$BL64_SCRIPT_SID" \
      "$BL64_LOG_FS" \
      "$HOSTNAME" \
      "$BL64_LOG_FS" \
      "$BL64_SCRIPT_ID" \
      "$BL64_LOG_FS" \
      "${source}" \
      "$BL64_LOG_FS" \
      "$category" \
      "$BL64_LOG_FS" \
      "$payload" >>"$BL64_LOG_DESTINATION"
    ;;
  *) return $BL64_LIB_ERROR_MODULE_SETUP_INVALID ;;
  esac
}

#######################################
# Save a single log record of type 'info' to the logs repository.
#
# Arguments:
#   $1: name of the source that is generating the message
#   $2: message to be recorded
# Outputs:
#   STDOUT: message (when BL64_LOG_VERBOSE='1')
#   STDERR: execution errors
# Returns:
#   0: log record successfully saved
#   >0: failed to save the log record
#######################################
function bl64_log_info() {
  bl64_dbg_lib_log_enabled && bl64_dbg_lib_show_function "$@"
  local source="$1"
  local payload="$2"

  [[ "$BL64_LOG_LEVEL" == "$BL64_LOG_CATEGORY_NONE" ||
    "$BL64_LOG_LEVEL" == "$BL64_LOG_CATEGORY_ERROR" ||
    "$BL64_LOG_LEVEL" == "$BL64_LOG_CATEGORY_WARNING" ]] &&
    return 0

  _bl64_log_register \
    "$source" \
    "$BL64_LOG_CATEGORY_INFO" \
    "$payload"
}

#######################################
# Save a single log record of type 'error' to the logs repository.
#
# Arguments:
#   $1: name of the source that is generating the message
#   $2: message to be recorded
# Outputs:
#   STDOUT: None
#   STDERR: execution errors, message (when BL64_LOG_VERBOSE='1')
# Returns:
#   0: log record successfully saved
#   >0: failed to save the log record
#######################################
function bl64_log_error() {
  bl64_dbg_lib_log_enabled && bl64_dbg_lib_show_function "$@"
  local source="$1"
  local payload="$2"

  [[ "$BL64_LOG_LEVEL" == "$BL64_LOG_CATEGORY_NONE" ]] && return 0

  _bl64_log_register \
    "$source" \
    "$BL64_LOG_CATEGORY_ERROR" \
    "$payload"
}

#######################################
# Save a single log record of type 'warning' to the logs repository.
#
# Arguments:
#   $1: name of the source that is generating the message
#   $2: message to be recorded
# Outputs:
#   STDOUT: None
#   STDERR: execution errors, message (when BL64_LOG_VERBOSE='1')
# Returns:
#   0: log record successfully saved
#   >0: failed to save the log record
#######################################
function bl64_log_warning() {
  bl64_dbg_lib_log_enabled && bl64_dbg_lib_show_function "$@"
  local source="$1"
  local payload="$2"

  [[ "$BL64_LOG_LEVEL" == "$BL64_LOG_CATEGORY_NONE" ||
    "$BL64_LOG_LEVEL" == "$BL64_LOG_CATEGORY_ERROR" ]] &&
    return 0

  _bl64_log_register \
    "$source" \
    "$BL64_LOG_CATEGORY_WARNING" \
    "$payload"
}

#######################################
# BashLib64 / Module / Setup / Display messages
#######################################

#######################################
# Setup the bashlib64 module
#
# * Warning: bootstrap function
#
# Arguments:
#   None
# Outputs:
#   STDOUT: None
#   STDERR: None
# Returns:
#   0: setup ok
#   >0: setup failed
#######################################
function bl64_msg_setup() {
  [[ -z "$BL64_VERSION" ]] &&
    echo 'Error: bashlib64-module-core.bash should the last module to be sourced' &&
    return 21
  bl64_dbg_lib_msg_enabled && bl64_dbg_lib_show_function

  # shellcheck disable=SC2034
  bl64_lib_module_imported 'BL64_DBG_MODULE' &&
    bl64_dbg_lib_show_function &&
    bl64_lib_module_imported 'BL64_CHECK_MODULE' &&
    bl64_lib_module_imported 'BL64_LOG_MODULE' &&
    bl64_msg_set_output "$BL64_MSG_OUTPUT_ANSI" &&
    bl64_msg_app_enable_verbose &&
    BL64_MSG_MODULE="$BL64_VAR_ON"
  bl64_check_alert_module_setup 'msg'
}

#######################################
# Set verbosity level
#
# Arguments:
#   $1: target level. One of BL64_MSG_VERBOSE_*
# Outputs:
#   STDOUT: None
#   STDERR: check error
# Returns:
#   0: set ok
#   >0: unable to set
#######################################
function bl64_msg_set_level() {
  bl64_dbg_lib_msg_enabled && bl64_dbg_lib_show_function "$@"
  local level="$1"

  bl64_check_parameter 'level' || return $?

  case "$level" in
  "$BL64_MSG_VERBOSE_NONE")
    bl64_msg_all_disable_verbose
    ;;
  "$BL64_MSG_VERBOSE_APP")
    bl64_msg_app_enable_verbose
    ;;
  "$BL64_MSG_VERBOSE_LIB")
    bl64_msg_lib_enable_verbose
    ;;
  "$BL64_MSG_VERBOSE_ALL")
    bl64_msg_all_enable_verbose
    ;;
  *)
    bl64_check_alert_parameter_invalid 'BL64_MSG_VERBOSE' \
      "invalid value. Not one of: ${BL64_MSG_VERBOSE_NONE}|${BL64_MSG_VERBOSE_ALL}|${BL64_MSG_VERBOSE_APP}|${BL64_MSG_VERBOSE_LIB}"
    return $?
    ;;
  esac
}

#######################################
# Set message format
#
# Arguments:
#   $1: format. One of BL64_MSG_FORMAT_*
# Outputs:
#   STDOUT: None
#   STDERR: parameter error
# Returns:
#   0: successfull execution
#   BL64_LIB_ERROR_PARAMETER_INVALID
#######################################
function bl64_msg_set_format() {
  bl64_dbg_lib_msg_enabled && bl64_dbg_lib_show_function "$@"
  local format="$1"

  bl64_check_parameter 'format' || return $?

  case "$format" in
  "$BL64_MSG_FORMAT_PLAIN")
    BL64_MSG_FORMAT="$BL64_MSG_FORMAT_PLAIN"
    ;;
  "$BL64_MSG_FORMAT_HOST")
    BL64_MSG_FORMAT="$BL64_MSG_FORMAT_HOST"
    ;;
  "$BL64_MSG_FORMAT_TIME")
    BL64_MSG_FORMAT="$BL64_MSG_FORMAT_TIME"
    ;;
  "$BL64_MSG_FORMAT_CALLER")
    BL64_MSG_FORMAT="$BL64_MSG_FORMAT_CALLER"
    ;;
  "$BL64_MSG_FORMAT_FULL")
    BL64_MSG_FORMAT="$BL64_MSG_FORMAT_FULL"
    ;;
  *)
    bl64_check_alert_parameter_invalid 'BL64_MSG_FORMAT' \
      "invalid value. Not one of: ${BL64_MSG_FORMAT_PLAIN}|${BL64_MSG_FORMAT_HOST}|${BL64_MSG_FORMAT_TIME}|${BL64_MSG_FORMAT_CALLER}|${BL64_MSG_FORMAT_FULL}"
    return $?
    ;;
  esac
  bl64_dbg_lib_msg_enabled && bl64_dbg_lib_show_vars 'BL64_MSG_FORMAT'
  return 0
}

#######################################
# Set message display theme
#
# Arguments:
#   $1: theme name. One of BL64_MSG_THEME_ID_*
# Outputs:
#   STDOUT: None
#   STDERR: parameter error
# Returns:
#   0: successfull execution
#   BL64_LIB_ERROR_PARAMETER_INVALID
#######################################
function bl64_msg_set_theme() {
  bl64_dbg_lib_msg_enabled && bl64_dbg_lib_show_function "$@"
  local theme="$1"

  bl64_check_parameter 'theme' || return $?

  case "$theme" in
  "$BL64_MSG_THEME_ID_ASCII_STD")
    BL64_MSG_THEME='BL64_MSG_THEME_ASCII_STD'
    ;;
  "$BL64_MSG_THEME_ID_ANSI_STD")
    BL64_MSG_THEME='BL64_MSG_THEME_ANSI_STD'
    ;;
  *)
    bl64_check_alert_parameter_invalid 'BL64_MSG_THEME' \
      "invalid value. Not one of: ${BL64_MSG_THEME_ID_ASCII_STD}|${BL64_MSG_THEME_ID_ANSI_STD}"
    return $?
    ;;
  esac
  bl64_dbg_lib_msg_enabled && bl64_dbg_lib_show_vars 'BL64_MSG_THEME'
  return 0
}

#######################################
# Set message output type
#
# * Will also setup the theme
# * If no theme is provided then the STD is used (ansi or ascii)
#
# Arguments:
#   $1: output type. One of BL64_MSG_OUTPUT_*
#   $2: (optional) theme. Default: STD
# Outputs:
#   STDOUT: None
#   STDERR: parameter error
# Returns:
#   0: successfull execution
#   BL64_LIB_ERROR_PARAMETER_INVALID
#######################################
function bl64_msg_set_output() {
  bl64_dbg_lib_msg_enabled && bl64_dbg_lib_show_function "$@"
  local output="${1:-}"
  local theme="${2:-${BL64_VAR_DEFAULT}}"

  bl64_check_parameter 'output' || return $?

  case "$output" in
  "$BL64_MSG_OUTPUT_ASCII")
    [[ "$theme" == "$BL64_VAR_DEFAULT" ]] && theme="$BL64_MSG_THEME_ID_ASCII_STD"
    BL64_MSG_OUTPUT="$output"
    ;;
  "$BL64_MSG_OUTPUT_ANSI")
    [[ "$theme" == "$BL64_VAR_DEFAULT" ]] && theme="$BL64_MSG_THEME_ID_ANSI_STD"
    BL64_MSG_OUTPUT="$output"
    ;;
  *)
    bl64_check_alert_parameter_invalid 'BL64_MSG_OUTPUT' \
      "invalid value. Not one of: ${BL64_MSG_OUTPUT_ASCII}|${BL64_MSG_OUTPUT_ANSI}"
    return $?
    ;;
  esac
  bl64_dbg_lib_msg_enabled && bl64_dbg_lib_show_vars 'BL64_MSG_OUTPUT'
  bl64_msg_set_theme "$theme"
}

#
# Verbosity control
#

function bl64_msg_app_verbose_enabled {
  bl64_dbg_lib_msg_enabled && bl64_dbg_lib_show_function
  [[ "$BL64_MSG_VERBOSE" == "$BL64_MSG_VERBOSE_APP" || "$BL64_MSG_VERBOSE" == "$BL64_MSG_VERBOSE_ALL" ]]
}
function bl64_msg_lib_verbose_enabled {
  bl64_dbg_lib_msg_enabled && bl64_dbg_lib_show_function
  [[ "$BL64_MSG_VERBOSE" == "$BL64_MSG_VERBOSE_LIB" || "$BL64_MSG_VERBOSE" == "$BL64_MSG_VERBOSE_ALL" ]]
}

function bl64_msg_all_disable_verbose {
  bl64_dbg_lib_msg_enabled && bl64_dbg_lib_show_function
  BL64_MSG_VERBOSE="$BL64_MSG_VERBOSE_NONE"
}
function bl64_msg_all_enable_verbose {
  bl64_dbg_lib_msg_enabled && bl64_dbg_lib_show_function
  BL64_MSG_VERBOSE="$BL64_MSG_VERBOSE_ALL"
}
function bl64_msg_lib_enable_verbose {
  bl64_dbg_lib_msg_enabled && bl64_dbg_lib_show_function
  BL64_MSG_VERBOSE="$BL64_MSG_VERBOSE_LIB"
}
function bl64_msg_app_enable_verbose {
  bl64_dbg_lib_msg_enabled && bl64_dbg_lib_show_function
  BL64_MSG_VERBOSE="$BL64_MSG_VERBOSE_APP"
}

#######################################
# BashLib64 / Module / Functions / Display messages
#######################################

#######################################
# Display message helper
#
# Arguments:
#   $1: stetic attribute
#   $2: type of message
#   $2: message to show
# Outputs:
#   STDOUT: message
#   STDERR: message when type is error or warning
# Returns:
#   printf exit status
#   BL64_LIB_ERROR_MODULE_SETUP_INVALID
#######################################
function _bl64_msg_print() {
  bl64_dbg_lib_msg_enabled && bl64_dbg_lib_show_function "$@"
  local attribute="${1:-}"
  local type="${2:-}"
  local message="${3:-}"

  bl64_lib_module_is_setup 'BL64_MSG_MODULE' || return $?
  [[ -n "$attribute" && -n "$type" && -n "$message" ]] || return $BL64_LIB_ERROR_PARAMETER_MISSING

  case "$BL64_MSG_OUTPUT" in
  "$BL64_MSG_OUTPUT_ASCII") _bl64_msg_format_ascii "$attribute" "$type" "$message" ;;
  "$BL64_MSG_OUTPUT_ANSI") _bl64_msg_format_ansi "$attribute" "$type" "$message" ;;
  *) bl64_lib_alert_parameter_invalid 'BL64_MSG_OUTPUT' "$BL64_VAR_DEFAULT" "$BL64_MSG_OUTPUT" ;;
  esac
}

function _bl64_msg_format_ansi() {
  bl64_dbg_lib_msg_enabled && bl64_dbg_lib_show_function "$@"
  local attribute="${1:-}"
  local type="${2:-}"
  local message="${3:-}"
  local style=''
  local style_fmttime="${BL64_MSG_THEME}_FMTTIME"
  local style_fmthost="${BL64_MSG_THEME}_FMTHOST"
  local style_fmtcaller="${BL64_MSG_THEME}_FMTCALLER"
  local linefeed='\n'

  [[ -n "$attribute" && -n "$type" && -n "$message" ]] || return $BL64_LIB_ERROR_PARAMETER_MISSING
  style="${BL64_MSG_THEME}_${attribute}"
  [[ "$attribute" == "$BL64_MSG_TYPE_INPUT" ]] && linefeed=''

  case "$BL64_MSG_FORMAT" in
  "$BL64_MSG_FORMAT_PLAIN")
    printf "%b: %s${linefeed}" \
      "\e[${!style}m${type}\e[${BL64_MSG_ANSI_CHAR_NORMAL}m" \
      "$message"
    ;;
  "$BL64_MSG_FORMAT_HOST")
    printf "[%b] %b: %s${linefeed}" \
      "\e[${!style_fmthost}m${HOSTNAME}\e[${BL64_MSG_ANSI_CHAR_NORMAL}m" \
      "\e[${!style}m${type}\e[${BL64_MSG_ANSI_CHAR_NORMAL}m" \
      "$message"
    ;;
  "$BL64_MSG_FORMAT_TIME")
    printf "[%b] %b: %s${linefeed}" \
      "\e[${!style_fmttime}m$(printf '%(%d/%b/%Y-%H:%M:%S-UTC%z)T' '-1')\e[${BL64_MSG_ANSI_CHAR_NORMAL}m" \
      "\e[${!style}m${type}\e[${BL64_MSG_ANSI_CHAR_NORMAL}m" \
      "$message"
    ;;
  "$BL64_MSG_FORMAT_CALLER")
    printf "[%b] %b: %s${linefeed}" \
      "\e[${!style_fmtcaller}m${BL64_SCRIPT_ID}\e[${BL64_MSG_ANSI_CHAR_NORMAL}m" \
      "\e[${!style}m${type}\e[${BL64_MSG_ANSI_CHAR_NORMAL}m" \
      "$message"
    ;;
  "$BL64_MSG_FORMAT_FULL")
    printf "[%b] %b:%b | %b: %s${linefeed}" \
      "\e[${!style_fmttime}m$(printf '%(%d/%b/%Y-%H:%M:%S-UTC%z)T' '-1')\e[${BL64_MSG_ANSI_CHAR_NORMAL}m" \
      "\e[${!style_fmthost}m${HOSTNAME}\e[${BL64_MSG_ANSI_CHAR_NORMAL}m" \
      "\e[${!style_fmtcaller}m${BL64_SCRIPT_ID}\e[${BL64_MSG_ANSI_CHAR_NORMAL}m" \
      "\e[${!style}m${type}\e[${BL64_MSG_ANSI_CHAR_NORMAL}m" \
      "$message"
    ;;
  *) bl64_lib_alert_parameter_invalid 'BL64_MSG_FORMAT' "$BL64_VAR_DEFAULT" "$BL64_MSG_FORMAT" ;;
  esac
}

function _bl64_msg_format_ascii() {
  bl64_dbg_lib_msg_enabled && bl64_dbg_lib_show_function "$@"
  local attribute="${1:-}"
  local type="${2:-}"
  local message="${3:-}"
  local style=''
  local style_fmttime="${BL64_MSG_THEME}_FMTTIME"
  local style_fmthost="${BL64_MSG_THEME}_FMTHOST"
  local style_fmtcaller="${BL64_MSG_THEME}_FMTCALLER"
  local linefeed='\n'

  [[ -n "$attribute" && -n "$type" && -n "$message" ]] || return $BL64_LIB_ERROR_PARAMETER_MISSING
  style="${BL64_MSG_THEME}_${attribute}"
  [[ "$attribute" == "$BL64_MSG_TYPE_INPUT" ]] && linefeed=''

  case "$BL64_MSG_FORMAT" in
  "$BL64_MSG_FORMAT_PLAIN")
    printf "%s: %s${linefeed}" \
      "${!style} $type" \
      "$message"
    ;;
  "$BL64_MSG_FORMAT_HOST")
    printf "[%s] %s: %s${linefeed}" \
      "${HOSTNAME}" \
      "${!style} $type" \
      "$message"
    ;;
  "$BL64_MSG_FORMAT_TIME")
    printf "[%(%d/%b/%Y-%H:%M:%S-UTC%z)T] %s: %s${linefeed}" \
      '-1' \
      "${!style} $type" \
      "$message"
    ;;
  "$BL64_MSG_FORMAT_CALLER")
    printf "[%s] %s: %s${linefeed}" \
      "$BL64_SCRIPT_ID" \
      "${!style} $type" \
      "$message"
    ;;
  "$BL64_MSG_FORMAT_FULL")
    printf "[%(%d/%b/%Y-%H:%M:%S-UTC%z)T] %s:%s | %s: %s${linefeed}" \
      '-1' \
      "$HOSTNAME" \
      "$BL64_SCRIPT_ID" \
      "${!style} $type" \
      "$message"
    ;;
  *) bl64_lib_alert_parameter_invalid 'BL64_MSG_FORMAT' "$BL64_VAR_DEFAULT" "$BL64_MSG_FORMAT" ;;
  esac
}

#######################################
# Show script usage information
#
# Arguments:
#   $1: script command line. Include all required and optional components
#   $2: full script usage description
#   $3: list of script commands
#   $4: list of script flags
#   $5: list of script parameters
# Outputs:
#   STDOUT: usage info
#   STDERR: None
# Returns:
#   0: successfull execution
#   >0: printf error
#######################################
function bl64_msg_show_usage() {
  bl64_dbg_lib_msg_enabled && bl64_dbg_lib_show_function "$@"
  local usage="${1:-${BL64_VAR_NULL}}"
  local description="${2:-${BL64_VAR_DEFAULT}}"
  local commands="${3:-${BL64_VAR_DEFAULT}}"
  local flags="${4:-${BL64_VAR_DEFAULT}}"
  local parameters="${5:-${BL64_VAR_DEFAULT}}"

  bl64_check_parameter 'usage' || return $?

  printf '\n%s: %s %s\n\n' 'Usage' "$BL64_SCRIPT_ID" "$usage"

  if [[ "$description" != "$BL64_VAR_DEFAULT" ]]; then
    printf '%s\n\n' "$description"
  fi

  if [[ "$commands" != "$BL64_VAR_DEFAULT" ]]; then
    printf '%s\n%s\n' 'Commands' "$commands"
  fi

  if [[ "$flags" != "$BL64_VAR_DEFAULT" ]]; then
    printf '%s\n%s\n' 'Flags' "$flags"
  fi

  if [[ "$parameters" != "$BL64_VAR_DEFAULT" ]]; then
    printf '%s\n%s\n' 'Parameters' "$parameters"
  fi

  return 0
}

#######################################
# Display error message
#
# Arguments:
#   $1: error message
# Outputs:
#   STDOUT: none
#   STDERR: message
# Returns:
#   0: successfull execution
#   >0: printf error
#######################################
function bl64_msg_show_error() {
  bl64_dbg_lib_msg_enabled && bl64_dbg_lib_show_function "$@"
  local message="$1"

  bl64_log_error "${FUNCNAME[1]:-MAIN}" "$message" &&
    _bl64_msg_print "$BL64_MSG_TYPE_ERROR" 'Error' "$message" >&2
}

#######################################
# Display warning message
#
# Arguments:
#   $1: warning message
# Outputs:
#   STDOUT: none
#   STDERR: message
# Returns:
#   0: successfull execution
#   >0: printf error
#######################################
function bl64_msg_show_warning() {
  bl64_dbg_lib_msg_enabled && bl64_dbg_lib_show_function "$@"
  local message="$1"

  bl64_log_warning "${FUNCNAME[1]:-MAIN}" "$message" &&
    _bl64_msg_print "$BL64_MSG_TYPE_WARNING" 'Warning' "$message" >&2
}

#######################################
# Display script initialization message
#
# Arguments:
#   $1: message
# Outputs:
#   STDOUT: message
#   STDERR: None
# Returns:
#   0: successfull execution
#   >0: printf error
#######################################
function bl64_msg_show_init() {
  bl64_dbg_lib_msg_enabled && bl64_dbg_lib_show_function "$@"
  local message="$1"

  bl64_log_info "${FUNCNAME[1]:-MAIN}" "$message" &&
    bl64_msg_app_verbose_enabled || return 0

  _bl64_msg_print "$BL64_MSG_TYPE_INIT" 'Init' "$message"
}

#######################################
# Display info message
#
# Arguments:
#   $1: message
# Outputs:
#   STDOUT: message
#   STDERR: None
# Returns:
#   0: successfull execution
#   >0: printf error
#######################################
function bl64_msg_show_info() {
  bl64_dbg_lib_msg_enabled && bl64_dbg_lib_show_function "$@"
  local message="$1"

  bl64_log_info "${FUNCNAME[1]:-MAIN}" "$message" &&
    bl64_msg_app_verbose_enabled || return 0

  _bl64_msg_print "$BL64_MSG_TYPE_INFO" 'Info' "$message"
}

#######################################
# Display phase message
#
# Arguments:
#   $1: message
# Outputs:
#   STDOUT: message
#   STDERR: None
# Returns:
#   0: successfull execution
#   >0: printf error
#######################################
function bl64_msg_show_phase() {
  bl64_dbg_lib_msg_enabled && bl64_dbg_lib_show_function "$@"
  local message="$1"

  bl64_log_info "${FUNCNAME[1]:-MAIN}" "${BL64_MSG_TYPE_PHASE}:${message}" &&
    bl64_msg_app_verbose_enabled || return 0

  _bl64_msg_print "$BL64_MSG_TYPE_PHASE" 'Phase' "${BL64_MSG_COSMETIC_PHASE_PREFIX} ${message} ${BL64_MSG_COSMETIC_PHASE_SUFIX}"
}

#######################################
# Display task message
#
# Arguments:
#   $1: message
# Outputs:
#   STDOUT: message
#   STDERR: None
# Returns:
#   0: successfull execution
#   >0: printf error
#######################################
function bl64_msg_show_task() {
  bl64_dbg_lib_msg_enabled && bl64_dbg_lib_show_function "$@"
  local message="$1"

  bl64_log_info "${FUNCNAME[1]:-MAIN}" "${BL64_MSG_TYPE_TASK}:${message}" &&
    bl64_msg_app_verbose_enabled || return 0

  _bl64_msg_print "$BL64_MSG_TYPE_TASK" 'Task' "$message"
}

#######################################
# Display subtask message
#
# Arguments:
#   $1: message
# Outputs:
#   STDOUT: message
#   STDERR: None
# Returns:
#   0: successfull execution
#   >0: printf error
#######################################
function bl64_msg_show_subtask() {
  bl64_dbg_lib_msg_enabled && bl64_dbg_lib_show_function "$@"
  local message="$1"

  bl64_log_info "${FUNCNAME[1]:-MAIN}" "${BL64_MSG_TYPE_SUBTASK}:${message}" &&
    bl64_msg_app_verbose_enabled || return 0

  _bl64_msg_print "$BL64_MSG_TYPE_SUBTASK" 'Subtask' "${BL64_MSG_COSMETIC_ARROW2} ${message}"
}

#######################################
# Display task message for bash64lib functions
#
# Arguments:
#   $1: message
# Outputs:
#   STDOUT: message
#   STDERR: None
# Returns:
#   0: successfull execution
#   >0: printf error
#######################################
function bl64_msg_show_lib_task() {
  bl64_dbg_lib_msg_enabled && bl64_dbg_lib_show_function "$@"
  local message="$1"

  bl64_log_info "${FUNCNAME[1]:-MAIN}" "${BL64_MSG_TYPE_LIBTASK}:${message}" &&
    bl64_msg_lib_verbose_enabled || return 0

  _bl64_msg_print "$BL64_MSG_TYPE_LIBTASK" 'Task' "$message"
}

#######################################
# Display subtask message for bash64lib functions
#
# Arguments:
#   $1: message
# Outputs:
#   STDOUT: message
#   STDERR: None
# Returns:
#   0: successfull execution
#   >0: printf error
#######################################
function bl64_msg_show_lib_subtask() {
  bl64_dbg_lib_msg_enabled && bl64_dbg_lib_show_function "$@"
  local message="$1"

  bl64_log_info "${FUNCNAME[1]:-MAIN}" "${BL64_MSG_TYPE_LIBSUBTASK}:${message}" &&
    bl64_msg_app_verbose_enabled || return 0

  _bl64_msg_print "$BL64_MSG_TYPE_LIBSUBTASK" 'Subtask' "${BL64_MSG_COSMETIC_ARROW2} ${message}"
}

#######################################
# Display info message for bash64lib functions
#
# Arguments:
#   $1: message
# Outputs:
#   STDOUT: message
#   STDERR: None
# Returns:
#   0: successfull execution
#   >0: printf error
#######################################
function bl64_msg_show_lib_info() {
  bl64_dbg_lib_msg_enabled && bl64_dbg_lib_show_function "$@"
  local message="$1"

  bl64_log_info "${FUNCNAME[1]:-MAIN}" "${BL64_MSG_TYPE_LIBINFO}:${message}" &&
    bl64_msg_lib_verbose_enabled || return 0

  _bl64_msg_print "$BL64_MSG_TYPE_LIBINFO" 'Info' "$message"
}

#######################################
# Display message. Plain output, no extra info.
#
# Arguments:
#   $1: message
# Outputs:
#   STDOUT: message
#   STDERR: None
# Returns:
#   0: successfull execution
#   >0: printf error
#######################################
function bl64_msg_show_text() {
  bl64_dbg_lib_msg_enabled && bl64_dbg_lib_show_function "$@"
  local message="$1"

  bl64_log_info "${FUNCNAME[1]:-MAIN}" "$message" &&
    bl64_msg_app_verbose_enabled || return 0

  printf '%s\n' "$message"
}

#######################################
# Display batch process start message
#
# * Use in the main section of task oriented scripts to show start/end of batch process
#
# Arguments:
#   $2: batch short description
# Outputs:
#   STDOUT: message
#   STDERR: None
# Returns:
#   0: successfull execution
#   >0: printf error
#######################################
function bl64_msg_show_batch_start() {
  bl64_dbg_lib_msg_enabled && bl64_dbg_lib_show_function "$@"
  local message="$1"

  bl64_log_info "${FUNCNAME[1]:-MAIN}" "${BL64_MSG_TYPE_BATCH}:${message}" &&
    bl64_msg_app_verbose_enabled || return 0

  _bl64_msg_print "$BL64_MSG_TYPE_BATCH" 'Process' "[${message}] started"
}

#######################################
# Display batch process complete message
#
# * Use in the main section of task oriented scripts to show start/end of batch process
# * Can be used as last command in shell script to both show result and return exit status
#
# Arguments:
#   $1: process exit status
#   $2: batch short description
# Outputs:
#   STDOUT: message
#   STDERR: None
# Returns:
#   0: successfull execution
#   >0: printf error
#######################################
function bl64_msg_show_batch_finish() {
  local -i status=$1
  bl64_dbg_lib_msg_enabled && bl64_dbg_lib_show_function "$@"
  local message="${2-}"

  # shellcheck disable=SC2086
  bl64_log_info "${FUNCNAME[1]:-MAIN}" "${BL64_MSG_TYPE_BATCH}:${status}:${message}" &&
    bl64_msg_app_verbose_enabled ||
    return $status

  if ((status == 0)); then
    _bl64_msg_print "$BL64_MSG_TYPE_BATCHOK" 'Process' "[${message}] finished successfully"
  else
    _bl64_msg_print "$BL64_MSG_TYPE_BATCHERR" 'Process' "[${message}] finished with errors: exit-status-${status}"
  fi
  # shellcheck disable=SC2086
  return $status
}

#######################################
# Display user input message
#
# * Used exclusively by the io module to show messages for user input from stdin
#
# Arguments:
#   $1: message
# Outputs:
#   STDOUT: message
#   STDERR: None
# Returns:
#   0: successfull execution
#   >0: printf error
#######################################
function bl64_msg_show_input() {
  bl64_dbg_lib_msg_enabled && bl64_dbg_lib_show_function "$@"
  local message="$1"

  _bl64_msg_print "$BL64_MSG_TYPE_INPUT" 'Input' "$message"
}

#######################################
# Show separator line
#
# Arguments:
#   $1: Prefix string. Default: none
#   $2: character used to build the line. Default: =
#   $3: separator length (without prefix). Default: 60
# Outputs:
#   STDOUT: message
#   STDERR: None
# Returns:
#   0: successfull execution
#   >0: printf error
#######################################
function bl64_msg_show_separator() {
  bl64_dbg_lib_msg_enabled && bl64_dbg_lib_show_function "$@"
  local message="${1:-$BL64_VAR_DEFAULT}"
  local separator="${2:-$BL64_VAR_DEFAULT}"
  local length="${3:-$BL64_VAR_DEFAULT}"
  local -i counter=0
  local output=''

  [[ "$message" == "$BL64_VAR_DEFAULT" ]] && message=''
  [[ "$separator" == "$BL64_VAR_DEFAULT" ]] && separator='='
  [[ "$length" == "$BL64_VAR_DEFAULT" ]] && length=60

  output="$(
    while true; do
      counter=$((counter + 1))
      printf '%c' "$separator"
      ((counter == length)) && break
    done
  )"

  _bl64_msg_print "$BL64_MSG_TYPE_SEPARATOR" "$BL64_MSG_COSMETIC_ARROW3" "${message}${output}"
}

#######################################
# Display deprecation message
#
# Arguments:
#   $1: feature
#   $2: replacement
# Outputs:
#   STDOUT: none
#   STDERR: message
# Returns:
#   0: successfull execution
#   >0: printf error
#######################################
function bl64_msg_show_deprecated() {
  bl64_dbg_lib_msg_enabled && bl64_dbg_lib_show_function "$@"
  local feature="${1:-}"
  local replacement="${2:-non-available}"

  bl64_log_warning "${FUNCNAME[1]:-MAIN}" "deprecated: ${feature}" &&
    _bl64_msg_print "$BL64_MSG_TYPE_WARNING" 'Deprecated' "Feature to be removed from future versions: ${feature}. Replace with: ${replacement}" >&2
}

#######################################
# Display setup information
#
# Arguments:
#   $1: (optional) message
#   $@: variable names
# Outputs:
#   STDOUT: message
#   STDERR: None
# Returns:
#   0: successfull execution
#   >0: printf error
#######################################
function bl64_msg_show_setup() {
  bl64_dbg_lib_msg_enabled && bl64_dbg_lib_show_function "$@"
  local message="${1:-$BL64_VAR_DEFAULT}"
  local variable=''

  [[ "$message" == "$BL64_VAR_DEFAULT" ]] && message='Task to be executed with the following parameters'
  shift

  bl64_msg_show_info "$message"
  for variable in "$@"; do
    eval "bl64_msg_show_info \"${BL64_MSG_COSMETIC_TAB2}${variable}=\$${variable}\""
  done
}

#######################################
# BashLib64 / Module / Setup / OS / Identify OS attributes and provide command aliases
#######################################

#######################################
# Setup the bashlib64 module
#
# * Warning: bootstrap function
#
# Arguments:
#   None
# Outputs:
#   STDOUT: None
#   STDERR: None
# Returns:
#   0: setup ok
#   >0: setup failed
#######################################
function bl64_os_setup() {
  [[ -z "$BL64_VERSION" ]] &&
    echo 'Error: bashlib64-module-core.bash should the last module to be sourced' &&
    return 21

  [[ "${BASH_VERSINFO[0]}" != '4' && "${BASH_VERSINFO[0]}" != '5' ]] &&
    bl64_msg_show_error "BashLib64 is not supported in the current Bash version (${BASH_VERSINFO[0]})" &&
    return $BL64_LIB_ERROR_OS_BASH_VERSION

  # shellcheck disable=SC2034
  bl64_lib_module_imported 'BL64_CHECK_MODULE' &&
    bl64_lib_module_imported 'BL64_DBG_MODULE' &&
    bl64_dbg_lib_show_function &&
    bl64_lib_module_imported 'BL64_MSG_MODULE' &&
    _bl64_os_set_distro &&
    _bl64_os_set_runtime &&
    _bl64_os_set_command &&
    _bl64_os_set_options &&
    BL64_OS_MODULE="$BL64_VAR_ON"
  bl64_check_alert_module_setup 'os'
}

#######################################
# Identify and normalize common *nix OS commands
#
# * Commands are exported as variables with full path
# * Warning: bootstrap function
#
# Arguments:
#   None
# Outputs:
#   STDOUT: None
#   STDERR: None
# Returns:
#   0: always ok, even when the OS is not supported
#######################################
# Warning: bootstrap function
function _bl64_os_set_command() {
  # shellcheck disable=SC2034
  case "$BL64_OS_FLAVOR" in
  "$BL64_OS_FLAVOR_DEBIAN")
    BL64_OS_CMD_BASH='/bin/bash'
    BL64_OS_CMD_CAT='/bin/cat'
    BL64_OS_CMD_DATE='/bin/date'
    BL64_OS_CMD_FALSE='/bin/false'
    BL64_OS_CMD_HOSTNAME='/bin/hostname'
    BL64_OS_CMD_GETENT='/usr/bin/getent'
    BL64_OS_CMD_LOCALE='/usr/bin/locale'
    BL64_OS_CMD_SLEEP='/bin/sleep'
    BL64_OS_CMD_TEE='/usr/bin/tee'
    BL64_OS_CMD_TRUE='/bin/true'
    BL64_OS_CMD_UNAME='/bin/uname'
    ;;
  "$BL64_OS_FLAVOR_FEDORA" | "$BL64_OS_FLAVOR_REDHAT")
    BL64_OS_CMD_BASH='/bin/bash'
    BL64_OS_CMD_CAT='/usr/bin/cat'
    BL64_OS_CMD_DATE='/bin/date'
    BL64_OS_CMD_FALSE='/usr/bin/false'
    BL64_OS_CMD_HOSTNAME='/usr/bin/hostname'
    BL64_OS_CMD_GETENT='/usr/bin/getent'
    BL64_OS_CMD_LOCALE='/usr/bin/locale'
    BL64_OS_CMD_SLEEP='/usr/bin/sleep'
    BL64_OS_CMD_TEE='/usr/bin/tee'
    BL64_OS_CMD_TRUE='/usr/bin/true'
    BL64_OS_CMD_UNAME='/bin/uname'
    ;;
  "$BL64_OS_FLAVOR_SUSE")
    BL64_OS_CMD_BASH='/usr/bin/bash'
    BL64_OS_CMD_CAT='/usr/bin/cat'
    BL64_OS_CMD_DATE='/usr/bin/date'
    BL64_OS_CMD_FALSE='/usr/bin/false'
    BL64_OS_CMD_HOSTNAME='/usr/bin/hostname'
    BL64_OS_CMD_GETENT='/usr/bin/getent'
    BL64_OS_CMD_LOCALE='/usr/bin/locale'
    BL64_OS_CMD_SLEEP='/usr/bin/sleep'
    BL64_OS_CMD_TEE='/usr/bin/tee'
    BL64_OS_CMD_TRUE='/usr/bin/true'
    BL64_OS_CMD_UNAME='/usr/bin/uname'
    ;;
  "$BL64_OS_FLAVOR_ALPINE")
    BL64_OS_CMD_BASH='/bin/bash'
    BL64_OS_CMD_CAT='/bin/cat'
    BL64_OS_CMD_DATE='/bin/date'
    BL64_OS_CMD_FALSE='/bin/false'
    BL64_OS_CMD_HOSTNAME='/bin/hostname'
    BL64_OS_CMD_GETENT='/usr/bin/getent'
    BL64_OS_CMD_LOCALE='/usr/bin/locale'
    BL64_OS_CMD_SLEEP='/bin/sleep'
    BL64_OS_CMD_TEE='/usr/bin/tee'
    BL64_OS_CMD_TRUE='/bin/true'
    BL64_OS_CMD_UNAME='/bin/uname'
    ;;
  "$BL64_OS_FLAVOR_MACOS")
    # Homebrew used when no native option available
    BL64_OS_CMD_BASH='/opt/homebre/bin/bash'
    BL64_OS_CMD_CAT='/bin/cat'
    BL64_OS_CMD_DATE='/bin/date'
    BL64_OS_CMD_FALSE='/usr/bin/false'
    BL64_OS_CMD_HOSTNAME='/bin/hostname'
    BL64_OS_CMD_GETENT="$BL64_VAR_INCOMPATIBLE"
    BL64_OS_CMD_LOCALE='/usr/bin/locale'
    BL64_OS_CMD_SLEEP='/usr/bin/sleep'
    BL64_OS_CMD_TEE='/usr/bin/tee'
    BL64_OS_CMD_TRUE='/usr/bin/true'
    BL64_OS_CMD_UNAME='/usr/bin/uname'
    ;;
  *) bl64_check_alert_unsupported ;;
  esac
}

#######################################
# Create command sets for common options
#
# Arguments:
#   None
# Outputs:
#   STDOUT: None
#   STDERR: None
# Returns:
#   0: always ok
#######################################
function _bl64_os_set_options() {
  bl64_dbg_lib_show_function

  BL64_OS_SET_LOCALE_ALL='--all-locales'
}

#######################################
# Set runtime defaults
#
# Arguments:
#   None
# Outputs:
#   STDOUT: None
#   STDERR: None
# Returns:
#   0: always ok
#######################################
function _bl64_os_set_runtime() {
  bl64_dbg_lib_show_function

  # Reset language to modern specification of C locale
  if bl64_lib_lang_is_enabled; then
    # shellcheck disable=SC2034
    case "$BL64_OS_DISTRO" in
    ${BL64_OS_UB}-* | ${BL64_OS_DEB}-* | ${BL64_OS_KL}-*)
      bl64_os_set_lang 'C.UTF-8'
      ;;
    ${BL64_OS_FD}-* | ${BL64_OS_AMZ}-*)
      bl64_os_set_lang 'C.UTF-8'
      ;;
    ${BL64_OS_CNT}-7.* | ${BL64_OS_OL}-7.*)
      bl64_dbg_lib_show_comments 'UTF locale not installed by default, skipping'
      ;;
    ${BL64_OS_CNT}-* | ${BL64_OS_RHEL}-* | ${BL64_OS_ALM}-* | ${BL64_OS_OL}-8.* | ${BL64_OS_OL}-9.* | ${BL64_OS_RCK}-*)
      bl64_os_set_lang 'C.UTF-8'
      ;;
    ${BL64_OS_SLES}-*)
      bl64_os_set_lang 'C.UTF-8'
      ;;
    ${BL64_OS_ALP}-*)
      bl64_dbg_lib_show_comments 'UTF locale not installed by default, skipping'
      ;;
    ${BL64_OS_MCOS}-*)
      bl64_dbg_lib_show_comments 'UTF locale not installed by default, skipping'
      ;;
    *)
      bl64_check_alert_unsupported
      return $?
      ;;
    esac
  fi

  return 0
}

#######################################
# Set locale related shell variables
#
# * Locale variables are set as is, no extra validation on the locale availability
#
# Arguments:
#   $1: locale name
# Outputs:
#   STDOUT: None
#   STDERR: Validation errors
# Returns:
#   0: set ok
#   >0: set error
#######################################
function bl64_os_set_lang() {
  bl64_dbg_lib_show_function "$@"
  local locale="$1"

  bl64_check_parameter 'locale' || return $?

  LANG="$locale"
  LC_ALL="$locale"
  LANGUAGE="$locale"
  bl64_dbg_lib_show_vars 'LANG' 'LC_ALL' 'LANGUAGE'

  return 0
}

#######################################
# BashLib64 / Module / Functions / OS / Identify OS attributes and provide command aliases
#######################################

# DEPRECATED
function bl64_os_match() { bl64_msg_show_deprecated 'bl64_os_match' 'bl64_os_is_distro'; bl64_os_is_distro "$@"; }
function bl64_os_match_compatible() { bl64_msg_show_deprecated 'bl64_os_match_compatible' 'bl64_os_is_compatible'; bl64_os_is_compatible "$@"; }

function _bl64_os_match() {
  bl64_dbg_lib_show_function "$@"
  local check_compatibility="$1"
  local target="$2"
  local target_os=''
  local target_major=''
  local target_minor=''
  local current_major=''
  local current_minor=''

  if [[ "$target" == +([[:alpha:]])-+([[:digit:]]).+([[:digit:]]) ]]; then
    bl64_dbg_lib_show_info 'Analyze Pattern: match OS, Major and Minor'
    target_os="${target%%-*}"
    target_major="${target##*-}"
    target_minor="${target_major##*\.}"
    target_major="${target_major%%\.*}"
    current_major="${BL64_OS_DISTRO##*-}"
    current_minor="${current_major##*\.}"
    current_major="${current_major%%\.*}"
    bl64_dbg_lib_show_vars 'target_os' 'target_major' 'target_minor' 'current_major' 'current_minor'

    bl64_dbg_lib_show_info "[${BL64_OS_DISTRO}] == [${target_os}-${target_major}.${target_minor}]"
    if [[ "$BL64_OS_DISTRO" == ${target_os}-+([[:digit:]]).+([[:digit:]]) ]] &&
      ((current_major == target_major && current_minor == target_minor)); then
      :
    else
      if bl64_lib_flag_is_enabled "$check_compatibility" &&
        bl64_lib_mode_compability_is_enabled &&
        [[ "$BL64_OS_DISTRO" == ${target_os}-+([[:digit:]]).+([[:digit:]]) ]]; then
        return 1
      else
        return $BL64_LIB_ERROR_OS_NOT_MATCH
      fi
    fi

  elif [[ "$target" == +([[:alpha:]])-+([[:digit:]]) ]]; then
    bl64_dbg_lib_show_info 'Pattern: match OS and Major'
    target_os="${target%%-*}"
    target_major="${target##*-}"
    target_major="${target_major%%\.*}"
    current_major="${BL64_OS_DISTRO##*-}"
    current_major="${current_major%%\.*}"
    bl64_dbg_lib_show_vars 'target_os' 'target_major' 'current_major'

    bl64_dbg_lib_show_info "[${BL64_OS_DISTRO}] == [${target_os}-${target_major}]"
    if [[ "$BL64_OS_DISTRO" == ${target_os}-+([[:digit:]]).+([[:digit:]]) ]] &&
      ((current_major == target_major)); then
      :
    else
      if bl64_lib_flag_is_enabled "$check_compatibility" &&
        bl64_lib_mode_compability_is_enabled &&
        [[ "$BL64_OS_DISTRO" == ${target_os}-+([[:digit:]]).+([[:digit:]]) ]]; then
        return 1
      else
        return $BL64_LIB_ERROR_OS_NOT_MATCH
      fi
    fi

  elif [[ "$target" == +([[:alpha:]]) ]]; then
    bl64_dbg_lib_show_info 'Pattern: match OS ID'
    target_os="$target"

    bl64_dbg_lib_show_info "[${BL64_OS_DISTRO}] == [${target_os}]"
    [[ "$BL64_OS_DISTRO" == ${target_os}-+([[:digit:]]).+([[:digit:]]) ]] ||
      return $BL64_LIB_ERROR_OS_NOT_MATCH

  else
    bl64_msg_show_error "invalid OS pattern (${target})"
    return $BL64_LIB_ERROR_OS_TAG_INVALID
  fi

  return 0
}

#######################################
# Get normalized OS distro and version from uname
#
# * Warning: bootstrap function
# * Use only for OS that do not have /etc/os-release
# * Normalized data is stored in the global variable BL64_OS_DISTRO
#
# Arguments:
#   None
# Outputs:
#   STDOUT: None
#   STDERR: None
# Returns:
#   0: os match
#   >0: error or os not recognized
#######################################
function _bl64_os_get_distro_from_uname() {
  bl64_dbg_lib_show_function
  local os_type=''
  local os_version=''
  local cmd_sw_vers='/usr/bin/sw_vers'

  os_type="$(uname)"
  case "$os_type" in
  'Darwin')
    os_version="$("$cmd_sw_vers" -productVersion)"
    BL64_OS_DISTRO="DARWIN-${os_version}"
    BL64_OS_FLAVOR="$BL64_OS_FLAVOR_MACOS"
    ;;
  *)
    BL64_OS_DISTRO="$BL64_OS_UNK"
    bl64_msg_show_error \
      "BashLib64 not supported on the current OS. Please check the OS compatibility matrix for BashLib64 ($(uname -a))"
    return $BL64_LIB_ERROR_OS_INCOMPATIBLE
    ;;
  esac
  bl64_dbg_lib_show_vars 'BL64_OS_DISTRO'

  return 0
}

#######################################
# Get normalized OS distro and version from os-release
#
# * Warning: bootstrap function
# * Normalized data is stored in the global variable BL64_OS_DISTRO
# * Version is normalized to the format: OS_ID-V.S
#   * OS_ID: one of the OS standard tags
#   * V: Major version, number
#   * S: Minor version, number
#
# Arguments:
#   None
# Outputs:
#   STDOUT: None
#   STDERR: None
# Returns:
#   0: os match
#   >0: error or os not recognized
#######################################
function _bl64_os_get_distro_from_os_release() {
  bl64_dbg_lib_show_function
  local version_pattern_single='^[0-9]+$'
  local version_pattern_major_minor='^[0-9]+.[0-9]+$'
  local version_pattern_semver='^[0-9]+.[0-9]+.[0-9]+$'
  local version_normalized=''

  # shellcheck disable=SC1091
  bl64_dbg_lib_show_info 'parse /etc/os-release'
  if ! source '/etc/os-release' || [[ -z "$ID" || -z "$VERSION_ID" ]]; then
    bl64_msg_show_error 'failed to load OS information from /etc/os-release file'
    return $BL64_LIB_ERROR_TASK_FAILED
  fi
  bl64_dbg_lib_show_vars 'ID' 'VERSION_ID'

  bl64_dbg_lib_show_info 'normalize OS version to match X.Y'
  if [[ "$VERSION_ID" =~ $version_pattern_single ]]; then
    version_normalized="${VERSION_ID}.0"
  elif [[ "$VERSION_ID" =~ $version_pattern_major_minor ]]; then
    version_normalized="${VERSION_ID}"
  elif [[ "$VERSION_ID" =~ $version_pattern_semver ]]; then
    version_normalized="${VERSION_ID%.*}"
  else
    version_normalized="$VERSION_ID"
  fi
  if [[ "$version_normalized" != +([[:digit:]]).+([[:digit:]]) ]]; then
    bl64_msg_show_error "unable to normalize OS version (${VERSION_ID} != Major.Minor != ${version_normalized})"
    return $BL64_LIB_ERROR_TASK_FAILED
  fi

  bl64_dbg_lib_show_info 'set BL_OS_DISTRO'
  case "${ID^^}" in
  'ALMALINUX')
    BL64_OS_DISTRO="${BL64_OS_ALM}-${version_normalized}"
    BL64_OS_FLAVOR="$BL64_OS_FLAVOR_REDHAT"
    ;;
  'ALPINE')
    BL64_OS_DISTRO="${BL64_OS_ALP}-${version_normalized}"
    BL64_OS_FLAVOR="$BL64_OS_FLAVOR_ALPINE"
    ;;
  'AMZN')
    BL64_OS_DISTRO="${BL64_OS_AMZ}-${version_normalized}"
    BL64_OS_FLAVOR="$BL64_OS_FLAVOR_FEDORA"
    ;;
  'CENTOS')
    BL64_OS_DISTRO="${BL64_OS_CNT}-${version_normalized}"
    BL64_OS_FLAVOR="$BL64_OS_FLAVOR_REDHAT"
    ;;
  'DEBIAN')
    BL64_OS_DISTRO="${BL64_OS_DEB}-${version_normalized}"
    BL64_OS_FLAVOR="$BL64_OS_FLAVOR_DEBIAN"
    ;;
  'FEDORA')
    BL64_OS_DISTRO="${BL64_OS_FD}-${version_normalized}"
    BL64_OS_FLAVOR="$BL64_OS_FLAVOR_FEDORA"
    ;;
  'DARWIN')
    BL64_OS_DISTRO="${BL64_OS_MCOS}-${version_normalized}"
    BL64_OS_FLAVOR="$BL64_OS_FLAVOR_MACOS"
    ;;
  'KALI')
    BL64_OS_DISTRO="${BL64_OS_KL}-${version_normalized}"
    BL64_OS_FLAVOR="$BL64_OS_FLAVOR_DEBIAN"
    ;;
  'OL')
    BL64_OS_DISTRO="${BL64_OS_OL}-${version_normalized}"
    BL64_OS_FLAVOR="$BL64_OS_FLAVOR_REDHAT"
    ;;
  'ROCKY')
    BL64_OS_DISTRO="${BL64_OS_RCK}-${version_normalized}"
    BL64_OS_FLAVOR="$BL64_OS_FLAVOR_REDHAT"
    ;;
  'RHEL')
    BL64_OS_DISTRO="${BL64_OS_RHEL}-${version_normalized}"
    BL64_OS_FLAVOR="$BL64_OS_FLAVOR_REDHAT"
    ;;
  'SLES')
    BL64_OS_DISTRO="${BL64_OS_SLES}-${version_normalized}"
    BL64_OS_FLAVOR="$BL64_OS_FLAVOR_SUSE"
    ;;
  'UBUNTU')
    BL64_OS_DISTRO="${BL64_OS_UB}-${version_normalized}"
    BL64_OS_FLAVOR="$BL64_OS_FLAVOR_DEBIAN"
    ;;
  *)
    bl64_msg_show_error \
      "current OS is not supported. Please check the OS compatibility matrix for BashLib64 (ID=${ID:-NONE} | VERSION_ID=${VERSION_ID:-NONE})"
    return $BL64_LIB_ERROR_OS_INCOMPATIBLE
    ;;
  esac
  bl64_dbg_lib_show_vars 'BL64_OS_DISTRO' 'BL64_OS_FLAVOR'
  return 0
}

#######################################
# Compare the current OS against the provided flavor
#
# Arguments:
#   $1: flavor ID: BL64_OS_FLAVOR_*
# Outputs:
#   STDOUT: None
#   STDERR: None
# Returns:
#   0: flavor match
#   BL64_LIB_ERROR_OS_NOT_MATCH
#   BL64_LIB_ERROR_OS_TAG_INVALID
#######################################
function bl64_os_is_flavor() {
  bl64_dbg_lib_show_function "$@"
  local os_flavor="$1"

  bl64_check_module 'BL64_OS_MODULE' &&
    bl64_check_parameter 'os_flavor' ||
    return $?

  [[ "$BL64_OS_FLAVOR" == "$os_flavor" ]] && return 0
  return $BL64_LIB_ERROR_OS_NOT_MATCH
}

#######################################
# Compare the current OS version against a list of OS versions
#
# * There is a match if both distro and version are equal to any target on the list
#
# Arguments:
#   $@: each argument is an OS target. The list is any combintation of the formats: "$BL64_OS_<ALIAS>" "${BL64_OS_<ALIAS>}-V" "${BL64_OS_<ALIAS>}-V.S"
# Outputs:
#   STDOUT: None
#   STDERR: None
# Returns:
#   0: os match
#   BL64_LIB_ERROR_OS_NOT_MATCH
#   BL64_LIB_ERROR_OS_TAG_INVALID
#######################################
function bl64_os_is_distro() {
  bl64_dbg_lib_show_function "$@"
  local item=''
  local -i status=$BL64_LIB_ERROR_OS_NOT_MATCH

  bl64_check_module 'BL64_OS_MODULE' &&
    bl64_check_parameters_none $# ||
    return $?
  bl64_dbg_lib_show_info "Look for [BL64_OS_DISTRO=${BL64_OS_DISTRO}] in [OSList=${*}}]"
  # shellcheck disable=SC2086
  for item in "$@"; do
    _bl64_os_match "$BL64_VAR_OFF" "$item"
    status=$?
    ((status == 0)) && break
  done
  return $status
}

#######################################
# Compare the current OS version against a list of compatible OS versions
#
# * Compatibility is only verified if BL64_LIB_COMPATIBILITY == ON
# * The OS is considered compatible if there is a Distro match, regardles of the version
#
# Arguments:
#   $@: each argument is an OS target. The list is any combintation of the formats: "$BL64_OS_<ALIAS>" "${BL64_OS_<ALIAS>}-V" "${BL64_OS_<ALIAS>}-V.S"
# Outputs:
#   STDOUT: None
#   STDERR: None
# Returns:
#   0: os match
#   BL64_LIB_ERROR_OS_NOT_MATCH
#   BL64_LIB_ERROR_OS_TAG_INVALID
#######################################
function bl64_os_is_compatible() {
  bl64_dbg_lib_show_function "$@"
  local item=''
  local -i status=$BL64_LIB_ERROR_OS_NOT_MATCH

  bl64_check_module 'BL64_OS_MODULE' &&
    bl64_check_parameters_none $# ||
    return $?
  bl64_dbg_lib_show_info "Look for exact match [BL64_OS_DISTRO=${BL64_OS_DISTRO}] in [OSList=${*}}]"
  # shellcheck disable=SC2086
  for item in "$@"; do
    _bl64_os_match "$BL64_VAR_OFF" "$item"
    status=$?
    ((status == 0)) && break
  done
  if ((status != 0)); then
    bl64_dbg_lib_show_info "No exact match, look for compatibility"
    for item in "$@"; do
      _bl64_os_match "$BL64_VAR_ON" "$item"
      status=$?
      if ((status == 0)); then
        break
      elif ((status == 1)); then
        bl64_msg_show_warning \
          "current OS version is not supported. Execution will continue since compatibility-mode was requested. (current-os: ${BL64_OS_DISTRO} ${BL64_MSG_COSMETIC_PIPE} supported-os: ${*}) ${BL64_MSG_COSMETIC_PIPE} ${_BL64_CHECK_TXT_FUNCTION}: ${FUNCNAME[1]:-NONE}@${BASH_LINENO[1]:-NONE}.${FUNCNAME[2]:-NONE}@${BASH_LINENO[2]:-NONE})"
        status=0
        break
      fi
    done
  fi
  return $status
}

#######################################
# Identify and normalize Linux OS distribution name and version
#
# * Warning: bootstrap function
# * OS name format: OOO-V.V
#   * OOO: OS short name (tag)
#   * V.V: Version (Major, Minor)
#
# Arguments:
#   None
# Outputs:
#   STDOUT: None
#   STDERR: None
# Returns:
#   0: always ok, even when the OS is not supported
#######################################
# Warning: bootstrap function
function _bl64_os_set_distro() {
  bl64_dbg_lib_show_function
  if [[ -r '/etc/os-release' ]]; then
    _bl64_os_get_distro_from_os_release
  else
    _bl64_os_get_distro_from_uname
  fi
}

#######################################
# Determine if locale resources for language are installed in the OS
#
# Arguments:
#   $1: locale name
# Outputs:
#   STDOUT: None
#   STDERR: Validation errors
# Returns:
#   0: resources are installed
#   >0: no resources
#######################################
function bl64_os_lang_is_available() {
  bl64_dbg_lib_show_function "$@"
  local locale="$1"
  local line=''

  bl64_check_module 'BL64_OS_MODULE' &&
    bl64_check_parameter 'locale' &&
    bl64_check_command "$BL64_OS_CMD_LOCALE" ||
    return $?

  bl64_dbg_lib_show_info 'look for the requested locale using the locale command'
  IFS=$'\n'
  for line in $("$BL64_OS_CMD_LOCALE" "$BL64_OS_SET_LOCALE_ALL"); do
    unset IFS
    bl64_dbg_lib_show_info "checking [${line}] == [${locale}]"
    [[ "$line" == "$locale" ]] && return 0
  done

  return $BL64_LIB_ERROR_IS_NOT
}

#######################################
# Check the current OS version is in the supported list
#
# * Target use case is script compatibility. Use in the init part to halt execution if OS is not supported
# * Not recommended for checking individual functions. Instead, use if or case structures to support multiple values based on the OS version
# * The check is done against the provided list, exact match
# * Check is strict, ignores BL64_LIB_COMPATIBILITY global flag. If you need to check for compatibility, use bl64_os_check_compatibility() instead
# * This is a wrapper to the bl64_os_match so it can be used as a check function
#
# Arguments:
#   $@: list of OS versions to check against. Format: same as bl64_os_match
# Outputs:
#   STDOUT: None
#   STDERR: Error message
# Returns:
#   0: check ok
#   $BL64_LIB_ERROR_APP_INCOMPATIBLE
#######################################
function bl64_os_check_version() {
  bl64_dbg_lib_show_function "$@"

  bl64_os_match "$@" && return 0

  bl64_msg_show_error \
    "task not supported on the current OS version (current-os: ${BL64_OS_DISTRO} ${BL64_MSG_COSMETIC_PIPE} supported-os: ${*}) ${BL64_MSG_COSMETIC_PIPE} ${_BL64_CHECK_TXT_FUNCTION}: ${FUNCNAME[1]:-NONE}@${BASH_LINENO[1]:-NONE}.${FUNCNAME[2]:-NONE}@${BASH_LINENO[2]:-NONE})"
  return $BL64_LIB_ERROR_APP_INCOMPATIBLE
}

#######################################
# Check the current OS version is compatible against the supported list
#
# * Same as bl64_os_check_version() but obeys the global BL64_LIB_COMPATIBILITY flag
#
# Arguments:
#   $@: list of OS versions to check against. Format: same as bl64_os_match
# Outputs:
#   STDOUT: None
#   STDERR: Error message
# Returns:
#   0: check ok
#   $BL64_LIB_ERROR_APP_INCOMPATIBLE
#######################################
function bl64_os_check_compatibility() {
  bl64_dbg_lib_show_function "$@"

  bl64_os_is_compatible "$@" && return 0

  bl64_msg_show_error \
    "task not supported on the current OS version (current-os: ${BL64_OS_DISTRO} ${BL64_MSG_COSMETIC_PIPE} supported-os: ${*}) ${BL64_MSG_COSMETIC_PIPE} ${_BL64_CHECK_TXT_FUNCTION}: ${FUNCNAME[1]:-NONE}@${BASH_LINENO[1]:-NONE}.${FUNCNAME[2]:-NONE}@${BASH_LINENO[2]:-NONE})"
  return $BL64_LIB_ERROR_APP_INCOMPATIBLE
}

#######################################
# Command wrapper with verbose, debug and common options
#
# Arguments:
#   $@: arguments are passed as-is to the command
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_os_run_sleep() {
  bl64_dbg_lib_show_function "$@"

  bl64_check_parameters_none "$#" &&
    bl64_check_module 'BL64_OS_MODULE' ||
    return $?

  bl64_dbg_lib_trace_start
  # shellcheck disable=SC2086
  "$BL64_OS_CMD_SLEEP" "$@"
  bl64_dbg_lib_trace_stop
}

#######################################
# Command wrapper with verbose, debug and common options
#
# * Trust no one. Ignore inherited config and use explicit config
#
# Arguments:
#   $@: arguments are passed as-is to the command
# Outputs:
#   STDOUT: command output
#   STDERR: command stderr
# Returns:
#   0: operation completed ok
#   >0: operation failed
#######################################
function bl64_os_run_getent() {
  bl64_dbg_lib_show_function "$@"

  bl64_check_parameters_none "$#" &&
    bl64_check_module 'BL64_OS_MODULE' &&
    bl64_check_command "$BL64_OS_CMD_GETENT" ||
    return $?

  bl64_dbg_lib_trace_start
  # shellcheck disable=SC2086
  "$BL64_OS_CMD_GETENT" \
    "$@"
  bl64_dbg_lib_trace_stop
}

#
# Library Main
#

# Normalize locales to C until a better locale is found in bl64_os_setup
if bl64_lib_lang_is_enabled; then
  LANG='C'
  LC_ALL='C'
  LANGUAGE='C'
fi

# Set strict mode for enhanced security
if bl64_lib_mode_strict_is_enabled; then
  set -o 'nounset'
  set -o 'privileged'
fi

# Initialize optional modules that do not require setup parameters. Not OS bound
[[ -n "${BL64_DBG_MODULE:-}" ]] && { bl64_dbg_setup || exit $?; }
[[ -n "${BL64_CHECK_MODULE:-}" ]] && { bl64_check_setup || exit $?; }
[[ -n "${BL64_MSG_MODULE:-}" ]] && { bl64_msg_setup || exit $?; }
[[ -n "${BL64_BSH_MODULE:-}" ]] && { bl64_bsh_setup || exit $?; }
[[ -n "${BL64_RND_MODULE:-}" ]] && { bl64_rnd_setup || exit $?; }
[[ -n "${BL64_UI_MODULE:-}" ]] && { bl64_ui_setup || exit $?; }
# Initialize optional modules that do not require setup parameters. OS bound
[[ -n "${BL64_OS_MODULE:-}" ]] && { bl64_os_setup || exit $?; }
[[ -n "${BL64_TXT_MODULE:-}" ]] && { bl64_txt_setup || exit $?; }
[[ -n "${BL64_FMT_MODULE:-}" ]] && { bl64_fmt_setup || exit $?; }
[[ -n "${BL64_FS_MODULE:-}" ]] && { bl64_fs_setup || exit $?; }
[[ -n "${BL64_IAM_MODULE:-}" ]] && { bl64_iam_setup || exit $?; }
[[ -n "${BL64_RBAC_MODULE:-}" ]] && { bl64_rbac_setup || exit $?; }
[[ -n "${BL64_RXTX_MODULE:-}" ]] && { bl64_rxtx_setup || exit $?; }
[[ -n "${BL64_API_MODULE:-}" ]] && { bl64_api_setup || exit $?; }
[[ -n "${BL64_VCS_MODULE:-}" ]] && { bl64_vcs_setup || exit $?; }
[[ -n "${BL64_ARC_MODULE:-}" ]] && { bl64_arc_setup || exit $?; }
[[ -n "${BL64_PKG_MODULE:-}" ]] && { bl64_pkg_setup || exit $?; }
[[ -n "${BL64_RND_MODULE:-}" ]] && { bl64_rnd_setup || exit $?; }
[[ -n "${BL64_TM_MODULE:-}" ]] && { bl64_tm_setup || exit $?; }

# Set signal handlers
# shellcheck disable=SC2064
if bl64_lib_trap_is_enabled; then
  trap "$BL64_LIB_SIGNAL_HUP" 'SIGHUP'
  trap "$BL64_LIB_SIGNAL_STOP" 'SIGINT'
  trap "$BL64_LIB_SIGNAL_QUIT" 'SIGQUIT'
  trap "$BL64_LIB_SIGNAL_QUIT" 'SIGTERM'
  trap "$BL64_LIB_SIGNAL_DEBUG" 'DEBUG'
  trap "$BL64_LIB_SIGNAL_EXIT" 'EXIT'
  trap "$BL64_LIB_SIGNAL_ERR" 'ERR'
fi

# Set default umask
umask -S 'u=rwx,g=,o=' >/dev/null

bl64_lib_script_set_identity

# Check OS compatibility
if [[ "${BL64_OS_MODULE:-$BL64_VAR_OFF}" == "$BL64_VAR_ON" ]]; then
  bl64_os_check_compatibility \
    "${BL64_OS_ALM}-8" "${BL64_OS_ALM}-9" \
    "${BL64_OS_ALP}-3" \
    "${BL64_OS_AMZ}-2023" \
    "${BL64_OS_CNT}-7" "${BL64_OS_CNT}-8" "${BL64_OS_CNT}-9" \
    "${BL64_OS_DEB}-9" "${BL64_OS_DEB}-10" "${BL64_OS_DEB}-11" "${BL64_OS_DEB}-12" \
    "${BL64_OS_FD}-33" "${BL64_OS_FD}-34" "${BL64_OS_FD}-35" "${BL64_OS_FD}-36" "${BL64_OS_FD}-37" "${BL64_OS_FD}-38" "${BL64_OS_FD}-39" "${BL64_OS_FD}-40" \
    "${BL64_OS_KL}-2024" \
    "${BL64_OS_OL}-7" "${BL64_OS_OL}-8" "${BL64_OS_OL}-9" \
    "${BL64_OS_RCK}-8" "${BL64_OS_RCK}-9" \
    "${BL64_OS_RHEL}-8" "${BL64_OS_RHEL}-9" \
    "${BL64_OS_SLES}-15" \
    "${BL64_OS_UB}-18" "${BL64_OS_UB}-20" "${BL64_OS_UB}-21" "${BL64_OS_UB}-22" "${BL64_OS_UB}-23" "${BL64_OS_UB}-24" ||
    exit $?
fi

# Run as script or sourced library?
if bl64_lib_mode_command_is_enabled; then
  "$@"
else
  :
fi

#
###[ embedded-bashlib64-end ]#####################
#

#
# Globals
#

# Registry credentials
export CNTBUILD_REGISTRY="${CNTBUILD_REGISTRY:-}"
export CNTBUILD_REGISTRY_OWNER="${CNTBUILD_REGISTRY_OWNER:-}"

# Cosign binary
export CNTBUILD_COSIGN_BIN="${CNTBUILD_COSIGN_BIN:-/usr/local/bin/cosign}"

# GitHub CLI binary
export CNTBUILD_GHCLI_BIN="${CNTBUILD_GHCLI_BIN:-/usr/bin/gh}"

# Metadata filename
export CNTBUILD_METADATA_FILE='Metadata.label'

# Dockerfiles sources directory name
export CNTBUILD_DOCKERFILE_SOURCES='dockerfiles'

# Dockerfile name
export CNTBUILD_DOCKERFILE_NAME='Dockerfile'
#
# Functions
#

function cntbuild_list() {
  bl64_dbg_app_show_function "$@"
  local context="$1"
  local target=''

  bl64_check_parameter 'context' &&
    bl64_check_directory "${context}/${CNTBUILD_DOCKERFILE_SOURCES}" || return $?

  target="${context}/${CNTBUILD_DOCKERFILE_SOURCES}"
  bl64_msg_show_task "List container images available in the current context (${target})"
  # shellcheck disable=SC2164
  cd "$target"

  # shellcheck disable=SC2086
  bl64_fs_run_find . \
    $BL64_FS_SET_FIND_TYPE_FILE \
    $BL64_FS_SET_FIND_NAME 'Dockerfile' \
    $BL64_FS_SET_FIND_PRINT
}

function cntbuild_build() {
  bl64_dbg_app_show_function "$@"
  local container="$1"
  local context="$2"
  local tag="$3"
  local -a command_line
  local -a labels_version
  local -i labels_index=0
  local labels_file=''
  local labels_record=''
  local target=''

  bl64_check_parameter 'container' &&
    bl64_check_parameter 'context' ||
    return $?

  labels_file="${context}/${CNTBUILD_DOCKERFILE_SOURCES}/${container}/${CNTBUILD_METADATA_FILE}"
  if [[ -f "$labels_file" ]]; then
    bl64_dbg_app_show_info "get container labels (${labels_file})"
    IFS=$'\n'
    for labels_record in $(<"${labels_file}"); do
      unset IFS
      # shellcheck disable=SC2004
      command_line[${labels_index}]="--label=$labels_record"
      labels_index=$((labels_index + 1))

      # Extract the container version if provided
      if [[ "$labels_record" =~ org.opencontainers.image.version=.* ]]; then
        # shellcheck disable=SC2206
        IFS='=' labels_version=($labels_record)
        tag=${labels_version[1]}
      fi

    done
    bl64_dbg_app_show_info "labels: ${command_line[*]}"
  fi
  if [[ -z "$tag" ]]; then
    bl64_msg_show_error "unable to determine container tag from labels file. Specify one either by using the labels file or the -e parameter (${labels_file})"
    return 1
  fi

  target="${container}:${tag}"
  bl64_msg_show_task "Build container image (${target})"
  bl64_cnt_build \
    "$context" \
    "${CNTBUILD_DOCKERFILE_SOURCES}/${container}/${CNTBUILD_DOCKERFILE_NAME}" \
    "$target" \
    "${command_line[@]}"
}

function cntbuild_open() {
  bl64_dbg_app_show_function "$@"
  local container="$1"
  local context="$2"
  local tag="$3"
  local target=''

  bl64_check_parameter 'container' &&
    bl64_check_parameter 'context' ||
    return $?

  tag="$(cntbuild_get_version "$container" "$context" "$tag")" || return $?
  target="${container}:${tag}"
  bl64_msg_show_task "open shell in container image ($target})"
  bl64_cnt_run_sh "$target"
}

function cntbuild_delete_github() {
  local container="$1"
  local tag="$2"
  local api_path="/orgs/${CNTBUILD_REGISTRY_OWNER}/packages/container"
  local api_query=''
  local token=''
  local target="${container}${tag:+:}${tag}"

  api_query="/$(bl64_api_url_encode "$target")"
  bl64_msg_show_task "delete container image from GitHub registry ($target})"
  token="$("$CNTBUILD_GHCLI_BIN" auth token)"
  bl64_vcs_github_run_api \
    "$api_path" \
    "$BL64_API_METHOD_DELETE" \
    "$api_query" \
    "$token"
}

function cntbuild_delete() {
  bl64_dbg_app_show_function "$@"
  local container="$1"
  local tag="$2"

  bl64_check_parameter 'container' ||
    return $?

  case "$CNTBUILD_REGISTRY" in
  ghcr.io | ghcr.io/*)
    cntbuild_delete_github "$container" "$tag"
    ;;
  *)
    bl64_msg_show_error "Unsupported registry API (${CNTBUILD_REGISTRY})"
    return 1
    ;;
  esac
}

function cntbuild_publish() {
  bl64_dbg_app_show_function "$@"
  local container="$1"
  local context="$2"
  local tag="$3"
  local sign="$4"
  local target=''
  local digest=''
  local -i status=0

  tag="$(cntbuild_get_version "$container" "$context" "$tag")" || return $?
  target="${CNTBUILD_REGISTRY}/${container}:${tag}"
  bl64_msg_show_task "Publish container image to registry (${target})"
  bl64_cnt_tag "${container}:${tag}" "${container}:latest" &&
    bl64_cnt_push "${container}:${tag}" "$target" &&
    bl64_cnt_push "${container}:latest" "${CNTBUILD_REGISTRY}/${container}:latest"
  status=$?
  if ((status == 0)) && bl64_lib_flag_is_enabled "$sign"; then
    bl64_msg_show_task "Sign container image (${target})"
    digest="$(bl64_cnt_cli inspect --format '{{.ID}}' ${target})" &&
      "$CNTBUILD_COSIGN_BIN" \
        sign \
        --yes \
        "${CNTBUILD_REGISTRY}/${container}@${digest}"
    status=$?
  fi
  return $status
}

function cntbuild_reset() {
  bl64_dbg_app_show_function
  local images=''

  bl64_msg_show_task 'remove all local container images'
  images="$(bl64_cnt_cli images -q)"
  # shellcheck disable=SC2086
  [[ -n "$images" ]] && bl64_cnt_cli rmi -f $images

  bl64_msg_show_task 'cleanup docker runtime environment'
  # shellcheck disable=SC2046
  bl64_cnt_cli system prune -a -f

  return 0
}

function cntbuild_get_version() {
  bl64_dbg_app_show_function "@"
  local container="$1"
  local context="$2"
  local tag="$3"
  local labels_file="${context}/${CNTBUILD_DOCKERFILE_SOURCES}/${container}/${CNTBUILD_METADATA_FILE}"
  local -a labels_version
  local -i labels_index=0
  local labels_record=''

  if [[ -f "$labels_file" ]]; then
    IFS=$'\n'
    for labels_record in $(<"${labels_file}"); do
      unset IFS
      labels_index=$((labels_index + 1))
      if [[ "$labels_record" =~ org.opencontainers.image.version=.* ]]; then
        # shellcheck disable=SC2206
        IFS='=' labels_version=($labels_record)
        echo "${labels_version[1]}"
        break
      fi
    done
  elif [[ -n "$tag" ]]; then
    echo "$tag"
  else
    bl64_msg_show_error "unable to determine container tag from labels file. Specify one either by using the labels file or the -e parameter (${labels_file})"
    return 1
  fi

}

#######################################
# Initialize environment
#
# Arguments:
#   None
# Outputs:
#   Initializacion progress messages
# Returns:
#   0: initialization ok
#   >: failed to initialize
#######################################
function cntbuild_initialize() {
  bl64_dbg_app_show_function "@"
  local command="$1"
  local sign="$2"

  bl64_check_parameter 'command' ||
    { cntbuild_help && return 1; }

  bl64_cnt_setup || return $?

  # shellcheck disable=SC2249
  case "$command" in
  'cntbuild_delete')
    bl64_check_command_search_path "$CNTBUILD_GHCLI_BIN" &&
      bl64_check_export 'CNTBUILD_REGISTRY' &&
      bl64_check_export 'CNTBUILD_REGISTRY_OWNER' ||
      return $?
    ;;
  'cntbuild_publish')
    bl64_check_export 'CNTBUILD_REGISTRY' ||
      return $?
    if bl64_lib_flag_is_enabled; then
      bl64_check_command_search_path "$CNTBUILD_COSIGN_BIN" ||
        return $?
    fi
    ;;
  esac
  return 0
}

#######################################
# Show script usage description
#
# Arguments:
#   None
# Outputs:
#   Command line format and description
# Returns:
#   0
#######################################
function cntbuild_help() {
  bl64_msg_show_usage \
    '<-b|-u|-l|-n|-x|-r> [-c Container] [-e Tag] [-s] [-o Context] [-V Verbose] [-D Debug] [-h]' \
    'Build containers in dev environment' \
    '
  -b          : Build container
  -u          : Publish container to public registry
  -l          : List container sources
  -n          : Open local container
  -x          : Delete container from registry. Supported registries: GitHub
  -r          : Reset build environment. Warning: removes local images and containers
    ' '
  -h          : Show help
  -s          : Sign container (requires cosign)
    ' "
  -c Container: Container name: Format: base directory where the Dockerfile is. Required for -b, -l, -n
  -e Tag      : Container tag. Format: tag. Default: 0.1.0
  -o Context  : Build context. Format: full path. Default: PWD/src
  -V Verbose  : Set verbosity level. Format: one of BL64_MSG_VERBOSE_*
  -D Debug    : Enable debugging mode. Format: one of BL64_DBG_TARGET_*
  "
}
#
# Main
#

declare cntbuild_debug="$BL64_DBG_TARGET_NONE"
declare cntbuild_verbose="$BL64_MSG_VERBOSE_APP"
declare cntbuild_option=''
declare cntbuild_command="$BL64_VAR_NULL"
declare cntbuild_sign="$BL64_VAR_OFF"
declare cntbuild_container=''
declare cntbuild_tag=''
declare cntbuild_context=''
cntbuild_context="$(pwd)/src"

(($# == 0)) && cntbuild_help && exit 1
while getopts ':bulnsrxc:e:o:V:D:h' cntbuild_option; do
  case "$cntbuild_option" in
  b) cntbuild_command='cntbuild_build' ;;
  u) cntbuild_command='cntbuild_publish' ;;
  l) cntbuild_command='cntbuild_list' ;;
  n) cntbuild_command='cntbuild_open' ;;
  x) cntbuild_command='cntbuild_delete' ;;
  r) cntbuild_command='cntbuild_reset' ;;
  c) cntbuild_container="$OPTARG" ;;
  e) cntbuild_tag="$OPTARG" ;;
  o) cntbuild_context="$OPTARG" ;;
  s) cntbuild_sign="$BL64_VAR_ON" ;;
  V) cntbuild_verbose="$OPTARG" ;;
  D) cntbuild_debug="$OPTARG" ;;
  h) cntbuild_help && exit 0 ;;
  *) cntbuild_help && exit 1 ;;
  esac
done
bl64_dbg_set_level "$cntbuild_debug" && bl64_msg_set_level "$cntbuild_verbose" || exit $?
cntbuild_initialize "$cntbuild_command" "$cntbuild_sign" || exit $?

bl64_msg_show_batch_start "$cntbuild_command"
case "$cntbuild_command" in
'cntbuild_publish') "$cntbuild_command" "$cntbuild_container" "$cntbuild_context" "$cntbuild_tag" "$cntbuild_sign" ;;
'cntbuild_build' | 'cntbuild_open') "$cntbuild_command" "$cntbuild_container" "$cntbuild_context" "$cntbuild_tag" ;;
'cntbuild_list') "$cntbuild_command" "$cntbuild_context" ;;
'cntbuild_delete') "$cntbuild_command" "$cntbuild_container" "$cntbuild_tag" ;;
'cntbuild_reset') "$cntbuild_command" ;;
*) bl64_check_alert_parameter_invalid "$cntbuild_command" ;;
esac
bl64_msg_show_batch_finish $? "$cntbuild_command"
